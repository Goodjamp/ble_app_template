cscope 15 D:\Private\Programing\MCU\Nordic\ble_app_template\ble_app_template"               0000497308
	@D:\Private\Programing\MCU\Nordic\ble_app_template\BME280_HAL\BME280_source.c

8 
	~"°döt.h
"

9 
	~"°dboﬁ.h
"

11 
	~"BME280_sour˚.h
"

12 
	~"BME280_u£r_öãrÁ˚.h
"

16 
BME280_STATUS
 
upd©eRegi°î
(
uöt8_t
 
devi˚Addªs
, uöt8_à
ªgAddªs
, uöt8_à
d©a
, uöt8_à
d©aMask
);

17 
BME280_S32_t
 
BME280_com≥nßã_T_öt32
(
BME280H™dÀr
 *
h™dÀr
, BME280_S32_à
adc_T
);

18 
BME280_U32_t
 
BME280_com≥nßã_P_öt64
(
BME280H™dÀr
 *
h™dÀr
, 
BME280_S32_t
 
adc_P
);

19 
BME280_U32_t
 
bme280_com≥nßã_H_öt32
(
BME280H™dÀr
 *
h™dÀr
, 
BME280_S32_t
 
adc_H
);

23 c⁄° 
uöt8_t
 
	gadªsLi°OfOvî£m
[] = {

24 [
MES_VALUE_TEMPERATURE
] = (
uöt8_t
)
BME280_REG_CTRL_MES
,

25 [
MES_VALUE_HUMIDITY
] = (
uöt8_t
)
BME280_REG_CTRL_HUM
,

26 [
MES_VALUE_PRESSURE
] = (
uöt8_t
)
BME280_REG_CTRL_MES
,

29 c⁄° 
uöt8_t
 
	gshi·Li°OfOvî£mVÆ
[] = {

30 [
MES_VALUE_TEMPERATURE
] = (
uöt8_t
)
TEMPERATURE_OVERSAMPLING_FIELD_SHIFT
,

31 [
MES_VALUE_HUMIDITY
] = (
uöt8_t
)
HUMIDITY_OVERSAMPLING_FIELD_SHIFT
,

32 [
MES_VALUE_PRESSURE
] = (
uöt8_t
)
PRESSURE_OVERSAMPLING_FIELD_SHIFT
,

36 
BME280_S32_t
 
	gt_föe
;

38 
BME280_STATUS
 
	$upd©eRegi°î
(
uöt8_t
 
devi˚Addªs
, uöt8_à
ªgAddªs
, uöt8_à
d©a
, uöt8_à
d©aMask
){

39 
uöt8_t
 
buf„rD©aTx
;

42 if–
	`BMERódD©a
–
devi˚Addªs
, 
ªgAddªs
, &
buf„rD©aTx
, 1) )

44  
BME280_STATUS_COMUNICATION_ERROR
;

47 
buf„rD©aTx
 &~(
d©aMask
);

48 
buf„rD©aTx
 |
d©a
;

50 if–
	`BMEWrôeD©a
–
devi˚Addªs
, 
ªgAddªs
, &
buf„rD©aTx
, 1) )

52  
BME280_STATUS_COMUNICATION_ERROR
;

66  
BME280_STATUS_OK
;

67 
	}
}

70 
	$BME280_£tI2CAddªss
(
BME280H™dÀr
 *
h™dÀr
, 
uöt8_t
 
addªss
){

71 
h™dÀr
->
£lfAddªss
 = 
addªss
;

72 
	}
}

75 
BME280_STATUS
 
	$BME280_öô
(
BME280H™dÀr
 *
h™dÀr
){

76 
uöt16_t
 
ãmpE4
, 
ãmpE5
, 
ãmpE6
, 
ãmpE7
;

78 if–
	`BMERódD©a
–
h™dÀr
->
£lfAddªss
, 
BME280_REG_CALIB00_23
, (
uöt8_t
*)&(h™dÀr->
ˇlibøti⁄D©a
), 
SIZE_OF_CALIBRATION_1
) )

81  
BME280_STATUS_COMUNICATION_ERROR
;

84 if–
	`BMERódD©a
–
h™dÀr
->
£lfAddªss
, 
BME280_REG_CALIB24
, &((
uöt8_t
*)(&h™dÀr->
ˇlibøti⁄D©a
))[
SIZE_OF_CALIBRATION_1
], 
SIZE_OF_CALIBRATION_2
) )

86  
BME280_STATUS_COMUNICATION_ERROR
;

89 if–
	`BMERódD©a
–
h™dÀr
->
£lfAddªss
, 
BME280_REG_CALIB25_31
, &((
uöt8_t
*)(&h™dÀr->
ˇlibøti⁄D©a
))[
SIZE_OF_CALIBRATION_1
 + 
SIZE_OF_CALIBRATION_2
], 
SIZE_OF_CALIBRATION_3
) )

91  
BME280_STATUS_COMUNICATION_ERROR
;

93 
ãmpE4
 =((
uöt8_t
*)(&
h™dÀr
->
ˇlibøti⁄D©a
))[28];

94 
ãmpE5
 =((
uöt8_t
*)(&
h™dÀr
->
ˇlibøti⁄D©a
))[29];

95 
ãmpE6
 =((
uöt8_t
*)(&
h™dÀr
->
ˇlibøti⁄D©a
))[30];

96 
ãmpE7
 =((
uöt8_t
*)(&
h™dÀr
->
ˇlibøti⁄D©a
))[31];

97 
h™dÀr
->
ˇlibøti⁄D©a
.
dig_H4_
 = (
öt16_t
)((
ãmpE4
<<4Ë| (
ãmpE5
 & 0b1111));

98 
h™dÀr
->
ˇlibøti⁄D©a
.
dig_H5_
 = (
öt16_t
)((
ãmpE6
<<4Ë| (
ãmpE5
>>4) );

99 
h™dÀr
->
ˇlibøti⁄D©a
.
dig_H6_
 = (
öt8_t
)
ãmpE7
;

101  
h™dÀr
->
£ns‹Sètus
 = 
BME280_STATUS_OK
;

102 
	}
}

105 
BME280_STATUS
 
	$BME280_£tVÆueMesSèã
 (
BME280H™dÀr
 *
h™dÀr
, 
MES_VALUE_DEF
 
mesVÆue
, 
MES_STATE_DEF
 
√wMesSèã
){

106 if(!
	`IS_BME_AVAILABLE
(
h™dÀr
))

108  
h™dÀr
->
£ns‹Sètus
;

111 
uöt8_t
 
ovîSam∂e
 = (
MES_STATE_ENABLE
 =
√wMesSèã
Ë? (
CTRL_MEAS_OSRS_OVERx1
):(
CTRL_MEAS_OSRS_SKIPED
);

112 
uöt8_t
 
√wFõldVÆue
 = 
ovîSam∂e
 << 
shi·Li°OfOvî£mVÆ
[
mesVÆue
] ;

113  
h™dÀr
->
£ns‹Sètus
 = 
	`upd©eRegi°î
(h™dÀr->
£lfAddªss
,

114 
adªsLi°OfOvî£m
[
mesVÆue
],

115 
√wFõldVÆue
,

116 (
uöt8_t
)(
CTRL_MEAS_OSRS_FIELD_MASK
 << 
shi·Li°OfOvî£mVÆ
[
mesVÆue
]));

117 
	}
}

119 
BME280_STATUS
 
	$BME280_£tOvîSam∂e
(
BME280H™dÀr
 *
h™dÀr
, 
MES_VALUE_DEF
 
mesVÆue
, 
OVERSEMPLE_DEF
 
ovîSam∂e
){

120 if(!
	`IS_BME_AVAILABLE
(
h™dÀr
))

122  
h™dÀr
->
£ns‹Sètus
;

125 
uöt8_t
 
√wFõldVÆue
 = 
ovîSam∂e
 << 
shi·Li°OfOvî£mVÆ
[
mesVÆue
];

126  
h™dÀr
->
£ns‹Sètus
 = 
	`upd©eRegi°î
(h™dÀr->
£lfAddªss
,

127 
adªsLi°OfOvî£m
[
mesVÆue
],

128 
√wFõldVÆue
,

129 (
uöt8_t
)(
CTRL_MEAS_OSRS_FIELD_MASK
 << 
shi·Li°OfOvî£mVÆ
[
mesVÆue
]));

130 
	}
}

133 
BME280_STATUS
 
	$BME280_£tFûãrP¨amëîs
(
BME280H™dÀr
 *
h™dÀr
, 
FILTER_DEF
 
fûãrP¨
){

134 if(!
	`IS_BME_AVAILABLE
(
h™dÀr
))

136  
h™dÀr
->
£ns‹Sètus
;

139 
uöt8_t
 
√wFõldVÆue
 = 
fûãrP¨
 << 
FILTER_FIELD_SHIFT
;

140  
h™dÀr
->
£ns‹Sètus
 = 
	`upd©eRegi°î
(h™dÀr->
£lfAddªss
,

141 
BME280_REG_CONFIG
,

142 
√wFõldVÆue
,

143 (
uöt8_t
)(
FILTER_FIELD_MASK
 << 
FILTER_FIELD_SHIFT
));

144 
	}
}

147 
BME280_STATUS
 
	$BME280_£tMesDñay
(
BME280H™dÀr
 *
h™dÀr
, 
MEASUREMENT_DELAY_DEF
 
mesDñay
){

148 if(!
	`IS_BME_AVAILABLE
(
h™dÀr
))

150  
h™dÀr
->
£ns‹Sètus
;

153 
uöt8_t
 
√wFõldVÆue
 = 
mesDñay
 << 
CONFIG_T_SB_FIELD_SHIFT
;

154  
h™dÀr
->
£ns‹Sètus
 = 
	`upd©eRegi°î
(h™dÀr->
£lfAddªss
,

155 
BME280_REG_CONFIG
,

156 
√wFõldVÆue
,

157 (
uöt8_t
)(
CONFIG_T_SB_FIELD_MASK
 << 
CONFIG_T_SB_FIELD_SHIFT
));

158 
	}
}

161 
BME280_STATUS
 
	$BME280_isOnLöe
(
BME280H™dÀr
 *
h™dÀr
, 
boﬁ
 *
⁄Löe
){

162 
uöt8_t
 
ªgi°îVÆue
;

163 if(!
	`IS_BME_AVAILABLE
(
h™dÀr
))

165  
h™dÀr
->
£ns‹Sètus
;

167 if–
TRANSACION_STATUS_ERROR
 =
	`BMERódD©a
(
h™dÀr
->
£lfAddªss
, 
BME280_REG_ID
, &
ªgi°îVÆue
, 1) )

169  
h™dÀr
->
£ns‹Sètus
 = 
BME280_STATUS_COMUNICATION_ERROR
;;

171 *
⁄Löe
 = (
BME280_ID
 =
ªgi°îVÆue
Ë? 
åue
 : 
Ál£
;

172  
h™dÀr
->
£ns‹Sètus
 = 
BME280_STATUS_OK
;

173 
	}
}

176 
BME280_STATUS
 
	$BME280_ª£t
(
BME280H™dÀr
 *
h™dÀr
){

177 
uöt8_t
 
ªgi°îVÆue
 = 
BME280_RESET
;

178 if(!
	`IS_BME_AVAILABLE
(
h™dÀr
))

180  
h™dÀr
->
£ns‹Sètus
;

182 if–
TRANSACION_STATUS_ERROR
 =
	`BMEWrôeD©a
(
h™dÀr
->
£lfAddªss
, 
BME280_REG_RESET
, &
ªgi°îVÆue
, 1) )

184  
h™dÀr
->
£ns‹Sètus
 = 
BME280_STATUS_COMUNICATION_ERROR
;

186  
h™dÀr
->
£ns‹Sètus
 = 
BME280_STATUS_OK
;

187 
	}
}

190 
BME280_STATUS
 
	$BME280_f‹˚dMes
(
BME280H™dÀr
 *
h™dÀr
, *
ªzMesTem≥øtuª
, *
ªzMesPªssuª
, *
ªzMesHumidôy
){

191 
uöt8_t
 
d©aRx
[
SIZE_OF_REZ_BYTES
];

192 
öt32_t
 
ªzADC
;

193 
öt32_t
 
ªzMesTem≥øtuªI¡
;

194 
uöt32_t
 
ªzMesHumidôyUI¡
;

195 
uöt32_t
 
ªzMesPªssuªUI¡
;

196 if(!
	`IS_BME_AVAILABLE
(
h™dÀr
))

198  
h™dÀr
->
£ns‹Sètus
;

200 
h™dÀr
->
£ns‹Sètus
 = 
BME280_STATUS_BUSY
;

203 if–(
h™dÀr
->
£ns‹Sètus
 = 
	`upd©eRegi°î
(h™dÀr->
£lfAddªss
,

204 
BME280_REG_CTRL_MES
,

205 
CTRL_MEAS_MODE_FORCED
,

206 (
uöt8_t
)(
CTRL_MEAS_MODE_FIELD_MASK
 << 
CTRL_MEAS_MODE_FIELD_SHIFT
))Ë!
BME280_STATUS_OK
 )

208  
h™dÀr
->
£ns‹Sètus
 = 
BME280_STATUS_COMUNICATION_ERROR
;

213 i‡–
	`BMERódD©a
–
h™dÀr
->
£lfAddªss
, 
BME280_REG_STATUS
, 
d©aRx
, 1Ë=
TRANSACION_STATUS_ERROR
 )

215  
h™dÀr
->
£ns‹Sètus
 = 
BME280_STATUS_COMUNICATION_ERROR
;

219 if–!(
d©aRx
[0] & (
STATUS_MEASURING
 | 
STATUS_IM_UPDATE
)))

226 if–
	`BMERódD©a
–
h™dÀr
->
£lfAddªss
, 
BME280_REG_PRES_MLSB
, 
d©aRx
, (d©aRx)Ë=
TRANSACION_STATUS_ERROR
 )

228  
h™dÀr
->
£ns‹Sètus
 = 
BME280_STATUS_COMUNICATION_ERROR
;

232 
ªzADC
 = 
d©aRx
[
TEMP_MSB
]<<12 | d©aRx[
TEMP_LSB
]<<4 | d©aRx[
TEMP_XLSB
];

233 
ªzMesTem≥øtuªI¡
 = 
	`BME280_com≥nßã_T_öt32
(
h™dÀr
, 
ªzADC
);

234 (*
ªzMesTem≥øtuª
Ë
ªzMesTem≥øtuªI¡
 * 
TEMPERATURE_CALC
;

237 
ªzADC
 = 
d©aRx
[
PRESS_MSB
]<<12 | d©aRx[
PRESS_LSB
]<<4 | d©aRx[
PRESS_XLSB
];

238 
ªzMesPªssuªUI¡
 = 
	`BME280_com≥nßã_P_öt64
(
h™dÀr
, 
ªzADC
);

239 (*
ªzMesPªssuª
Ë
ªzMesPªssuªUI¡
/
PRESSURE_CALC
;

242 
ªzADC
 = 
d©aRx
[
HUM_MSB
]<<8 | d©aRx[
HUM_LSB
];

243 
ªzMesHumidôyUI¡
 = 
	`bme280_com≥nßã_H_öt32
(
h™dÀr
, 
ªzADC
);

244 (*
ªzMesHumidôy
Ë
ªzMesHumidôyUI¡
/
HUMIDITY_CALC
;

246  
h™dÀr
->
£ns‹Sètus
 = 
BME280_STATUS_OK
;

247 
	}
}

251 
BME280_S32_t
 
	$BME280_com≥nßã_T_öt32
(
BME280H™dÀr
 *
h™dÀr
, 
BME280_S32_t
 
adc_T
)

253 
BME280_S32_t
 
v¨1
, 
v¨2
, 
T
;

254 
v¨1
 = ((((
adc_T
>>3Ë- ((
BME280_S32_t
)
dig_T1
<<1))Ë* ((BME280_S32_t)
dig_T2
)) >> 11;

255 
v¨2
 = (((((
adc_T
>>4Ë- ((
BME280_S32_t
)
dig_T1
)) * ((adc_T>>4) - ((BME280_S32_t)dig_T1))) >> 12) *\

256 ((
BME280_S32_t
)
dig_T3
)) >> 14;

257 
t_föe
 = 
v¨1
 + 
v¨2
;

258 
T
 = (
t_föe
 * 5 + 128) >> 8;

259  
T
;

260 
	}
}

265 
BME280_U32_t
 
	$BME280_com≥nßã_P_öt64
(
BME280H™dÀr
 *
h™dÀr
, 
BME280_S32_t
 
adc_P
) {

266 
BME280_S64_t
 
v¨1
, 
v¨2
, 
p
;

267 
v¨1
 = ((
BME280_S64_t
Ë
t_föe
) - 128000;

268 
v¨2
 = 
v¨1
 * v¨1 * (
BME280_S64_t
Ë
dig_P6
;

269 
v¨2
 = v¨2 + ((
v¨1
 * (
BME280_S64_t
Ë
dig_P5
) << 17);

270 
v¨2
 = v¨2 + (((
BME280_S64_t
Ë
dig_P4
) << 35);

271 
v¨1
 = ((v¨1 * v¨1 * (
BME280_S64_t
Ë
dig_P3
) >> 8)

272 + ((
v¨1
 * (
BME280_S64_t
Ë
dig_P2
) << 12);

273 
v¨1
 = (((((
BME280_S64_t
Ë1Ë<< 47Ë+ v¨1)Ë* ((BME280_S64_tË
dig_P1
)

275 i‡(
v¨1
 == 0) {

278 
p
 = 1048576 - 
adc_P
;

279 
p
 = ((’ << 31Ë- 
v¨2
Ë* 3125Ë/ 
v¨1
;

280 
v¨1
 = (((
BME280_S64_t
Ë
dig_P9
Ë* (
p
 >> 13) * (p >> 13)) >> 25;

281 
v¨2
 = (((
BME280_S64_t
Ë
dig_P8
Ë* 
p
) >> 19;

282 
p
 = (’ + 
v¨1
 + 
v¨2
Ë>> 8Ë+ (((
BME280_S64_t
Ë
dig_P7
) << 4);

283  (
BME280_U32_t
Ë
p
;

284 
	}
}

288 
BME280_U32_t
 
	$bme280_com≥nßã_H_öt32
(
BME280H™dÀr
 *
h™dÀr
, 
BME280_S32_t
 
adc_H
){

289 
BME280_S32_t
 
v_x1_u32r
;

290 
v_x1_u32r
 = (
t_föe
 - ((
BME280_S32_t
)76800));

291 
v_x1_u32r
 = (((((
adc_H
 << 14Ë- (((
BME280_S32_t
)
dig_H4
Ë<< 20Ë- (((BME280_S32_t)
dig_H5
) * v_x1_u32r)) +\

292 ((
BME280_S32_t
)16384)Ë>> 15Ë* (((((((
v_x1_u32r
 * ((BME280_S32_t)
dig_H6
)) >> 10) * (((v_x1_u32r *\

293 ((
BME280_S32_t
)
dig_H3
)) >> 11) + ((BME280_S32_t)32768))) >> 10) + ((BME280_S32_t)2097152)) *\

294 ((
BME280_S32_t
)
dig_H2
) + 8192) >> 14));

295 
v_x1_u32r
 = (v_x1_u32∏- (((((v_x1_u32∏>> 15Ë* (v_x1_u32∏>> 15)Ë>> 7Ë* ((
BME280_S32_t
)
dig_H1
)) >> 4));

296 
v_x1_u32r
 = (v_x1_u32r < 0 ? 0 : v_x1_u32r);

297 
v_x1_u32r
 = (v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r);

298  (
BME280_U32_t
)(
v_x1_u32r
>>12);

299 
	}
}

	@D:\Private\Programing\MCU\Nordic\ble_app_template\BME280_HAL\BME280_source.h

9 #i‚de‡
BME_280_HAL_H_


10 
	#BME_280_HAL_H_


	)

12 
	~"°döt.h
"

14 
	~"BME280_sour˚.h
"

17 
öt32_t
 
	tBME280_S32_t
;

18 
uöt32_t
 
	tBME280_U32_t
;

19 
öt64_t
 
	tBME280_S64_t
;

20 
uöt64_t
 
	tBME280_U64_t
;

22 
	#dig_T1
 
h™dÀr
->
ˇlibøti⁄D©a
.
dig_T1_


	)

23 
	#dig_T2
 
h™dÀr
->
ˇlibøti⁄D©a
.
dig_T2_


	)

24 
	#dig_T3
 
h™dÀr
->
ˇlibøti⁄D©a
.
dig_T3_


	)

26 
	#dig_P1
 
h™dÀr
->
ˇlibøti⁄D©a
.
dig_P1_


	)

27 
	#dig_P2
 
h™dÀr
->
ˇlibøti⁄D©a
.
dig_P2_


	)

28 
	#dig_P3
 
h™dÀr
->
ˇlibøti⁄D©a
.
dig_P3_


	)

29 
	#dig_P4
 
h™dÀr
->
ˇlibøti⁄D©a
.
dig_P4_


	)

30 
	#dig_P5
 
h™dÀr
->
ˇlibøti⁄D©a
.
dig_P5_


	)

31 
	#dig_P6
 
h™dÀr
->
ˇlibøti⁄D©a
.
dig_P6_


	)

32 
	#dig_P7
 
h™dÀr
->
ˇlibøti⁄D©a
.
dig_P7_


	)

33 
	#dig_P8
 
h™dÀr
->
ˇlibøti⁄D©a
.
dig_P8_


	)

34 
	#dig_P9
 
h™dÀr
->
ˇlibøti⁄D©a
.
dig_P9_


	)

36 
	#dig_H1
 
h™dÀr
->
ˇlibøti⁄D©a
.
dig_H1_


	)

37 
	#dig_H2
 
h™dÀr
->
ˇlibøti⁄D©a
.
dig_H2_


	)

38 
	#dig_H3
 
h™dÀr
->
ˇlibøti⁄D©a
.
dig_H3_


	)

39 
	#dig_H4
 
h™dÀr
->
ˇlibøti⁄D©a
.
dig_H4_


	)

40 
	#dig_H5
 
h™dÀr
->
ˇlibøti⁄D©a
.
dig_H5_


	)

41 
	#dig_H6
 
h™dÀr
->
ˇlibøti⁄D©a
.
dig_H6_


	)

43 
	#TEMPERATURE_CALC
 0.01F

	)

44 
	#PRESSURE_CALC
 256.0F

	)

45 
	#HUMIDITY_CALC
 1024.0F

	)

48 
	#BME280_ID
 0x60

	)

51 
	#BME280_RESET
 0xB6

	)

54 
	mBME280_REG_HUM_LSB
 = 0xFE,

55 
	mBME280_REG_HUM_MSB
 = 0xFD,

56 
	mBME280_REG_TEMP_XLSB
 = 0xFC,

57 
	mBME280_REG_TEMP_LSB
 = 0xFB,

58 
	mBME280_REG_TEMP_MLSB
 = 0xFA,

59 
	mBME280_REG_PRES_XLSB
 = 0xF9,

60 
	mBME280_REG_PRES_LSB
 = 0xF8,

61 
	mBME280_REG_PRES_MLSB
 = 0xF7,

62 
	mBME280_REG_CONFIG
 = 0xF5,

63 
	mBME280_REG_CTRL_MES
 = 0xF4,

64 
	mBME280_REG_STATUS
 = 0xF3,

65 
	mBME280_REG_CTRL_HUM
 = 0xF2,

66 
	mBME280_REG_RESET
 = 0xE0,

67 
	mBME280_REG_ID
 = 0xD0,

69 
	mBME280_REG_CALIB25_31
 = 0xE1,

70 
	mBME280_REG_CALIB24
 = 0xA1,

71 
	mBME280_REG_CALIB00_23
 = 0x88,

72 }
	tBME280_REG
;

78 
	mCTRL_MEAS_OSRS_SKIPED
 = (
uöt8_t
)0x0,

79 
	mCTRL_MEAS_OSRS_OVERx1
 = (
uöt8_t
)0x1,

80 }
	tCTRL_MEAS_OSRS_OVER
;

81 
	#IS_CTRL_MEAS_OSRS_OVER
(
X
Ë(X =
OVERSEMPLE_DISABLE
)|| \

82 (
X
 =
OVERSEMPLE_2
 )|| \

83 (
X
 =
OVERSEMPLE_4
 )|| \

84 (
X
 =
OVERSEMPLE_8
 )|| \

85 (
X
 =
OVERSEMPLE_16
)

	)

87 
	#CTRL_MEAS_OSRS_FIELD_MASK
 0x7

	)

89 
	#HUMIDITY_OVERSAMPLING_FIELD_SHIFT
 0x0

	)

90 
	#PRESSURE_OVERSAMPLING_FIELD_SHIFT
 0x2

	)

91 
	#TEMPERATURE_OVERSAMPLING_FIELD_SHIFT
 0x5

	)

98 
	#STATUS_MEASURING
 (
uöt8_t
)0x8

	)

101 
	#STATUS_IM_UPDATE
 (
uöt8_t
)0x1

	)

108 
	mCTRL_MEAS_MODE_SLEEP
 = (
uöt8_t
)0x0,

109 
	mCTRL_MEAS_MODE_FORCED
 = (
uöt8_t
)0x1,

110 
	mCTRL_MEAS_MODE_NORMAL
 = (
uöt8_t
)0x3

111 }
	tCTRL_MEAS_MODE_DEF
;

112 
	#CTRL_MEAS_MODE_FIELD_MASK
 0x3

	)

113 
	#CTRL_MEAS_MODE_FIELD_SHIFT
 0x0

	)

118 
	#CONFIG_T_SB_FIELD_MASK
 0x7

	)

119 
	#CONFIG_T_SB_FIELD_SHIFT
 0x5

	)

123 
	#FILTER_FIELD_MASK
 0x7

	)

124 
	#FILTER_FIELD_SHIFT
 0x2

	)

127 
	#SIZE_OF_REZ_BYTES
 0x8

	)

128 
	#PRESS_MSB
 0x0

	)

129 
	#PRESS_LSB
 0x1

	)

130 
	#PRESS_XLSB
 0x2

	)

131 
	#TEMP_MSB
 0x3

	)

132 
	#TEMP_LSB
 0x4

	)

133 
	#TEMP_XLSB
 0x5

	)

134 
	#HUM_MSB
 0x6

	)

135 
	#HUM_LSB
 0x7

	)

139 
	#SIZE_OF_CALIBRATION_1
 24

	)

140 
	#SIZE_OF_CALIBRATION_2
 1

	)

141 
	#SIZE_OF_CALIBRATION_3
 7

	)

142 #¥agm®
∑ck
(
push
,1)

144 
uöt16_t
 
	mdig_T1_
;

145 
öt16_t
 
	mdig_T2_
;

146 
öt16_t
 
	mdig_T3_
;

147 
uöt16_t
 
	mdig_P1_
;

148 
öt16_t
 
	mdig_P2_
;

149 
öt16_t
 
	mdig_P3_
;

150 
öt16_t
 
	mdig_P4_
;

151 
öt16_t
 
	mdig_P5_
;

152 
öt16_t
 
	mdig_P6_
;

153 
öt16_t
 
	mdig_P7_
;

154 
öt16_t
 
	mdig_P8_
;

155 
öt16_t
 
	mdig_P9_
;

156 
uöt8_t
 
	mdig_H1_
;

157 
öt16_t
 
	mdig_H2_
;

158 
uöt8_t
 
	mdig_H3_
;

159 
öt16_t
 
	mdig_H4_
;

160 
öt16_t
 
	mdig_H5_
;

161 
öt8_t
 
	mdig_H6_
;

162 }
	tBME280_CALIB_COEF_DEF
;

163 #¥agm®
∑ck
(
p›
)

166 
	#IS_BME_AVAILABLE
(
X
Ë((X->
£ns‹Sètus
 =
BME280_STATUS_OK
)||\

167 (
X
->
£ns‹Sètus
 =
BME280_STATUS_SENSOR_ERROR
)|| \

168 (
X
->
£ns‹Sètus
 =
BME280_STATUS_COMUNICATION_ERROR
))

	)

	@D:\Private\Programing\MCU\Nordic\ble_app_template\BME280_HAL\BME280_user_interface.h

11 #i‚de‡
BME280_USER_INTERFASE_H_


12 
	#BME280_USER_INTERFASE_H_


	)

14 
	~"°döt.h
"

15 
	~"°dboﬁ.h
"

17 
	~"BME280_sour˚.h
"

19 
	#BME280_ADDRESS_LOW
 (
uöt8_t
)0x76

	)

20 
	#BME280_ADDRESS_HIGHT
 (
uöt8_t
)0x77

	)

25 
	mMES_VALUE_TEMPERATURE
 = 0,

26 
	mMES_VALUE_PRESSURE
,

27 
	mMES_VALUE_HUMIDITY
,

28 }
	tMES_VALUE_DEF
;

31 
	mMES_STATE_ENABLE
,

32 
	mMES_STATE_DISABLE
,

33 }
	tMES_STATE_DEF
;

36 
	mMES_MODE_CONTINUOUS
 = 0,

37 
	mMES_MODE_SIMLE
,

38 }
	tMES_MODE_DEF
;

41 
	mOVERSEMPLE_DISABLE
 = 1,

42 
	mOVERSEMPLE_2
,

43 
	mOVERSEMPLE_4
,

44 
	mOVERSEMPLE_8
,

45 
	mOVERSEMPLE_16


46 }
	tOVERSEMPLE_DEF
;

49 
	mFILTER_DISABLE
 = 0,

50 
	mFILTER_ORDER_2
,

51 
	mFILTER_ORDER_4
,

52 
	mFILTER_ORDER_8
,

53 
	mFILTER_ORDER_16


54 }
	tFILTER_DEF
;

57 
	mMEASUREMENT_DELAY_0_5ms
 = 0,

58 
	mMEASUREMENT_DELAY_10_0ms
,

59 
	mMEASUREMENT_DELAY_20_0ms
,

60 
	mMEASUREMENT_DELAY_65_5ms
,

61 
	mMEASUREMENT_DELAY_125_0ms
,

62 
	mMEASUREMENT_DELAY_250_0ms
,

63 
	mMEASUREMENT_DELAY_500_0ms
,

64 
	mMEASUREMENT_DELAY_1000_0ms
,

65 }
	tMEASUREMENT_DELAY_DEF
;

68 
	mBME280_STATUS_OK
,

69 
	mBME280_STATUS_SENSOR_ERROR
,

70 
	mBME280_STATUS_COMUNICATION_ERROR
,

71 
	mBME280_STATUS_BUSY


72 }
	tBME280_STATUS
;

74 (*
	tbme280MesCÆlbackDef
)(
	tBME280_STATUS
 
	tªzMesSètus
,
	tªzMesTem≥øtuª
,
	tªzMesPªssuª
, 
	tªzMesHumidôy
);

77 
uöt8_t
 
£lfAddªss
;

78 
BME280_CALIB_COEF_DEF
 
ˇlibøti⁄D©a
;

79 
BME280_STATUS
 
£ns‹Sètus
;

80 
bme280MesCÆlbackDef
 
mesCÆlback
;

81 }
	tBME280H™dÀr
;

84 
	`BME280_£tI2CAddªss
 (
BME280H™dÀr
 *
h™dÀr
, 
uöt8_t
 
addªss
);

85 
BME280_STATUS
 
	`BME280_öô
 (
BME280H™dÀr
 *
h™dÀr
);

86 
BME280_STATUS
 
	`BME280_£tVÆueMesSèã
 (
BME280H™dÀr
 *
h™dÀr
, 
MES_VALUE_DEF
 
mesVÆue
, 
MES_STATE_DEF
 
√wMesSèã
);

87 
BME280_STATUS
 
	`BME280_£tOvîSam∂e
 (
BME280H™dÀr
 *
h™dÀr
, 
MES_VALUE_DEF
 
mesVÆue
, 
OVERSEMPLE_DEF
 
ovîSam∂e
);

88 
BME280_STATUS
 
	`BME280_£tFûãrP¨amëîs
(
BME280H™dÀr
 *
h™dÀr
, 
FILTER_DEF
 
fûãrP¨
);

89 
BME280_STATUS
 
	`BME280_£tMesDñay
 (
BME280H™dÀr
 *
h™dÀr
, 
MEASUREMENT_DELAY_DEF
 
mesDñay
);

90 
BME280_STATUS
 
	`BME280_£tMesCÆlBack
 (
BME280H™dÀr
 *
h™dÀr
, 
bme280MesCÆlbackDef
 
mesCÆlbak
);

91 
BME280_STATUS
 
	`BME280_ª£t
 (
BME280H™dÀr
 *
h™dÀr
);

92 
BME280_STATUS
 
	`BME280_isOnLöe
 (
BME280H™dÀr
 *
h™dÀr
, 
boﬁ
 *
⁄Löe
);

95 
BME280_STATUS
 
	`BME280_f‹˚dMes
 (
BME280H™dÀr
 *
h™dÀr
, *
ªzMesTem≥øtuª
, *
ªzMesPªssuª
, *
ªzMesHumidôy
);

96 
BME280_STATUS
 
	`BME280_°¨tC⁄töiousMes
 (
BME280H™dÀr
 *
h™dÀr
, 
MES_STATE_DEF
 
√wMesSèã
);

99 
BME280_STATUS
 
	`BME280_gëSètus
 (
BME280H™dÀr
 *
h™dÀr
);

103 
TRANSACION_STATUS_OK
,

104 
TRANSACION_STATUS_ERROR


105 }
	tTRANSACION_STATUS
;

107 
TRANSACION_STATUS
 
	`BMERódD©a
 (
uöt8_t
 
£ns‹Addªss
, uöt8_à
£ns‹Rógi°î
, uöt8_à*
d©a
, uöt8_à
numD©a
);

108 
TRANSACION_STATUS
 
	`BMEWrôeD©a
(
uöt8_t
 
£ns‹Addªss
, uöt8_à
£ns‹Rógi°î
, uöt8_à*
d©a
, uöt8_à
numD©a
);

109 
uöt32_t
 
	`£ns‹GëTime
();

	@D:\Private\Programing\MCU\Nordic\ble_app_template\bme280Interface.c

1 
	~"°döt.h
"

2 
	~"°rög.h
"

4 
	~"ƒf51.h
"

5 
	~"ƒf_timî.h
"

6 
	~"ƒf_gpio.h
"

7 
	~"ƒf_nvmc.h
"

8 
	~"ƒf_dñay.h
"

10 
	~"sdk_c⁄fig.h
"

11 
	~"sdk_îr‹s.h
"

12 
	~"ƒf_drv_twi.h
"

14 
	~"BME280_u£r_öãrÁ˚.h
"

15 
	~"bme280I¡îÁ˚.h
"

17 
	#TWI_INSTANCE_ID
 
TWI0_INSTANCE_INDEX


	)

18 
	#TIMER_INT_MS
 10

	)

19 
	#MY_TIM
 
NRF_TIMER1


	)

21 
ƒf_drv_twi_t
 
	gtwiSís‹
 = 
NRF_DRV_TWI_INSTANCE
(
TWI_INSTANCE_ID
);

22 
uöt32_t
 
	g˙tMs
 = 0;

23 
uöt8_t
 
	gtxD©a
[40];

26 c⁄° 
uöt32_t
 
	gtimFrqLi°
[]=

28 [
NRF_TIMER_FREQ_16MHz
] = 16000000,

29 [
NRF_TIMER_FREQ_8MHz
] = 8000000,

30 [
NRF_TIMER_FREQ_4MHz
] = 4000000,

31 [
NRF_TIMER_FREQ_2MHz
] = 2000000,

32 [
NRF_TIMER_FREQ_1MHz
] = 1000000,

33 [
NRF_TIMER_FREQ_500kHz
] = 500000,

34 [
NRF_TIMER_FREQ_250kHz
] = 250000,

35 [
NRF_TIMER_FREQ_125kHz
] = 125000,

36 [
NRF_TIMER_FREQ_62500Hz
] = 62500,

37 [
NRF_TIMER_FREQ_31250Hz
] = 31250

41 
	$timîInô
()

44 
uöt32_t
 
vÆCC
 = (
timFrqLi°
[
NRF_TIMER_FREQ_250kHz
] / 1000Ë* 
TIMER_INT_MS
;

45 
	`ƒf_timî_mode_£t
(
MY_TIM
, 
NRF_TIMER_MODE_TIMER
);

46 
	`ƒf_timî_bô_width_£t
(
MY_TIM
, 
NRF_TIMER_BIT_WIDTH_16
);

47 
	`ƒf_timî_‰equícy_£t
(
MY_TIM
, 
NRF_TIMER_FREQ_250kHz
);

48 
	`ƒf_timî_cc_wrôe
(
MY_TIM
, 
NRF_TIMER_CC_CHANNEL0
, 
vÆCC
);

49 
	`ƒf_timî_öt_íabÀ
(
MY_TIM
, (0b1 << 16));

51 
	`NVIC_SëPri‹ôy
(
TIMER1_IRQn
, 3);

52 
	`NVIC_E«bÀIRQ
(
TIMER1_IRQn
);

54 
	`ƒf_timî_èsk_åiggî
(
MY_TIM
, 
NRF_TIMER_TASK_START
);

55 
	}
}

66 
	$TIMER1_IRQH™dÀr
()

68 
˙tMs
++;

96 
	`ƒf_timî_èsk_åiggî
(
MY_TIM
, 
NRF_TIMER_TASK_CLEAR
);

97 
	`ƒf_timî_evít_˛ór
(
MY_TIM
, 
NRF_TIMER_EVENT_COMPARE0
);

101 
	}
}

104 
ªt_code_t
 
	$bme280I¡îÁ˚Inô
()

106 
ªt_code_t
 
îr_code
;

107 
ƒf_drv_twi_c⁄fig_t
 
twiC⁄fig
 = {

108 .
s˛
 = 1,

109 .
sda
 = 2,

110 .
‰equícy
 = 
TWI_FREQUENCY_FREQUENCY_K400
,

111 .
öãºu±_¥i‹ôy
 = 0,

112 .
˛ór_bus_öô
 = 
Ál£
,

113 .
hﬁd_bus_unöô
 = 
åue
,

115 
îr_code
 = 
	`ƒf_drv_twi_öô
(&
twiSís‹
,

116 &
twiC⁄fig
,

117 
NULL
,

118 
NULL
);

119 if–
îr_code
 != 0)

121  
îr_code
;

123 
	`ƒf_drv_twi_íabÀ
(&
twiSís‹
);

125 
	}
}

128 
TRANSACION_STATUS
 
	$BMERódD©a
 (
uöt8_t
 
£ns‹Addªss
, uöt8_à
£ns‹Rógi°î
, uöt8_à*
d©a
, uöt8_à
numD©a
)

130 
ªt_code_t
 
ªx_Rx
;

131 
txD©a
[0] = 
£ns‹Rógi°î
;

132 
ªx_Rx
 = 
	`ƒf_drv_twi_tx
 (&
twiSís‹
,

133 
£ns‹Addªss
,

134 
txD©a
,

136 
åue


138 if(
ªx_Rx
 !
NRF_SUCCESS
)

140  
TRANSACION_STATUS_ERROR
;

142 
ªx_Rx
 = 
	`ƒf_drv_twi_rx
 (&
twiSís‹
,

143 
£ns‹Addªss
,

144 
d©a
,

145 
numD©a


148  (
ªx_Rx
 =
NRF_SUCCESS
Ë? (
TRANSACION_STATUS_OK
Ë: (
TRANSACION_STATUS_ERROR
);

149 
	}
}

152 
TRANSACION_STATUS
 
	$BMEWrôeD©a
(
uöt8_t
 
£ns‹Addªss
, uöt8_à
£ns‹Rógi°î
, uöt8_à*
d©a
, uöt8_à
numD©a
)

154 
ªt_code_t
 
ªx_Tx
;

155 
txD©a
[0] = 
£ns‹Rógi°î
;

156 
	`mem˝y
(&
txD©a
[1], 
d©a
, 
numD©a
);

157 
ªx_Tx
 = 
	`ƒf_drv_twi_tx
 (&
twiSís‹
,

158 
£ns‹Addªss
,

159 
txD©a
,

160 
numD©a
 + 1,

161 
Ál£


163  (
ªx_Tx
 =
NRF_SUCCESS
Ë? (
TRANSACION_STATUS_OK
Ë: (
TRANSACION_STATUS_ERROR
);

164 
	}
}

167 
ölöe
 
uöt32_t
 
	$gëSysTime
()

169  
˙tMs
;

170 
	}
}

172 
uöt32_t
 
	$£ns‹GëTime
()

174  
	`gëSysTime
();

175 
	}
}

	@D:\Private\Programing\MCU\Nordic\ble_app_template\bme280Interface.h

4 #i‚de‡
BME280INTERFACE_H_


5 
	#BME280INTERFACE_H_


	)

7 
	~"°döt.h
"

9 
	#SENSOR_ADDRESS


	)

11 
uöt32_t
 
gëSysTime
();

12 
timîInô
();

13 
ªt_code_t
 
bme280I¡îÁ˚Inô
();

	@D:\Private\Programing\MCU\Nordic\ble_app_template\i2cHAL.h

	@D:\Private\Programing\MCU\Nordic\ble_app_template\main.c

55 
	~<°dboﬁ.h
>

56 
	~<°döt.h
>

57 
	~<°rög.h
>

58 
	~<°dio.h
>

60 
	~"n‹dic_comm⁄.h
"

61 
	~"ƒf.h
"

62 
	~"≠p_îr‹.h
"

63 
	~"bÀ.h
"

64 
	~"bÀ_hci.h
"

65 
	~"bÀ_§v_comm⁄.h
"

66 
	~"bÀ_advd©a.h
"

67 
	~"bÀ_advîtisög.h
"

68 
	~"bÀ_c⁄n_∑øms.h
"

69 
	~"bﬂrds.h
"

70 
	~"so·devi˚_h™dÀr.h
"

71 
	~"≠p_timî.h
"

72 
	~"f°‹age.h
"

73 
	~"fds.h
"

74 
	~"≥î_m™agî.h
"

75 
	~"sdk_comm⁄.h
"

77 
	~"b•.h
"

78 
	~"b•_bä_bÀ.h
"

79 
	~"£ns‹sim.h
"

80 
	~"ƒf_gpio.h
"

81 
	~"bÀ_hci.h
"

82 
	~"bÀ_advd©a.h
"

83 
	~"bÀ_advîtisög.h
"

84 
	~"bÀ_c⁄n_°©e.h
"

86 
	#NRF_LOG_MODULE_NAME
 "APP"

	)

87 
	~"ƒf_log.h
"

88 
	~"ƒf_log_˘æ.h
"

89 
	~"ƒf_drv_twi.h
"

91 
	#IS_SRVC_CHANGED_CHARACT_PRESENT
 1

	)

93 #i‡(
NRF_SD_BLE_API_VERSION
 == 3)

94 
	#NRF_BLE_MAX_MTU_SIZE
 
GATT_MTU_SIZE_DEFAULT


	)

97 
	#APP_FEATURE_NOT_SUPPORTED
 
BLE_GATT_STATUS_ATTERR_APP_BEGIN
 + 2

	)

99 
	#CENTRAL_LINK_COUNT
 0

	)

100 
	#PERIPHERAL_LINK_COUNT
 1

	)

102 
	#DEVICE_NAME
 "Gîasimchuk_Tem∂©e"

	)

103 
	#MANUFACTURER_NAME
 "N‹dicSemic⁄du˘‹"

	)

104 
	#APP_ADV_INTERVAL
 180

	)

105 
	#APP_ADV_TIMEOUT_IN_SECONDS
 200

	)

107 
	#APP_TIMER_PRESCALER
 0

	)

108 
	#APP_TIMER_OP_QUEUE_SIZE
 4

	)

110 
	#MIN_CONN_INTERVAL
 
	`MSEC_TO_UNITS
(100, 
UNIT_1_25_MS
Ë

	)

111 
	#MAX_CONN_INTERVAL
 
	`MSEC_TO_UNITS
(200, 
UNIT_1_25_MS
Ë

	)

112 
	#SLAVE_LATENCY
 0

	)

113 
	#CONN_SUP_TIMEOUT
 
	`MSEC_TO_UNITS
(4000, 
UNIT_10_MS
Ë

	)

115 
	#FIRST_CONN_PARAMS_UPDATE_DELAY
 
	`APP_TIMER_TICKS
(5000, 
APP_TIMER_PRESCALER
Ë

	)

116 
	#NEXT_CONN_PARAMS_UPDATE_DELAY
 
	`APP_TIMER_TICKS
(30000, 
APP_TIMER_PRESCALER
Ë

	)

117 
	#MAX_CONN_PARAMS_UPDATE_COUNT
 3

	)

119 
	#SEC_PARAM_BOND
 1

	)

120 
	#SEC_PARAM_MITM
 0

	)

121 
	#SEC_PARAM_LESC
 0

	)

122 
	#SEC_PARAM_KEYPRESS
 0

	)

123 
	#SEC_PARAM_IO_CAPABILITIES
 
BLE_GAP_IO_CAPS_NONE


	)

124 
	#SEC_PARAM_OOB
 0

	)

125 
	#SEC_PARAM_MIN_KEY_SIZE
 7

	)

126 
	#SEC_PARAM_MAX_KEY_SIZE
 16

	)

128 
	#DEAD_BEEF
 0xDEADBEEF

	)

130 
uöt16_t
 
	gm_c⁄n_h™dÀ
 = 
BLE_CONN_HANDLE_INVALID
;

138 
bÀ_uuid_t
 
	gm_adv_uuids
[] = {{
BLE_UUID_HUMAN_INTERFACE_DEVICE_SERVICE
, 
BLE_UUID_TYPE_BLE
}};

141 
	#GET_PAGE_ADDRESS
(
X
Ë(
uöt32_t
)(X*1024)

	)

142 
	#LED_CONTROL_PIN
 (
uöt32_t
)4

	)

143 
	#CONTROL_PIN
 (
uöt32_t
)3

	)

144 
	#MES_PERIOD_MS
 200

	)

146 
	#UPDATE_NAME_S
 6

	)

147 
	#CONFIG_PAGE
 255

	)

148 
	#UPDATE_NAME_INTERVAL_MS
 100

	)

151 #¥agm®
∑ck
(
push
,1)

154 
uöt8_t
 
	mdevi˚Name
[50];

155 
uöt8_t
 
	mßveD©a
[10];

156 }
	tc⁄figuøti⁄S_t
;

157 #¥agm®
∑ck
(
p›
)

159 c⁄° 
uöt8_t
 
	gdefName
[] = "DEVEX T =";

160 
c⁄figuøti⁄S_t
 c⁄° *
	gc⁄figFœsh
 = (c⁄figuøti⁄S_t*)
GET_PAGE_ADDRESS
(
CONFIG_PAGE
);

163 
advîtisög_°¨t
();

176 
	$as£π_ƒf_ˇŒback
(
uöt16_t
 
löe_num
, c⁄° 
uöt8_t
 * 
p_fûe_«me
)

178 
	`≠p_îr‹_h™dÀr
(
DEAD_BEEF
, 
löe_num
, 
p_fûe_«me
);

179 
	}
}

186 
	$pm_evt_h™dÀr
(
pm_evt_t
 c⁄° * 
p_evt
)

188 
ªt_code_t
 
îr_code
;

190 
p_evt
->
evt_id
)

192 
PM_EVT_BONDED_PEER_CONNECTED
:

194 
	`NRF_LOG_INFO
("ConnectedÅoáÖreviously bonded device.\r\n");

197 
PM_EVT_CONN_SEC_SUCCEEDED
:

199 
	`NRF_LOG_INFO
("Connection secured. Role: %d. conn_handle: %d, Procedure: %d\r\n",

200 
	`bÀ_c⁄n_°©e_rﬁe
(
p_evt
->
c⁄n_h™dÀ
),

201 
p_evt
->
c⁄n_h™dÀ
,

202 
p_evt
->
∑øms
.
c⁄n_£c_suc˚eded
.
¥o˚duª
);

205 
PM_EVT_CONN_SEC_FAILED
:

215 
PM_EVT_CONN_SEC_CONFIG_REQ
:

218 
pm_c⁄n_£c_c⁄fig_t
 
c⁄n_£c_c⁄fig
 = {.
Ælow_ª∑úög
 = 
Ál£
};

219 
	`pm_c⁄n_£c_c⁄fig_ª∂y
(
p_evt
->
c⁄n_h™dÀ
, &
c⁄n_£c_c⁄fig
);

222 
PM_EVT_STORAGE_FULL
:

225 
îr_code
 = 
	`fds_gc
();

226 i‡(
îr_code
 =
FDS_ERR_BUSY
 ||Éº_codê=
FDS_ERR_NO_SPACE_IN_QUEUES
)

232 
	`APP_ERROR_CHECK
(
îr_code
);

236 
PM_EVT_PEERS_DELETE_SUCCEEDED
:

238 
	`advîtisög_°¨t
();

241 
PM_EVT_LOCAL_DB_CACHE_APPLY_FAILED
:

244 
	`pm_loˇl_d©aba£_has_ch™ged
();

247 
PM_EVT_PEER_DATA_UPDATE_FAILED
:

250 
	`APP_ERROR_CHECK
(
p_evt
->
∑øms
.
≥î_d©a_upd©e_Áûed
.
îr‹
);

253 
PM_EVT_PEER_DELETE_FAILED
:

256 
	`APP_ERROR_CHECK
(
p_evt
->
∑øms
.
≥î_dñëe_Áûed
.
îr‹
);

259 
PM_EVT_PEERS_DELETE_FAILED
:

262 
	`APP_ERROR_CHECK
(
p_evt
->
∑øms
.
≥îs_dñëe_Áûed_evt
.
îr‹
);

265 
PM_EVT_ERROR_UNEXPECTED
:

268 
	`APP_ERROR_CHECK
(
p_evt
->
∑øms
.
îr‹_u√x≥˘ed
.
îr‹
);

271 
PM_EVT_CONN_SEC_START
:

272 
PM_EVT_PEER_DATA_UPDATE_SUCCEEDED
:

273 
PM_EVT_PEER_DELETE_SUCCEEDED
:

274 
PM_EVT_LOCAL_DB_CACHE_APPLIED
:

275 
PM_EVT_SERVICE_CHANGED_IND_SENT
:

276 
PM_EVT_SERVICE_CHANGED_IND_CONFIRMED
:

280 
	}
}

287 
	$timîs_öô
()

291 
	`APP_TIMER_INIT
(
APP_TIMER_PRESCALER
, 
APP_TIMER_OP_QUEUE_SIZE
, 
Ál£
);

302 
	}
}

310 
	$g≠_∑øms_öô
()

312 
uöt32_t
 
îr_code
;

313 
bÀ_g≠_c⁄n_∑øms_t
 
g≠_c⁄n_∑øms
;

314 
bÀ_g≠_c⁄n_£c_mode_t
 
£c_mode
;

316 
	`BLE_GAP_CONN_SEC_MODE_SET_OPEN
(&
£c_mode
);

318 if–
	`memcmp
(
c⁄figFœsh
->
devi˚Name
, 
defName
, (defName) - 1 ) != 0 )

320 
îr_code
 = 
	`sd_bÀ_g≠_devi˚_«me_£t
(&
£c_mode
,

321 (c⁄° 
uöt8_t
 *)
defName
,

322 
	`°æí
((*)
defName
));

326 
îr_code
 = 
	`sd_bÀ_g≠_devi˚_«me_£t
(&
£c_mode
,

327 (c⁄° 
uöt8_t
 *)
c⁄figFœsh
->
devi˚Name
,

328 
	`°æí
((*)
c⁄figFœsh
->
devi˚Name
));

331 
	`APP_ERROR_CHECK
(
îr_code
);

336 
îr_code
 = 
	`sd_bÀ_g≠_≠≥¨™˚_£t
(
BLE_APPEARANCE_GENERIC_THERMOMETER
);

338 
	`mem£t
(&
g≠_c⁄n_∑øms
, 0, (gap_conn_params));

340 
g≠_c⁄n_∑øms
.
mö_c⁄n_öãrvÆ
 = 
MIN_CONN_INTERVAL
;

341 
g≠_c⁄n_∑øms
.
max_c⁄n_öãrvÆ
 = 
MAX_CONN_INTERVAL
;

342 
g≠_c⁄n_∑øms
.
¶ave_œãncy
 = 
SLAVE_LATENCY
;

343 
g≠_c⁄n_∑øms
.
c⁄n_sup_timeout
 = 
CONN_SUP_TIMEOUT
;

345 
îr_code
 = 
	`sd_bÀ_g≠_µ˝_£t
(&
g≠_c⁄n_∑øms
);

346 
	`APP_ERROR_CHECK
(
îr_code
);

347 
	}
}

379 
	$£rvi˚s_öô
()

382 
uöt32_t
 
îr_code
;

383 
bÀ_xxs_öô_t
 
xxs_öô
;

384 
bÀ_yys_öô_t
 
yys_öô
;

386 
îr_code
 = 
	`sd_bÀ_g©ts_£rvi˚_add
(
BLE_GATTS_SRVC_TYPE_PRIMARY
,

387 &
bÀ_uuid
,

388 &
p_nus
->
£rvi˚_h™dÀ
);

392 
	`mem£t
(&
xxs_öô
, 0, (xxs_init));

396 
xxs_öô
.
evt_h™dÀr
 = 
NULL
;

397 
xxs_öô
.
is_xxx_nŸify_suµ‹ãd
 = 
åue
;

398 
xxs_öô
.
bÀ_xx_öôül_vÆue
.
Àvñ
 = 100;

400 
îr_code
 = 
	`bÀ_bas_öô
(&
m_xxs
, &
xxs_öô
);

401 
	`APP_ERROR_CHECK
(
îr_code
);

404 
	`mem£t
(&
yys_öô
, 0, (yys_init));

405 
yys_öô
.
evt_h™dÀr
 = 
⁄_yys_evt
;

406 
yys_öô
.
bÀ_yy_öôül_vÆue
.
cou¡î
 = 0;

408 
îr_code
 = 
	`bÀ_yy_£rvi˚_öô
(&
yys_öô
, &
yy_öô
);

410 
	`sd_bÀ_uuid_vs_add
()Ê

412 
	`APP_ERROR_CHECK
(
îr_code
);

414 
	}
}

427 
	$⁄_c⁄n_∑øms_evt
(
bÀ_c⁄n_∑øms_evt_t
 * 
p_evt
)

429 
uöt32_t
 
îr_code
;

431 i‡(
p_evt
->
evt_ty≥
 =
BLE_CONN_PARAMS_EVT_FAILED
)

433 
îr_code
 = 
	`sd_bÀ_g≠_disc⁄√˘
(
m_c⁄n_h™dÀ
, 
BLE_HCI_CONN_INTERVAL_UNACCEPTABLE
);

434 
	`APP_ERROR_CHECK
(
îr_code
);

436 
	}
}

443 
	$c⁄n_∑øms_îr‹_h™dÀr
(
uöt32_t
 
ƒf_îr‹
)

445 
	`APP_ERROR_HANDLER
(
ƒf_îr‹
);

446 
	}
}

451 
	$c⁄n_∑øms_öô
()

453 
uöt32_t
 
îr_code
;

454 
bÀ_c⁄n_∑øms_öô_t
 
˝_öô
;

456 
	`mem£t
(&
˝_öô
, 0, (cp_init));

458 
˝_öô
.
p_c⁄n_∑øms
 = 
NULL
;

459 
˝_öô
.
fú°_c⁄n_∑øms_upd©e_dñay
 = 
FIRST_CONN_PARAMS_UPDATE_DELAY
;

460 
˝_öô
.
√xt_c⁄n_∑øms_upd©e_dñay
 = 
NEXT_CONN_PARAMS_UPDATE_DELAY
;

461 
˝_öô
.
max_c⁄n_∑øms_upd©e_cou¡
 = 
MAX_CONN_PARAMS_UPDATE_COUNT
;

462 
˝_öô
.
°¨t_⁄_nŸify_cccd_h™dÀ
 = 
BLE_GATT_HANDLE_INVALID
;

463 
˝_öô
.
disc⁄√˘_⁄_Áû
 = 
Ál£
;

464 
˝_öô
.
evt_h™dÀr
 = 
⁄_c⁄n_∑øms_evt
;

465 
˝_öô
.
îr‹_h™dÀr
 = 
c⁄n_∑øms_îr‹_h™dÀr
;

467 
îr_code
 = 
	`bÀ_c⁄n_∑øms_öô
(&
˝_öô
);

468 
	`APP_ERROR_CHECK
(
îr_code
);

469 
	}
}

474 
	$≠∂iˇti⁄_timîs_°¨t
()

481 
	}
}

488 
	$¶ìp_mode_íãr
()

490 
uöt32_t
 
îr_code
 = 
	`b•_ödiˇti⁄_£t
(
BSP_INDICATE_IDLE
);

492 
	`APP_ERROR_CHECK
(
îr_code
);

495 
îr_code
 = 
	`b•_bä_bÀ_¶ìp_mode_¥ï¨e
();

496 
	`APP_ERROR_CHECK
(
îr_code
);

499 
îr_code
 = 
	`sd_powî_sy°em_off
();

500 
	`APP_ERROR_CHECK
(
îr_code
);

501 
	}
}

510 
	$⁄_adv_evt
(
bÀ_adv_evt_t
 
bÀ_adv_evt
)

512 
uöt32_t
 
îr_code
;

514 
bÀ_adv_evt
)

516 
BLE_ADV_EVT_FAST
:

517 
	`NRF_LOG_INFO
("Fastádvertising\r\n");

518 
îr_code
 = 
	`b•_ödiˇti⁄_£t
(
BSP_INDICATE_ADVERTISING
);

519 
	`APP_ERROR_CHECK
(
îr_code
);

522 
BLE_ADV_EVT_IDLE
:

523 
	`¶ìp_mode_íãr
();

529 
	}
}

536 
	$⁄_bÀ_evt
(
bÀ_evt_t
 * 
p_bÀ_evt
)

538 
uöt32_t
 
îr_code
 = 
NRF_SUCCESS
;

540 
p_bÀ_evt
->
hódî
.
evt_id
)

542 
BLE_GAP_EVT_DISCONNECTED
:

543 
	`NRF_LOG_INFO
("Disconnected.\r\n");

544 
îr_code
 = 
	`b•_ödiˇti⁄_£t
(
BSP_INDICATE_IDLE
);

545 
	`APP_ERROR_CHECK
(
îr_code
);

548 
BLE_GAP_EVT_CONNECTED
:

549 
	`NRF_LOG_INFO
("Connected.\r\n");

550 
îr_code
 = 
	`b•_ödiˇti⁄_£t
(
BSP_INDICATE_CONNECTED
);

551 
	`APP_ERROR_CHECK
(
îr_code
);

552 
m_c⁄n_h™dÀ
 = 
p_bÀ_evt
->
evt
.
g≠_evt
.
c⁄n_h™dÀ
;

555 
BLE_GATTC_EVT_TIMEOUT
:

557 
	`NRF_LOG_DEBUG
("GATT Client Timeout.\r\n");

558 
îr_code
 = 
	`sd_bÀ_g≠_disc⁄√˘
(
p_bÀ_evt
->
evt
.
g©tc_evt
.
c⁄n_h™dÀ
,

559 
BLE_HCI_REMOTE_USER_TERMINATED_CONNECTION
);

560 
	`APP_ERROR_CHECK
(
îr_code
);

563 
BLE_GATTS_EVT_TIMEOUT
:

565 
	`NRF_LOG_DEBUG
("GATT Server Timeout.\r\n");

566 
îr_code
 = 
	`sd_bÀ_g≠_disc⁄√˘
(
p_bÀ_evt
->
evt
.
g©ts_evt
.
c⁄n_h™dÀ
,

567 
BLE_HCI_REMOTE_USER_TERMINATED_CONNECTION
);

568 
	`APP_ERROR_CHECK
(
îr_code
);

571 
BLE_EVT_USER_MEM_REQUEST
:

572 
îr_code
 = 
	`sd_bÀ_u£r_mem_ª∂y
(
p_bÀ_evt
->
evt
.
g©tc_evt
.
c⁄n_h™dÀ
, 
NULL
);

573 
	`APP_ERROR_CHECK
(
îr_code
);

576 
BLE_GATTS_EVT_RW_AUTHORIZE_REQUEST
:

578 
bÀ_g©ts_evt_rw_auth‹ize_ªque°_t
 
ªq
;

579 
bÀ_g©ts_rw_auth‹ize_ª∂y_∑øms_t
 
auth_ª∂y
;

581 
ªq
 = 
p_bÀ_evt
->
evt
.
g©ts_evt
.
∑øms
.
auth‹ize_ªque°
;

583 i‡(
ªq
.
ty≥
 !
BLE_GATTS_AUTHORIZE_TYPE_INVALID
)

585 i‡((
ªq
.
ªque°
.
wrôe
.
›
 =
BLE_GATTS_OP_PREP_WRITE_REQ
) ||

586 (
ªq
.
ªque°
.
wrôe
.
›
 =
BLE_GATTS_OP_EXEC_WRITE_REQ_NOW
) ||

587 (
ªq
.
ªque°
.
wrôe
.
›
 =
BLE_GATTS_OP_EXEC_WRITE_REQ_CANCEL
))

589 i‡(
ªq
.
ty≥
 =
BLE_GATTS_AUTHORIZE_TYPE_WRITE
)

591 
auth_ª∂y
.
ty≥
 = 
BLE_GATTS_AUTHORIZE_TYPE_WRITE
;

595 
auth_ª∂y
.
ty≥
 = 
BLE_GATTS_AUTHORIZE_TYPE_READ
;

597 
auth_ª∂y
.
∑øms
.
wrôe
.
g©t_°©us
 = 
APP_FEATURE_NOT_SUPPORTED
;

598 
îr_code
 = 
	`sd_bÀ_g©ts_rw_auth‹ize_ª∂y
(
p_bÀ_evt
->
evt
.
g©ts_evt
.
c⁄n_h™dÀ
,

599 &
auth_ª∂y
);

600 
	`APP_ERROR_CHECK
(
îr_code
);

605 #i‡(
NRF_SD_BLE_API_VERSION
 == 3)

606 
BLE_GATTS_EVT_EXCHANGE_MTU_REQUEST
:

607 
îr_code
 = 
	`sd_bÀ_g©ts_exch™ge_mtu_ª∂y
(
p_bÀ_evt
->
evt
.
g©ts_evt
.
c⁄n_h™dÀ
,

608 
NRF_BLE_MAX_MTU_SIZE
);

609 
	`APP_ERROR_CHECK
(
îr_code
);

617 
	}
}

627 
	$bÀ_evt_di•©ch
(
bÀ_evt_t
 * 
p_bÀ_evt
)

631 
	`bÀ_c⁄n_°©e_⁄_bÀ_evt
(
p_bÀ_evt
);

632 
	`pm_⁄_bÀ_evt
(
p_bÀ_evt
);

633 
	`bÀ_c⁄n_∑øms_⁄_bÀ_evt
(
p_bÀ_evt
);

634 
	`b•_bä_bÀ_⁄_bÀ_evt
(
p_bÀ_evt
);

635 
	`⁄_bÀ_evt
(
p_bÀ_evt
);

636 
	`bÀ_advîtisög_⁄_bÀ_evt
(
p_bÀ_evt
);

641 
	}
}

651 
	$sys_evt_di•©ch
(
uöt32_t
 
sys_evt
)

655 
	`fs_sys_evít_h™dÀr
(
sys_evt
);

660 
	`bÀ_advîtisög_⁄_sys_evt
(
sys_evt
);

661 
	}
}

668 
	$bÀ_°ack_öô
()

670 
uöt32_t
 
îr_code
;

672 
ƒf_˛ock_lf_cfg_t
 
˛ock_lf_cfg
 = {.
sour˚
 = 
NRF_CLOCK_LF_SRC_SYNTH
,

673 .
rc_˘iv
 = 0,

674 .
rc_ãmp_˘iv
 = 0,

675 .
xèl_accuøcy
 = 
NRF_CLOCK_LF_XTAL_ACCURACY_20_PPM
};

678 
	`SOFTDEVICE_HANDLER_INIT
(&
˛ock_lf_cfg
, 
NULL
);

680 
bÀ_íabÀ_∑øms_t
 
bÀ_íabÀ_∑øms
;

681 
îr_code
 = 
	`so·devi˚_íabÀ_gë_deÁu…_c⁄fig
(
CENTRAL_LINK_COUNT
,

682 
PERIPHERAL_LINK_COUNT
,

683 &
bÀ_íabÀ_∑øms
);

684 
	`APP_ERROR_CHECK
(
îr_code
);

687 
	`CHECK_RAM_START_ADDR
(
CENTRAL_LINK_COUNT
, 
PERIPHERAL_LINK_COUNT
);

690 #i‡(
NRF_SD_BLE_API_VERSION
 == 3)

691 
bÀ_íabÀ_∑øms
.
g©t_íabÀ_∑øms
.
©t_mtu
 = 
NRF_BLE_MAX_MTU_SIZE
;

693 
îr_code
 = 
	`so·devi˚_íabÀ
(&
bÀ_íabÀ_∑øms
);

694 
	`APP_ERROR_CHECK
(
îr_code
);

697 
îr_code
 = 
	`so·devi˚_bÀ_evt_h™dÀr_£t
(
bÀ_evt_di•©ch
);

698 
	`APP_ERROR_CHECK
(
îr_code
);

701 
îr_code
 = 
	`so·devi˚_sys_evt_h™dÀr_£t
(
sys_evt_di•©ch
);

702 
	`APP_ERROR_CHECK
(
îr_code
);

703 
	}
}

711 
	$≥î_m™agî_öô
(
boﬁ
 
îa£_b⁄ds
)

713 
bÀ_g≠_£c_∑øms_t
 
£c_∑øm
;

714 
ªt_code_t
 
îr_code
;

716 
îr_code
 = 
	`pm_öô
();

717 
	`APP_ERROR_CHECK
(
îr_code
);

719 i‡(
îa£_b⁄ds
)

721 
îr_code
 = 
	`pm_≥îs_dñëe
();

722 
	`APP_ERROR_CHECK
(
îr_code
);

725 
	`mem£t
(&
£c_∑øm
, 0, (
bÀ_g≠_£c_∑øms_t
));

728 
£c_∑øm
.
b⁄d
 = 
SEC_PARAM_BOND
;

729 
£c_∑øm
.
môm
 = 
SEC_PARAM_MITM
;

730 
£c_∑øm
.
Àsc
 = 
SEC_PARAM_LESC
;

731 
£c_∑øm
.
key¥ess
 = 
SEC_PARAM_KEYPRESS
;

732 
£c_∑øm
.
io_ˇps
 = 
SEC_PARAM_IO_CAPABILITIES
;

733 
£c_∑øm
.
oob
 = 
SEC_PARAM_OOB
;

734 
£c_∑øm
.
mö_key_size
 = 
SEC_PARAM_MIN_KEY_SIZE
;

735 
£c_∑øm
.
max_key_size
 = 
SEC_PARAM_MAX_KEY_SIZE
;

736 
£c_∑øm
.
kdi°_own
.
íc
 = 1;

737 
£c_∑øm
.
kdi°_own
.
id
 = 1;

738 
£c_∑øm
.
kdi°_≥î
.
íc
 = 1;

739 
£c_∑øm
.
kdi°_≥î
.
id
 = 1;

741 
îr_code
 = 
	`pm_£c_∑øms_£t
(&
£c_∑øm
);

742 
	`APP_ERROR_CHECK
(
îr_code
);

744 
îr_code
 = 
	`pm_ªgi°î
(
pm_evt_h™dÀr
);

745 
	`APP_ERROR_CHECK
(
îr_code
);

746 
	}
}

753 
	$b•_evít_h™dÀr
(
b•_evít_t
 
evít
)

755 
uöt32_t
 
îr_code
;

757 
evít
)

759 
BSP_EVENT_SLEEP
:

760 
	`¶ìp_mode_íãr
();

763 
BSP_EVENT_DISCONNECT
:

764 
îr_code
 = 
	`sd_bÀ_g≠_disc⁄√˘
(
m_c⁄n_h™dÀ
,

765 
BLE_HCI_REMOTE_USER_TERMINATED_CONNECTION
);

766 i‡(
îr_code
 !
NRF_ERROR_INVALID_STATE
)

768 
	`APP_ERROR_CHECK
(
îr_code
);

772 
BSP_EVENT_WHITELIST_OFF
:

773 i‡(
m_c⁄n_h™dÀ
 =
BLE_CONN_HANDLE_INVALID
)

775 
îr_code
 = 
	`bÀ_advîtisög_ª°¨t_wôhout_whôñi°
();

776 i‡(
îr_code
 !
NRF_ERROR_INVALID_STATE
)

778 
	`APP_ERROR_CHECK
(
îr_code
);

786 
	}
}

791 
	$advîtisög_öô
()

793 
uöt32_t
 
îr_code
;

794 
bÀ_advd©a_t
 
advd©a
;

795 
bÀ_adv_modes_c⁄fig_t
 
›ti⁄s
;

798 
	`mem£t
(&
advd©a
, 0, (advdata));

800 
advd©a
.
«me_ty≥
 = 
BLE_ADVDATA_FULL_NAME
;

801 
advd©a
.
ö˛ude_≠≥¨™˚
 = 
åue
;

802 
advd©a
.
Êags
 = 
BLE_GAP_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE
;

803 
advd©a
.
uuids_com∂ëe
.
uuid_˙t
 = (
m_adv_uuids
) / (m_adv_uuids[0]);

804 
advd©a
.
uuids_com∂ëe
.
p_uuids
 = 
m_adv_uuids
;

806 
	`mem£t
(&
›ti⁄s
, 0, (options));

807 
›ti⁄s
.
bÀ_adv_Á°_íabÀd
 = 
åue
;

808 
›ti⁄s
.
bÀ_adv_Á°_öãrvÆ
 = 
APP_ADV_INTERVAL
;

809 
›ti⁄s
.
bÀ_adv_Á°_timeout
 = 
APP_ADV_TIMEOUT_IN_SECONDS
;

811 
îr_code
 = 
	`bÀ_advîtisög_öô
(&
advd©a
, 
NULL
, &
›ti⁄s
, 
⁄_adv_evt
, NULL);

812 
	`APP_ERROR_CHECK
(
îr_code
);

813 
	}
}

820 
	$buâ⁄s_Àds_öô
(
boﬁ
 * 
p_îa£_b⁄ds
)

822 
b•_evít_t
 
°¨tup_evít
;

824 
uöt32_t
 
îr_code
 = 
	`b•_öô
(
BSP_INIT_LED
 | 
BSP_INIT_BUTTONS
,

825 
	`APP_TIMER_TICKS
(100, 
APP_TIMER_PRESCALER
),

826 
b•_evít_h™dÀr
);

828 
	`APP_ERROR_CHECK
(
îr_code
);

830 
îr_code
 = 
	`b•_bä_bÀ_öô
(
NULL
, &
°¨tup_evít
);

831 
	`APP_ERROR_CHECK
(
îr_code
);

833 *
p_îa£_b⁄ds
 = (
°¨tup_evít
 =
BSP_EVENT_CLEAR_BONDING_DATA
);

834 
	}
}

850 
	$advîtisög_°¨t
()

852 
uöt32_t
 
îr_code
 = 
	`bÀ_advîtisög_°¨t
(
BLE_ADV_MODE_FAST
);

854 
	`APP_ERROR_CHECK
(
îr_code
);

855 
	}
}

857 
	~"bme280I¡îÁ˚.h
"

858 
	~"BME280_u£r_öãrÁ˚.h
"

860 
BME280H™dÀr
 
	g£ns‹H™dÀr
;

862 
BME280_STATUS
 
	$öôI2C_Sís‹
(){

863 
BME280_STATUS
 
bmeSètus
;

864 
boﬁ
 
£ns‹IsOnLöe
 = 
Ál£
;

866 
	`bme280I¡îÁ˚Inô
();

868 
	`BME280_£tI2CAddªss
(&
£ns‹H™dÀr
, 
BME280_ADDRESS_LOW
);

870 if(
BME280_STATUS_OK
 !(
bmeSètus
 = 
	`BME280_isOnLöe
(&
£ns‹H™dÀr
, &
£ns‹IsOnLöe
) ) ){

871  
bmeSètus
;

873 if–!
£ns‹IsOnLöe
 ){

874  
BME280_STATUS_SENSOR_ERROR
;

877 if(
BME280_STATUS_OK
 !(
bmeSètus
 = 
	`BME280_öô
(&
£ns‹H™dÀr
) ) )

879  
bmeSètus
;

882 if(
BME280_STATUS_OK
 !(
bmeSètus
 = 
	`BME280_£tVÆueMesSèã
(&
£ns‹H™dÀr
, 
MES_VALUE_TEMPERATURE
, 
MES_STATE_ENABLE
) ) )

884  
bmeSètus
;

886 if(
BME280_STATUS_OK
 !(
bmeSètus
 = 
	`BME280_£tOvîSam∂e
(&
£ns‹H™dÀr
, 
MES_VALUE_HUMIDITY
, 
OVERSEMPLE_16
) ) )

888  
bmeSètus
;

890 if(
BME280_STATUS_OK
 !(
bmeSètus
 = 
	`BME280_£tVÆueMesSèã
(&
£ns‹H™dÀr
, 
MES_VALUE_PRESSURE
, 
MES_STATE_ENABLE
) ) )

892  
bmeSètus
;

894 if(
BME280_STATUS_OK
 !(
bmeSètus
 = 
	`BME280_£tOvîSam∂e
(&
£ns‹H™dÀr
, 
MES_VALUE_HUMIDITY
, 
OVERSEMPLE_16
) ) )

896  
bmeSètus
;

898 if(
BME280_STATUS_OK
 !(
bmeSètus
 = 
	`BME280_£tVÆueMesSèã
(&
£ns‹H™dÀr
, 
MES_VALUE_HUMIDITY
, 
MES_STATE_ENABLE
) ) )

900  
bmeSètus
;

902 if(
BME280_STATUS_OK
 !(
bmeSètus
 = 
	`BME280_£tOvîSam∂e
(&
£ns‹H™dÀr
, 
MES_VALUE_HUMIDITY
, 
OVERSEMPLE_16
) ) )

904  
bmeSètus
;

907 if(
BME280_STATUS_OK
 !(
bmeSètus
 = 
	`BME280_£tMesDñay
(&
£ns‹H™dÀr
, 
MEASUREMENT_DELAY_65_5ms
) ) )

909  
bmeSètus
;

911  
BME280_STATUS_OK
;

912 
	}
}

915 
	~"ƒf_nvmc.h
"

916 
	$upd©eDevi˚Name
()

918 
BME280_STATUS
 
bmeSètus
;

919 
öt16_t
 
ªzTI¡P¨t
;

920 
öt16_t
 
ªzTFlﬂtP¨t
;

921 
ªzMesHumidôy
;

922 
ªzMesTem≥øtuª
;

923 
ªzMesPªssuª
;

924 
uöt8_t
 
devName
[] = "DEVEX T = -25.5 C";

926 if(
BME280_STATUS_OK
 !(
bmeSètus
 = 
	`BME280_f‹˚dMes
(&
£ns‹H™dÀr
, &
ªzMesTem≥øtuª
,

927 &
ªzMesPªssuª
,

928 &
ªzMesHumidôy
)))

932 
ªzTI¡P¨t
 = 
ªzMesTem≥øtuª
;

933 
ªzTFlﬂtP¨t
 = (((
ªzMesTem≥øtuª
 >0Ë? (ªzMesTem≥øtuªË: ((-1 *ÑezMesTem≥øtuª))Ë- ((
ªzTI¡P¨t
 >= 0) ? (rezTIntPart) : ((-1 *ÑezTIntPart)))) * 10;

934 
	`•rötf
((*)(&
devName
), "DEVEX T = %2d.%1d C", (
ªzTI¡P¨t
 < 100 &&ÑezTI¡P¨à> -100 ) ? (ªzTI¡P¨tË: (-99), 
ªzTFlﬂtP¨t
);

937 
	`ƒf_nvmc_∑ge_îa£
(
	`GET_PAGE_ADDRESS
(
CONFIG_PAGE
));

938 
	`ƒf_nvmc_wrôe_byãs
(
	`GET_PAGE_ADDRESS
(
CONFIG_PAGE
), 
devName
, (devName));

940 
	`NVIC_Sy°emRe£t
();

941 
	}
}

946 
	$maö
()

948 
uöt32_t
 
îr_code
;

949 
boﬁ
 
îa£_b⁄ds
;

950 
uöt32_t
 
upd©eNameC¡
 = 
UPDATE_NAME_INTERVAL_MS
;

952 
	`timîInô
();

953 
	`öôI2C_Sís‹
();

957 
îr_code
 = 
	`NRF_LOG_INIT
(
NULL
);

958 
	`APP_ERROR_CHECK
(
îr_code
);

960 
	`timîs_öô
();

962 
	`buâ⁄s_Àds_öô
(&
îa£_b⁄ds
);

963 
	`bÀ_°ack_öô
();

964 
	`≥î_m™agî_öô
(
îa£_b⁄ds
);

965 i‡(
îa£_b⁄ds
 =
åue
)

967 
	`NRF_LOG_INFO
("BondsÉrased!\r\n");

969 
	`g≠_∑øms_öô
();

970 
	`advîtisög_öô
();

971 
	`£rvi˚s_öô
();

972 
	`c⁄n_∑øms_öô
();

975 
	`NRF_LOG_INFO
("Template started\r\n");

976 
	`≠∂iˇti⁄_timîs_°¨t
();

977 
îr_code
 = 
	`bÀ_advîtisög_°¨t
(
BLE_ADV_MODE_FAST
);

978 
	`APP_ERROR_CHECK
(
îr_code
);

984 if(
	`gëSysTime
(Ë>
upd©eNameC¡
)

991 i‡(
	`NRF_LOG_PROCESS
(Ë=
Ál£
)

997 
	}
}

	@D:\Private\Programing\MCU\Nordic\ble_app_template\nRF5_SDK_12.3.0_d7731ad\components\ble\ble_advertising\ble_advertising.c

40 
	~"sdk_comm⁄.h
"

41 #i‡
NRF_MODULE_ENABLED
(
BLE_ADVERTISING
)

42 
	~"bÀ_advd©a.h
"

43 
	~"bÀ_advîtisög.h
"

44 
	~"ƒf_soc.h
"

45 
	~"ƒf_log.h
"

46 
	~"f°‹age.h
"

47 
	~"sdk_îr‹s.h
"

51 
	#BLE_ADV_MODES
 (5)

	)

54 
boﬁ
 
	gm_öôülized
;

55 
boﬁ
 
	gm_advîtisög_°¨t_≥ndög
;

57 
bÀ_adv_evt_t
 
	gm_adv_evt
;

59 
bÀ_adv_mode_t
 
	gm_adv_mode_cuºít
;

60 
bÀ_adv_modes_c⁄fig_t
 
	gm_adv_modes_c⁄fig
;

62 
bÀ_g≠_addr_t
 
	gm_≥î_addªss
;

63 
boﬁ
 
	gm_≥î_addr_ª∂y_ex≥˘ed
;

65 
bÀ_advd©a_t
 
	gm_advd©a
;

66 
bÀ_advd©a_m™uf_d©a_t
 
	gm_m™uf_•ecific_d©a
;

67 
uöt8_t
 
	gm_m™uf_d©a_¨øy
[
BLE_GAP_ADV_MAX_SIZE
];

68 
bÀ_advd©a_£rvi˚_d©a_t
 
	gm_£rvi˚_d©a
;

69 
uöt8_t
 
	gm_£rvi˚_d©a_¨øy
[
BLE_GAP_ADV_MAX_SIZE
];

70 
bÀ_advd©a_c⁄n_öt_t
 
	gm_¶ave_c⁄n_öt
;

71 
uöt16_t
 
	gm_cuºít_¶ave_lök_c⁄n_h™dÀ
;

73 
bÀ_advîtisög_evt_h™dÀr_t
 
	gm_evt_h™dÀr
;

74 
bÀ_advîtisög_îr‹_h™dÀr_t
 
	gm_îr‹_h™dÀr
;

76 
boﬁ
 
	gm_whôñi°_ãmp‹¨ûy_dißbÀd
;

77 
boﬁ
 
	gm_whôñi°_ª∂y_ex≥˘ed
;

79 #i‡(
NRF_SD_BLE_API_VERSION
 == 2)

85 
bÀ_g≠_addr_t
 * 
	gm_p_whôñi°_addrs
[
BLE_GAP_WHITELIST_ADDR_MAX_COUNT
];

86 
bÀ_g≠_úk_t
 * 
	gm_p_whôñi°_úks
[
BLE_GAP_WHITELIST_IRK_MAX_COUNT
];

87 
bÀ_g≠_addr_t
 
	gm_whôñi°_addrs
[
BLE_GAP_WHITELIST_ADDR_MAX_COUNT
];

88 
bÀ_g≠_úk_t
 
	gm_whôñi°_úks
[
BLE_GAP_WHITELIST_IRK_MAX_COUNT
];

90 
bÀ_g≠_whôñi°_t
 
	gm_whôñi°
 =

92 .
µ_addrs
 = 
m_p_whôñi°_addrs
,

93 .
	gµ_úks
 = 
m_p_whôñi°_úks


102 
boﬁ
 
	gm_whôñi°_ö_u£
;

107 #i‡(
NRF_SD_BLE_API_VERSION
 == 2)

109 
boﬁ
 
	$whôñi°_has_íåõs
()

111  ((
m_whôñi°
.
addr_cou¡
 !0Ë|| (m_whôñi°.
úk_cou¡
 != 0));

112 
	}
}

116 
boﬁ
 
	$whôñi°_has_íåõs
()

118  
m_whôñi°_ö_u£
;

119 
	}
}

127 
boﬁ
 
	$addr_is_vÆid
(
uöt8_t
 c⁄° * c⁄° 
addr
)

129 
uöt32_t
 
i
 = 0; i < 
BLE_GAP_ADDR_LEN
; i++)

131 i‡(
addr
[
i
] != 0)

133  
åue
;

136  
Ál£
;

137 
	}
}

140 
bÀ_adv_mode_t
 
	$adv_mode_√xt_gë
(
bÀ_adv_mode_t
 
adv_mode
)

142  (
bÀ_adv_mode_t
)((
adv_mode
 + 1Ë% 
BLE_ADV_MODES
);

143 
	}
}

150 
	$⁄_c⁄√˘ed
(
bÀ_evt_t
 c⁄° * 
p_bÀ_evt
)

152 i‡(
p_bÀ_evt
->
evt
.
g≠_evt
.
∑øms
.
c⁄√˘ed
.
rﬁe
 =
BLE_GAP_ROLE_PERIPH
)

154 
m_cuºít_¶ave_lök_c⁄n_h™dÀ
 = 
p_bÀ_evt
->
evt
.
g≠_evt
.
c⁄n_h™dÀ
;

156 
	}
}

163 
	$⁄_disc⁄√˘ed
(
bÀ_evt_t
 c⁄° * 
p_bÀ_evt
)

165 
uöt32_t
 
ªt
;

167 
m_whôñi°_ãmp‹¨ûy_dißbÀd
 = 
Ál£
;

169 i‡(
p_bÀ_evt
->
evt
.
g≠_evt
.
c⁄n_h™dÀ
 =
m_cuºít_¶ave_lök_c⁄n_h™dÀ
)

171 
ªt
 = 
	`bÀ_advîtisög_°¨t
(
BLE_ADV_MODE_DIRECTED
);

172 i‡((
ªt
 !
NRF_SUCCESS
Ë&& (
m_îr‹_h™dÀr
 !
NULL
))

174 
	`m_îr‹_h™dÀr
(
ªt
);

177 
	}
}

184 
	$⁄_timeout
(
bÀ_evt_t
 c⁄° * 
p_bÀ_evt
)

186 
ªt_code_t
 
ªt
;

188 i‡(
p_bÀ_evt
->
evt
.
g≠_evt
.
∑øms
.
timeout
.
§c
 !
BLE_GAP_TIMEOUT_SRC_ADVERTISING
)

195 
ªt
 = 
	`bÀ_advîtisög_°¨t
(
	`adv_mode_√xt_gë
(
m_adv_mode_cuºít
));

197 i‡((
ªt
 !
NRF_SUCCESS
Ë&& (
m_îr‹_h™dÀr
 !
NULL
))

199 
	`m_îr‹_h™dÀr
(
ªt
);

201 
	}
}

208 
boﬁ
 
	$Êash_ac˚ss_ö_¥ogªss
()

210 
uöt32_t
 
cou¡
;

212 ()
	`fs_queued_›_cou¡_gë
(&
cou¡
);

214  (
cou¡
 != 0);

215 
	}
}

224 
bÀ_adv_mode_t
 
	$adv_mode_√xt_avaû_gë
(
bÀ_adv_mode_t
 
adv_mode
)

226 
boﬁ
 
≥î_addr_is_vÆid
 = 
	`addr_is_vÆid
(
m_≥î_addªss
.
addr
);

230 
adv_mode
)

232 
BLE_ADV_MODE_DIRECTED
:

233 i‡((
m_adv_modes_c⁄fig
.
bÀ_adv_dúe˘ed_íabÀd
Ë&& 
≥î_addr_is_vÆid
)

235  
BLE_ADV_MODE_DIRECTED
;

239 
BLE_ADV_MODE_DIRECTED_SLOW
:

240 i‡((
m_adv_modes_c⁄fig
.
bÀ_adv_dúe˘ed_¶ow_íabÀd
Ë&& 
≥î_addr_is_vÆid
)

242  
BLE_ADV_MODE_DIRECTED_SLOW
;

246 
BLE_ADV_MODE_FAST
:

247 i‡(
m_adv_modes_c⁄fig
.
bÀ_adv_Á°_íabÀd
)

249  
BLE_ADV_MODE_FAST
;

253 
BLE_ADV_MODE_SLOW
:

254 i‡(
m_adv_modes_c⁄fig
.
bÀ_adv_¶ow_íabÀd
)

256  
BLE_ADV_MODE_SLOW
;

261  
BLE_ADV_MODE_IDLE
;

263 
	}
}

272 
ªt_code_t
 
	$£t_adv_mode_dúe˘ed
(
bÀ_g≠_adv_∑øms_t
 * 
p_adv_∑øms
)

274 
m_adv_evt
 = 
BLE_ADV_EVT_DIRECTED
;

276 
p_adv_∑øms
->
p_≥î_addr
 = &
m_≥î_addªss
;

277 
p_adv_∑øms
->
ty≥
 = 
BLE_GAP_ADV_TYPE_ADV_DIRECT_IND
;

278 
p_adv_∑øms
->
timeout
 = 0;

279 
p_adv_∑øms
->
öãrvÆ
 = 0;

281  
NRF_SUCCESS
;

282 
	}
}

291 
ªt_code_t
 
	$£t_adv_mode_dúe˘ed_¶ow
(
bÀ_g≠_adv_∑øms_t
 * 
p_adv_∑øms
)

293 
m_adv_evt
 = 
BLE_ADV_EVT_DIRECTED_SLOW
;

295 
p_adv_∑øms
->
p_≥î_addr
 = &
m_≥î_addªss
;

296 
p_adv_∑øms
->
ty≥
 = 
BLE_GAP_ADV_TYPE_ADV_DIRECT_IND
;

297 
p_adv_∑øms
->
timeout
 = 
m_adv_modes_c⁄fig
.
bÀ_adv_dúe˘ed_¶ow_timeout
;

298 
p_adv_∑øms
->
öãrvÆ
 = 
m_adv_modes_c⁄fig
.
bÀ_adv_dúe˘ed_¶ow_öãrvÆ
;

300  
NRF_SUCCESS
;

301 
	}
}

310 
ªt_code_t
 
	$£t_adv_mode_Á°
(
bÀ_g≠_adv_∑øms_t
 * 
p_adv_∑øms
)

312 
ªt_code_t
 
ªt
;

314 
p_adv_∑øms
->
öãrvÆ
 = 
m_adv_modes_c⁄fig
.
bÀ_adv_Á°_öãrvÆ
;

315 
p_adv_∑øms
->
timeout
 = 
m_adv_modes_c⁄fig
.
bÀ_adv_Á°_timeout
;

317 i‡((
m_adv_modes_c⁄fig
.
bÀ_adv_whôñi°_íabÀd
) &&

318 (!
m_whôñi°_ãmp‹¨ûy_dißbÀd
) &&

319 (
	`whôñi°_has_íåõs
()))

321 #i‡(
NRF_SD_BLE_API_VERSION
 == 2)

322 
p_adv_∑øms
->
p_whôñi°
 = &
m_whôñi°
;

325 
p_adv_∑øms
->
Â
 = 
BLE_GAP_ADV_FP_FILTER_CONNREQ
;

326 
m_advd©a
.
Êags
 = 
BLE_GAP_ADV_FLAG_BR_EDR_NOT_SUPPORTED
;

328 
ªt
 = 
	`bÀ_advd©a_£t
(&
m_advd©a
, 
NULL
);

329 i‡(
ªt
 !
NRF_SUCCESS
)

331  
ªt
;

334 
m_adv_evt
 = 
BLE_ADV_EVT_FAST_WHITELIST
;

338 
m_adv_evt
 = 
BLE_ADV_EVT_FAST
;

341  
NRF_SUCCESS
;

342 
	}
}

351 
ªt_code_t
 
	$£t_adv_mode_¶ow
(
bÀ_g≠_adv_∑øms_t
 * 
p_adv_∑øms
)

353 
ªt_code_t
 
ªt
;

355 
p_adv_∑øms
->
öãrvÆ
 = 
m_adv_modes_c⁄fig
.
bÀ_adv_¶ow_öãrvÆ
;

356 
p_adv_∑øms
->
timeout
 = 
m_adv_modes_c⁄fig
.
bÀ_adv_¶ow_timeout
;

358 i‡((
m_adv_modes_c⁄fig
.
bÀ_adv_whôñi°_íabÀd
) &&

359 (!
m_whôñi°_ãmp‹¨ûy_dißbÀd
) &&

360 (
	`whôñi°_has_íåõs
()))

362 #i‡(
NRF_SD_BLE_API_VERSION
 == 2)

364 
p_adv_∑øms
->
p_whôñi°
 = &
m_whôñi°
;

368 
p_adv_∑øms
->
Â
 = 
BLE_GAP_ADV_FP_FILTER_CONNREQ
;

369 
m_advd©a
.
Êags
 = 
BLE_GAP_ADV_FLAG_BR_EDR_NOT_SUPPORTED
;

371 
ªt
 = 
	`bÀ_advd©a_£t
(&
m_advd©a
, 
NULL
);

372 i‡(
ªt
 !
NRF_SUCCESS
)

374  
ªt
;

377 
m_adv_evt
 = 
BLE_ADV_EVT_SLOW_WHITELIST
;

381 
m_adv_evt
 = 
BLE_ADV_EVT_SLOW
;

384  
NRF_SUCCESS
;

385 
	}
}

388 
uöt32_t
 
	$bÀ_advîtisög_öô
(
bÀ_advd©a_t
 c⁄° * 
p_advd©a
,

389 
bÀ_advd©a_t
 c⁄° * 
p_§d©a
,

390 
bÀ_adv_modes_c⁄fig_t
 c⁄° * 
p_c⁄fig
,

391 
bÀ_advîtisög_evt_h™dÀr_t
 c⁄° 
evt_h™dÀr
,

392 
bÀ_advîtisög_îr‹_h™dÀr_t
 c⁄° 
îr‹_h™dÀr
)

394 
uöt32_t
 
ªt
;

396 i‡((
p_advd©a
 =
NULL
Ë|| (
p_c⁄fig
 == NULL))

398  
NRF_ERROR_NULL
;

401 
m_öôülized
 = 
åue
;

402 
m_adv_mode_cuºít
 = 
BLE_ADV_MODE_IDLE
;

403 
m_adv_modes_c⁄fig
 = *
p_c⁄fig
;

404 
m_evt_h™dÀr
 = 
evt_h™dÀr
;

405 
m_îr‹_h™dÀr
 = 
îr‹_h™dÀr
;

406 
m_cuºít_¶ave_lök_c⁄n_h™dÀ
 = 
BLE_CONN_HANDLE_INVALID
;

408 
	`mem£t
(&
m_≥î_addªss
, 0, (m_peer_address));

409 
	`mem£t
(&
m_advd©a
, 0, (m_advdata));

412 
m_advd©a
.
«me_ty≥
 = 
p_advd©a
->name_type;

413 
m_advd©a
.
ö˛ude_≠≥¨™˚
 = 
p_advd©a
->include_appearance;

414 
m_advd©a
.
Êags
 = 
p_advd©a
->flags;

415 
m_advd©a
.
sh‹t_«me_Àn
 = 
p_advd©a
->short_name_len;

417 
m_advd©a
.
uuids_com∂ëe
 = 
p_advd©a
->uuids_complete;

418 
m_advd©a
.
uuids_m‹e_avaûabÀ
 = 
p_advd©a
->uuids_more_available;

419 
m_advd©a
.
uuids_sﬁicôed
 = 
p_advd©a
->uuids_solicited;

421 i‡(
p_advd©a
->
p_m™uf_•ecific_d©a
 !
NULL
)

423 
m_advd©a
.
p_m™uf_•ecific_d©a
 = &
m_m™uf_•ecific_d©a
;

424 
m_m™uf_•ecific_d©a
.
d©a
.
p_d©a
 = 
m_m™uf_d©a_¨øy
;

425 
m_advd©a
.
p_m™uf_•ecific_d©a
->
com∑ny_idítifõr
 =

426 
p_advd©a
->
p_m™uf_•ecific_d©a
->
com∑ny_idítifõr
;

427 
m_advd©a
.
p_m™uf_•ecific_d©a
->
d©a
.
size
 = 
p_advd©a
->p_manuf_specific_data->data.size;

429 
uöt32_t
 
i
 = 0; i < 
m_advd©a
.
p_m™uf_•ecific_d©a
->
d©a
.
size
; i++)

431 
m_m™uf_d©a_¨øy
[
i
] = 
p_advd©a
->
p_m™uf_•ecific_d©a
->
d©a
.
p_d©a
[i];

435 i‡(
p_advd©a
->
p_£rvi˚_d©a_¨øy
 !
NULL
)

437 
m_£rvi˚_d©a
.
d©a
.
p_d©a
 = 
m_£rvi˚_d©a_¨øy
;

438 
m_advd©a
.
p_£rvi˚_d©a_¨øy
 = &
m_£rvi˚_d©a
;

439 
m_advd©a
.
p_£rvi˚_d©a_¨øy
->
d©a
.
p_d©a
 = 
m_£rvi˚_d©a_¨øy
;

440 
m_advd©a
.
p_£rvi˚_d©a_¨øy
->
d©a
.
size
 = 
p_advd©a
->p_service_data_array->data.size;

441 
m_advd©a
.
p_£rvi˚_d©a_¨øy
->
£rvi˚_uuid
 = 
p_advd©a
->p_service_data_array->service_uuid;

443 
uöt32_t
 
i
 = 0; i < 
m_advd©a
.
p_£rvi˚_d©a_¨øy
->
d©a
.
size
; i++)

445 
m_£rvi˚_d©a_¨øy
[
i
] = 
p_advd©a
->
p_£rvi˚_d©a_¨øy
->
d©a
.
p_d©a
[i];

448 
m_advd©a
.
£rvi˚_d©a_cou¡
 = 
p_advd©a
->service_data_count;

451 i‡(
p_advd©a
->
p_¶ave_c⁄n_öt
 !
NULL
)

453 
m_advd©a
.
p_¶ave_c⁄n_öt
 = &
m_¶ave_c⁄n_öt
;

454 
m_advd©a
.
p_¶ave_c⁄n_öt
->
max_c⁄n_öãrvÆ
 = 
p_advd©a
->p_slave_conn_int->max_conn_interval;

455 
m_advd©a
.
p_¶ave_c⁄n_öt
->
mö_c⁄n_öãrvÆ
 = 
p_advd©a
->p_slave_conn_int->min_conn_interval;

458 i‡(
p_advd©a
->
p_tx_powî_Àvñ
 !
NULL
)

460 
m_advd©a
.
p_tx_powî_Àvñ
 = 
p_advd©a
->p_tx_power_level;

463 #i‡(
NRF_SD_BLE_API_VERSION
 == 2)

464 
i
 = 0; i <
BLE_GAP_WHITELIST_ADDR_MAX_COUNT
 ; i++)

466 
m_whôñi°
.
µ_addrs
[
i
] = &
m_whôñi°_addrs
[i];

469 
i
 = 0; i <
BLE_GAP_WHITELIST_IRK_MAX_COUNT
 ; i++)

471 
m_whôñi°
.
µ_úks
[
i
] = &
m_whôñi°_úks
[i];

475 
ªt
 = 
	`bÀ_advd©a_£t
(&
m_advd©a
, 
p_§d©a
);

476  
ªt
;

477 
	}
}

480 
uöt32_t
 
	$bÀ_advîtisög_°¨t
(
bÀ_adv_mode_t
 
advîtisög_mode
)

482 
uöt32_t
 
ªt
;

483 
bÀ_g≠_adv_∑øms_t
 
adv_∑øms
;

485 i‡(
m_öôülized
 =
Ál£
)

487  
NRF_ERROR_INVALID_STATE
;

490 
m_adv_mode_cuºít
 = 
advîtisög_mode
;

493 i‡(
	`Êash_ac˚ss_ö_¥ogªss
())

495 
m_advîtisög_°¨t_≥ndög
 = 
åue
;

496  
NRF_SUCCESS
;

499 
	`mem£t
(&
m_≥î_addªss
, 0, (m_peer_address));

501 i‡–((
m_adv_modes_c⁄fig
.
bÀ_adv_dúe˘ed_íabÀd
Ë&& (
m_adv_mode_cuºít
 =
BLE_ADV_MODE_DIRECTED
))

502 ||((
m_adv_modes_c⁄fig
.
bÀ_adv_dúe˘ed_¶ow_íabÀd
Ë&& (
m_adv_mode_cuºít
 =
BLE_ADV_MODE_DIRECTED
))

503 ||((
m_adv_modes_c⁄fig
.
bÀ_adv_dúe˘ed_¶ow_íabÀd
Ë&& (
m_adv_mode_cuºít
 =
BLE_ADV_MODE_DIRECTED_SLOW
))

506 i‡(
m_evt_h™dÀr
 !
NULL
)

508 
m_≥î_addr_ª∂y_ex≥˘ed
 = 
åue
;

509 
	`m_evt_h™dÀr
(
BLE_ADV_EVT_PEER_ADDR_REQUEST
);

513 
m_≥î_addr_ª∂y_ex≥˘ed
 = 
Ál£
;

517 
m_adv_mode_cuºít
 = 
	`adv_mode_√xt_avaû_gë
(
advîtisög_mode
);

520 i‡((
m_evt_h™dÀr
 !
NULL
) &&

521 (
m_adv_mode_cuºít
 =
BLE_ADV_MODE_FAST
 || m_adv_mode_cuºíà=
BLE_ADV_MODE_SLOW
) &&

522 (
m_adv_modes_c⁄fig
.
bÀ_adv_whôñi°_íabÀd
) &&

523 (!
m_whôñi°_ãmp‹¨ûy_dißbÀd
))

525 #i‡(
NRF_SD_BLE_API_VERSION
 == 3)

526 
m_whôñi°_ö_u£
 = 
Ál£
;

528 
m_whôñi°_ª∂y_ex≥˘ed
 = 
åue
;

529 
	`m_evt_h™dÀr
(
BLE_ADV_EVT_WHITELIST_REQUEST
);

533 
m_whôñi°_ª∂y_ex≥˘ed
 = 
Ál£
;

537 
	`mem£t
(&
adv_∑øms
, 0, (adv_params));

539 
adv_∑øms
.
ty≥
 = 
BLE_GAP_ADV_TYPE_ADV_IND
;

540 
adv_∑øms
.
Â
 = 
BLE_GAP_ADV_FP_ANY
;

543 
m_adv_mode_cuºít
)

545 
BLE_ADV_MODE_DIRECTED
:

546 
ªt
 = 
	`£t_adv_mode_dúe˘ed
(&
adv_∑øms
);

549 
BLE_ADV_MODE_DIRECTED_SLOW
:

550 
ªt
 = 
	`£t_adv_mode_dúe˘ed_¶ow
(&
adv_∑øms
);

553 
BLE_ADV_MODE_FAST
:

554 
ªt
 = 
	`£t_adv_mode_Á°
(&
adv_∑øms
);

557 
BLE_ADV_MODE_SLOW
:

558 
ªt
 = 
	`£t_adv_mode_¶ow
(&
adv_∑øms
);

561 
BLE_ADV_MODE_IDLE
:

562 
m_adv_evt
 = 
BLE_ADV_EVT_IDLE
;

569 i‡(
m_adv_mode_cuºít
 !
BLE_ADV_MODE_IDLE
)

571 
ªt
 = 
	`sd_bÀ_g≠_adv_°¨t
(&
adv_∑øms
);

572 i‡(
ªt
 !
NRF_SUCCESS
)

574  
ªt
;

578 i‡(
m_evt_h™dÀr
 !
NULL
)

580 
	`m_evt_h™dÀr
(
m_adv_evt
);

583  
NRF_SUCCESS
;

584 
	}
}

587 
	$bÀ_advîtisög_⁄_bÀ_evt
(
bÀ_evt_t
 c⁄° * 
p_bÀ_evt
)

589 
p_bÀ_evt
->
hódî
.
evt_id
)

591 
BLE_GAP_EVT_CONNECTED
:

592 
	`⁄_c⁄√˘ed
(
p_bÀ_evt
);

596 
BLE_GAP_EVT_DISCONNECTED
:

597 
	`⁄_disc⁄√˘ed
(
p_bÀ_evt
);

601 
BLE_GAP_EVT_TIMEOUT
:

602 
	`⁄_timeout
(
p_bÀ_evt
);

608 
	}
}

611 
	$bÀ_advîtisög_⁄_sys_evt
(
uöt32_t
 
sys_evt
)

613 
uöt32_t
 
ªt
;

615 
sys_evt
)

618 
NRF_EVT_FLASH_OPERATION_SUCCESS
:

619 
NRF_EVT_FLASH_OPERATION_ERROR
:

620 i‡(
m_advîtisög_°¨t_≥ndög
)

622 
m_advîtisög_°¨t_≥ndög
 = 
Ál£
;

623 
ªt
 = 
	`bÀ_advîtisög_°¨t
(
m_adv_mode_cuºít
);

624 i‡((
ªt
 !
NRF_SUCCESS
Ë&& (
m_îr‹_h™dÀr
 !
NULL
))

626 
	`m_îr‹_h™dÀr
(
ªt
);

635 
	}
}

638 
uöt32_t
 
	$bÀ_advîtisög_≥î_addr_ª∂y
(
bÀ_g≠_addr_t
 * 
p_≥î_addªss
)

640 i‡(!
m_≥î_addr_ª∂y_ex≥˘ed
)

642  
NRF_ERROR_INVALID_STATE
;

645 
m_≥î_addr_ª∂y_ex≥˘ed
 = 
Ál£
;

647 
	`mem˝y
(&
m_≥î_addªss
, 
p_≥î_addªss
, (m_peer_address));

649  
NRF_SUCCESS
;

650 
	}
}

653 
uöt32_t
 
	$bÀ_advîtisög_whôñi°_ª∂y
(
bÀ_g≠_addr_t
 c⁄° * 
p_g≠_addrs
,

654 
uöt32_t
 
addr_˙t
,

655 
bÀ_g≠_úk_t
 c⁄° * 
p_g≠_úks
,

656 
uöt32_t
 
úk_˙t
)

658 i‡(!
m_whôñi°_ª∂y_ex≥˘ed
)

660  
NRF_ERROR_INVALID_STATE
;

663 
m_whôñi°_ª∂y_ex≥˘ed
 = 
Ál£
;

665 #i‡(
NRF_SD_BLE_API_VERSION
 == 2)

667 
m_whôñi°
.
addr_cou¡
 = 
addr_˙t
;

668 
m_whôñi°
.
úk_cou¡
 = 
úk_˙t
;

670 
uöt32_t
 
i
 = 0; i < 
addr_˙t
; i++)

672 *
m_whôñi°
.
µ_addrs
[
i
] = 
p_g≠_addrs
[i];

675 
uöt32_t
 
i
 = 0; i < 
úk_˙t
; i++)

677 *
m_whôñi°
.
µ_úks
[
i
] = 
p_g≠_úks
[i];

682 
m_whôñi°_ö_u£
 = ((
addr_˙t
 > 0Ë|| (
úk_˙t
 > 0));

686  
NRF_SUCCESS
;

687 
	}
}

690 
uöt32_t
 
	$bÀ_advîtisög_ª°¨t_wôhout_whôñi°
()

692 
uöt32_t
 
ªt
;

694 (Ë
	`sd_bÀ_g≠_adv_°›
();

696 
m_whôñi°_ãmp‹¨ûy_dißbÀd
 = 
åue
;

698 #i‡(
NRF_SD_BLE_API_VERSION
 == 3)

699 
m_whôñi°_ö_u£
 = 
Ál£
;

702 
m_advd©a
.
Êags
 = 
BLE_GAP_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE
;

704 
ªt
 = 
	`bÀ_advd©a_£t
(&
m_advd©a
, 
NULL
);

705 i‡(
ªt
 !
NRF_SUCCESS
)

707  
ªt
;

710 
ªt
 = 
	`bÀ_advîtisög_°¨t
(
m_adv_mode_cuºít
);

711 i‡((
ªt
 !
NRF_SUCCESS
Ë&& (
m_îr‹_h™dÀr
 !
NULL
))

713 
	`m_îr‹_h™dÀr
(
ªt
);

716  
NRF_SUCCESS
;

717 
	}
}

	@D:\Private\Programing\MCU\Nordic\ble_app_template\nRF5_SDK_12.3.0_d7731ad\components\ble\common\ble_advdata.c

41 
	~"bÀ_advd©a.h
"

42 
	~"bÀ_g≠.h
"

43 
	~"bÀ_§v_comm⁄.h
"

44 
	~"sdk_comm⁄.h
"

49 
	#AD_TYPE_BLE_DEVICE_ADDR_TYPE_PUBLIC
 0UL

	)

50 
	#AD_TYPE_BLE_DEVICE_ADDR_TYPE_RANDOM
 1UL

	)

52 
uöt32_t
 
	$bÀ_devi˚_addr_ícode
(
uöt8_t
 * 
p_ícoded_d©a
,

53 
uöt16_t
 * 
p_off£t
,

54 
uöt16_t
 
max_size
)

56 
uöt32_t
 
îr_code
;

57 
bÀ_g≠_addr_t
 
devi˚_addr
;

60 i‡(((*
p_off£t
Ë+ 
AD_TYPE_BLE_DEVICE_ADDR_SIZE
Ë> 
max_size
)

62  
NRF_ERROR_DATA_SIZE
;

66 #i‡(
NRF_SD_BLE_API_VERSION
 == 3)

67 
îr_code
 = 
	`sd_bÀ_g≠_addr_gë
(&
devi˚_addr
);

69 
îr_code
 = 
	`sd_bÀ_g≠_addªss_gë
(&
devi˚_addr
);

71 
	`VERIFY_SUCCESS
(
îr_code
);

74 
p_ícoded_d©a
[*
p_off£t
] = (
uöt8_t
)(
ADV_AD_TYPE_FIELD_SIZE
 +

75 
AD_TYPE_BLE_DEVICE_ADDR_DATA_SIZE
);

76 *
p_off£t
 +
ADV_LENGTH_FIELD_SIZE
;

77 
p_ícoded_d©a
[*
p_off£t
] = 
BLE_GAP_AD_TYPE_LE_BLUETOOTH_DEVICE_ADDRESS
;

78 *
p_off£t
 +
ADV_AD_TYPE_FIELD_SIZE
;

79 
	`mem˝y
(&
p_ícoded_d©a
[*
p_off£t
], &
devi˚_addr
.
addr
[0], 
BLE_GAP_ADDR_LEN
);

80 *
p_off£t
 +
BLE_GAP_ADDR_LEN
;

81 i‡(
BLE_GAP_ADDR_TYPE_PUBLIC
 =
devi˚_addr
.
addr_ty≥
)

83 
p_ícoded_d©a
[*
p_off£t
] = 
AD_TYPE_BLE_DEVICE_ADDR_TYPE_PUBLIC
;

87 
p_ícoded_d©a
[*
p_off£t
] = 
AD_TYPE_BLE_DEVICE_ADDR_TYPE_RANDOM
;

89 *
p_off£t
 +
AD_TYPE_BLE_DEVICE_ADDR_TYPE_SIZE
;

91  
NRF_SUCCESS
;

92 
	}
}

94 
uöt32_t
 
	$«me_ícode
(c⁄° 
bÀ_advd©a_t
 * 
p_advd©a
,

95 
uöt8_t
 * 
p_ícoded_d©a
,

96 
uöt16_t
 * 
p_off£t
,

97 
uöt16_t
 
max_size
)

99 
uöt32_t
 
îr_code
;

100 
uöt16_t
 
ªm_adv_d©a_Àn
;

101 
uöt16_t
 
a˘uÆ_Àngth
;

102 
uöt8_t
 
adv_d©a_f‹m©
;

106 i‡((
BLE_ADVDATA_SHORT_NAME
 =
p_advd©a
->
«me_ty≥
Ë&& (0 =p_advd©a->
sh‹t_«me_Àn
))

108  
NRF_ERROR_INVALID_PARAM
;

112 i‡–(((*
p_off£t
Ë+ 
ADV_AD_DATA_OFFSET
Ë> 
max_size
) ||

113 –(
BLE_ADVDATA_SHORT_NAME
 =
p_advd©a
->
«me_ty≥
) &&

114 (((*
p_off£t
Ë+ 
ADV_AD_DATA_OFFSET
 + 
p_advd©a
->
sh‹t_«me_Àn
Ë> 
max_size
)))

116  
NRF_ERROR_DATA_SIZE
;

119 
ªm_adv_d©a_Àn
 = 
max_size
 - (*
p_off£t
Ë- 
ADV_AD_DATA_OFFSET
;

120 
a˘uÆ_Àngth
 = 
ªm_adv_d©a_Àn
;

123 
îr_code
 = 
	`sd_bÀ_g≠_devi˚_«me_gë
(&
p_ícoded_d©a
[(*
p_off£t
Ë+ 
ADV_AD_DATA_OFFSET
],

124 &
a˘uÆ_Àngth
);

125 
	`VERIFY_SUCCESS
(
îr_code
);

128 i‡((
p_advd©a
->
«me_ty≥
 =
BLE_ADVDATA_FULL_NAME
Ë&& (
a˘uÆ_Àngth
 <
ªm_adv_d©a_Àn
))

131 
adv_d©a_f‹m©
 = 
BLE_GAP_AD_TYPE_COMPLETE_LOCAL_NAME
;

136 
adv_d©a_f‹m©
 = 
BLE_GAP_AD_TYPE_SHORT_LOCAL_NAME
;

140 i‡((
BLE_ADVDATA_SHORT_NAME
 =
p_advd©a
->
«me_ty≥
) &&

141 (
p_advd©a
->
sh‹t_«me_Àn
 <
ªm_adv_d©a_Àn
))

144 
a˘uÆ_Àngth
 = 
p_advd©a
->
sh‹t_«me_Àn
;

149 
a˘uÆ_Àngth
 = 
ªm_adv_d©a_Àn
;

154 i‡(
a˘uÆ_Àngth
 > (0x00FF - 
ADV_AD_TYPE_FIELD_SIZE
))

156  
NRF_ERROR_DATA_SIZE
;

160 
p_ícoded_d©a
[*
p_off£t
] = (
uöt8_t
)(
ADV_AD_TYPE_FIELD_SIZE
 + 
a˘uÆ_Àngth
);

161 *
p_off£t
 +
ADV_LENGTH_FIELD_SIZE
;

162 
p_ícoded_d©a
[*
p_off£t
] = 
adv_d©a_f‹m©
;

163 *
p_off£t
 +
ADV_AD_TYPE_FIELD_SIZE
;

164 *
p_off£t
 +
a˘uÆ_Àngth
;

166  
NRF_SUCCESS
;

167 
	}
}

170 
uöt32_t
 
	$≠≥¨™˚_ícode
(
uöt8_t
 * 
p_ícoded_d©a
,

171 
uöt16_t
 * 
p_off£t
,

172 
uöt16_t
 
max_size
)

174 
uöt32_t
 
îr_code
;

175 
uöt16_t
 
≠≥¨™˚
;

178 i‡(((*
p_off£t
Ë+ 
AD_TYPE_APPEARANCE_SIZE
Ë> 
max_size
)

180  
NRF_ERROR_DATA_SIZE
;

184 
îr_code
 = 
	`sd_bÀ_g≠_≠≥¨™˚_gë
(&
≠≥¨™˚
);

185 
	`VERIFY_SUCCESS
(
îr_code
);

188 
p_ícoded_d©a
[*
p_off£t
] = (
uöt8_t
)(
ADV_AD_TYPE_FIELD_SIZE
 + 
AD_TYPE_APPEARANCE_DATA_SIZE
);

189 *
p_off£t
 +
ADV_LENGTH_FIELD_SIZE
;

190 
p_ícoded_d©a
[*
p_off£t
] = 
BLE_GAP_AD_TYPE_APPEARANCE
;

191 *
p_off£t
 +
ADV_AD_TYPE_FIELD_SIZE
;

192 *
p_off£t
 +
	`uöt16_ícode
(
≠≥¨™˚
, &
p_ícoded_d©a
[*p_offset]);

194  
NRF_SUCCESS
;

195 
	}
}

197 
uöt32_t
 
	$Êags_ícode
(
öt8_t
 
Êags
,

198 
uöt8_t
 * 
p_ícoded_d©a
,

199 
uöt16_t
 * 
p_off£t
,

200 
uöt16_t
 
max_size
)

203 i‡(((*
p_off£t
Ë+ 
AD_TYPE_FLAGS_SIZE
Ë> 
max_size
)

205  
NRF_ERROR_DATA_SIZE
;

209 
p_ícoded_d©a
[*
p_off£t
] = (
uöt8_t
)(
ADV_AD_TYPE_FIELD_SIZE
 + 
AD_TYPE_FLAGS_DATA_SIZE
);

210 *
p_off£t
 +
ADV_LENGTH_FIELD_SIZE
;

211 
p_ícoded_d©a
[*
p_off£t
] = 
BLE_GAP_AD_TYPE_FLAGS
;

212 *
p_off£t
 +
ADV_AD_TYPE_FIELD_SIZE
;

213 
p_ícoded_d©a
[*
p_off£t
] = 
Êags
;

214 *
p_off£t
 +
AD_TYPE_FLAGS_DATA_SIZE
;

216  
NRF_SUCCESS
;

217 
	}
}

219 
uöt32_t
 
	$tx_powî_Àvñ_ícode
(
öt8_t
 
tx_powî_Àvñ
,

220 
uöt8_t
 * 
p_ícoded_d©a
,

221 
uöt16_t
 * 
p_off£t
,

222 
uöt16_t
 
max_size
)

225 i‡(((*
p_off£t
Ë+ 
AD_TYPE_TX_POWER_LEVEL_SIZE
Ë> 
max_size
)

227  
NRF_ERROR_DATA_SIZE
;

231 
p_ícoded_d©a
[*
p_off£t
] = (
uöt8_t
)(
ADV_AD_TYPE_FIELD_SIZE
 +

232 
AD_TYPE_TX_POWER_LEVEL_DATA_SIZE
);

233 *
p_off£t
 +
ADV_LENGTH_FIELD_SIZE
;

234 
p_ícoded_d©a
[*
p_off£t
] = 
BLE_GAP_AD_TYPE_TX_POWER_LEVEL
;

235 *
p_off£t
 +
ADV_AD_TYPE_FIELD_SIZE
;

236 
p_ícoded_d©a
[*
p_off£t
] = 
tx_powî_Àvñ
;

237 *
p_off£t
 +
AD_TYPE_TX_POWER_LEVEL_DATA_SIZE
;

239  
NRF_SUCCESS
;

240 
	}
}

243 
uöt32_t
 
	$uuid_li°_sized_ícode
(c⁄° 
bÀ_advd©a_uuid_li°_t
 * 
p_uuid_li°
,

244 
uöt8_t
 
adv_ty≥
,

245 
uöt8_t
 
uuid_size
,

246 
uöt8_t
 * 
p_ícoded_d©a
,

247 
uöt16_t
 * 
p_off£t
,

248 
uöt16_t
 
max_size
)

250 
i
;

251 
boﬁ
 
is_hódög_wrôãn
 = 
Ál£
;

252 
uöt16_t
 
°¨t_pos
 = *
p_off£t
;

253 
uöt16_t
 
Àngth
;

255 
i
 = 0; i < 
p_uuid_li°
->
uuid_˙t
; i++)

257 
uöt32_t
 
îr_code
;

258 
uöt8_t
 
ícoded_size
;

259 
bÀ_uuid_t
 
uuid
 = 
p_uuid_li°
->
p_uuids
[
i
];

262 
îr_code
 = 
	`sd_bÀ_uuid_ícode
(&
uuid
, &
ícoded_size
, 
NULL
);

263 
	`VERIFY_SUCCESS
(
îr_code
);

266 i‡(
ícoded_size
 =
uuid_size
)

268 
uöt8_t
 
hódög_byãs
 = (
is_hódög_wrôãn
Ë? 0 : 
ADV_AD_DATA_OFFSET
;

271 i‡(((*
p_off£t
Ë+ 
ícoded_size
 + 
hódög_byãs
Ë> 
max_size
)

273  
NRF_ERROR_DATA_SIZE
;

276 i‡(!
is_hódög_wrôãn
)

279 *
p_off£t
 +
ADV_LENGTH_FIELD_SIZE
;

280 
p_ícoded_d©a
[*
p_off£t
] = 
adv_ty≥
;

281 *
p_off£t
 +
ADV_AD_TYPE_FIELD_SIZE
;

282 
is_hódög_wrôãn
 = 
åue
;

286 
îr_code
 = 
	`sd_bÀ_uuid_ícode
(&
uuid
, &
ícoded_size
, &
p_ícoded_d©a
[*
p_off£t
]);

287 
	`VERIFY_SUCCESS
(
îr_code
);

288 *
p_off£t
 +
ícoded_size
;

292 i‡(
is_hódög_wrôãn
)

295 
Àngth
 = (*
p_off£t
Ë- (
°¨t_pos
 + 
ADV_LENGTH_FIELD_SIZE
);

297 i‡(
Àngth
 > 0x00FF)

299  
NRF_ERROR_DATA_SIZE
;

301 
p_ícoded_d©a
[
°¨t_pos
] = (
uöt8_t
)
Àngth
;

304  
NRF_SUCCESS
;

305 
	}
}

308 
uöt32_t
 
	$uuid_li°_ícode
(c⁄° 
bÀ_advd©a_uuid_li°_t
 * 
p_uuid_li°
,

309 
uöt8_t
 
adv_ty≥_16
,

310 
uöt8_t
 
adv_ty≥_128
,

311 
uöt8_t
 * 
p_ícoded_d©a
,

312 
uöt16_t
 * 
p_off£t
,

313 
uöt16_t
 
max_size
)

315 
uöt32_t
 
îr_code
;

318 
îr_code
 = 
	`uuid_li°_sized_ícode
(
p_uuid_li°
,

319 
adv_ty≥_16
,

320 (
uöt16_À_t
),

321 
p_ícoded_d©a
,

322 
p_off£t
,

323 
max_size
);

324 
	`VERIFY_SUCCESS
(
îr_code
);

327 
îr_code
 = 
	`uuid_li°_sized_ícode
(
p_uuid_li°
,

328 
adv_ty≥_128
,

329 (
bÀ_uuid128_t
),

330 
p_ícoded_d©a
,

331 
p_off£t
,

332 
max_size
);

333 
	`VERIFY_SUCCESS
(
îr_code
);

335  
NRF_SUCCESS
;

336 
	}
}

339 
uöt32_t
 
	$c⁄n_öt_check
(c⁄° 
bÀ_advd©a_c⁄n_öt_t
 *
p_c⁄n_öt
)

342 i‡((
p_c⁄n_öt
->
mö_c⁄n_öãrvÆ
 < 0x0006) ||

344 (
p_c⁄n_öt
->
mö_c⁄n_öãrvÆ
 > 0x0c80) &&

345 (
p_c⁄n_öt
->
mö_c⁄n_öãrvÆ
 != 0xffff)

349  
NRF_ERROR_INVALID_PARAM
;

353 i‡((
p_c⁄n_öt
->
max_c⁄n_öãrvÆ
 < 0x0006) ||

355 (
p_c⁄n_öt
->
max_c⁄n_öãrvÆ
 > 0x0c80) &&

356 (
p_c⁄n_öt
->
max_c⁄n_öãrvÆ
 != 0xffff)

360  
NRF_ERROR_INVALID_PARAM
;

364 i‡((
p_c⁄n_öt
->
mö_c⁄n_öãrvÆ
 != 0xffff) &&

365 (
p_c⁄n_öt
->
max_c⁄n_öãrvÆ
 != 0xffff) &&

366 (
p_c⁄n_öt
->
mö_c⁄n_öãrvÆ
 >Ö_c⁄n_öt->
max_c⁄n_öãrvÆ
)

369  
NRF_ERROR_INVALID_PARAM
;

372  
NRF_SUCCESS
;

373 
	}
}

376 
uöt32_t
 
	$c⁄n_öt_ícode
(c⁄° 
bÀ_advd©a_c⁄n_öt_t
 * 
p_c⁄n_öt
,

377 
uöt8_t
 * 
p_ícoded_d©a
,

378 
uöt16_t
 * 
p_off£t
,

379 
uöt16_t
 
max_size
)

381 
uöt32_t
 
îr_code
;

384 i‡(((*
p_off£t
Ë+ 
AD_TYPE_CONN_INT_SIZE
Ë> 
max_size
)

386  
NRF_ERROR_DATA_SIZE
;

390 
îr_code
 = 
	`c⁄n_öt_check
(
p_c⁄n_öt
);

391 
	`VERIFY_SUCCESS
(
îr_code
);

394 
p_ícoded_d©a
[*
p_off£t
] = (
uöt8_t
)(
ADV_AD_TYPE_FIELD_SIZE
 + 
AD_TYPE_CONN_INT_DATA_SIZE
);

395 *
p_off£t
 +
ADV_LENGTH_FIELD_SIZE
;

396 
p_ícoded_d©a
[*
p_off£t
] = 
BLE_GAP_AD_TYPE_SLAVE_CONNECTION_INTERVAL_RANGE
;

397 *
p_off£t
 +
ADV_AD_TYPE_FIELD_SIZE
;

400 *
p_off£t
 +
	`uöt16_ícode
(
p_c⁄n_öt
->
mö_c⁄n_öãrvÆ
, &
p_ícoded_d©a
[*p_offset]);

401 *
p_off£t
 +
	`uöt16_ícode
(
p_c⁄n_öt
->
max_c⁄n_öãrvÆ
, &
p_ícoded_d©a
[*p_offset]);

403  
NRF_SUCCESS
;

404 
	}
}

407 
uöt32_t
 
	$m™uf_•ecific_d©a_ícode
(c⁄° 
bÀ_advd©a_m™uf_d©a_t
 * 
p_m™uf_•_d©a
,

408 
uöt8_t
 * 
p_ícoded_d©a
,

409 
uöt16_t
 * 
p_off£t
,

410 
uöt16_t
 
max_size
)

412 
uöt32_t
 
d©a_size
 = 
AD_TYPE_MANUF_SPEC_DATA_ID_SIZE
 + 
p_m™uf_•_d©a
->
d©a
.
size
;

415 i‡(((*
p_off£t
Ë+ 
ADV_AD_DATA_OFFSET
 + 
d©a_size
Ë> 
max_size
)

417  
NRF_ERROR_DATA_SIZE
;

421 i‡(
d©a_size
 > (0x00FF - 
ADV_AD_TYPE_FIELD_SIZE
))

423  
NRF_ERROR_DATA_SIZE
;

427 
p_ícoded_d©a
[*
p_off£t
] = (
uöt8_t
)(
ADV_AD_TYPE_FIELD_SIZE
 + 
d©a_size
);

428 *
p_off£t
 +
ADV_LENGTH_FIELD_SIZE
;

429 
p_ícoded_d©a
[*
p_off£t
] = 
BLE_GAP_AD_TYPE_MANUFACTURER_SPECIFIC_DATA
;

430 *
p_off£t
 +
ADV_AD_TYPE_FIELD_SIZE
;

433 *
p_off£t
 +
	`uöt16_ícode
(
p_m™uf_•_d©a
->
com∑ny_idítifõr
, &
p_ícoded_d©a
[*p_offset]);

436 i‡(
p_m™uf_•_d©a
->
d©a
.
size
 > 0)

438 i‡(
p_m™uf_•_d©a
->
d©a
.
p_d©a
 =
NULL
)

440  
NRF_ERROR_INVALID_PARAM
;

442 
	`mem˝y
(&
p_ícoded_d©a
[*
p_off£t
], 
p_m™uf_•_d©a
->
d©a
.
p_d©a
,Ö_m™uf_•_d©a->d©a.
size
);

443 *
p_off£t
 +
p_m™uf_•_d©a
->
d©a
.
size
;

446  
NRF_SUCCESS
;

447 
	}
}

450 
uöt32_t
 
	$£rvi˚_d©a_ícode
(c⁄° 
bÀ_advd©a_t
 * 
p_advd©a
,

451 
uöt8_t
 * 
p_ícoded_d©a
,

452 
uöt16_t
 * 
p_off£t
,

453 
uöt16_t
 
max_size
)

455 
uöt8_t
 
i
;

458 i‡(
p_advd©a
->
p_£rvi˚_d©a_¨øy
 =
NULL
)

460  
NRF_ERROR_INVALID_PARAM
;

463 
i
 = 0; i < 
p_advd©a
->
£rvi˚_d©a_cou¡
; i++)

465 
bÀ_advd©a_£rvi˚_d©a_t
 * 
p_£rvi˚_d©a
;

466 
uöt32_t
 
d©a_size
;

468 
p_£rvi˚_d©a
 = &
p_advd©a
->
p_£rvi˚_d©a_¨øy
[
i
];

470 
d©a_size
 = 
AD_TYPE_SERV_DATA_16BIT_UUID_SIZE
 + 
p_£rvi˚_d©a
->
d©a
.
size
;

473 i‡(
d©a_size
 > (0x00FF - 
ADV_AD_TYPE_FIELD_SIZE
))

475  
NRF_ERROR_DATA_SIZE
;

479 
p_ícoded_d©a
[*
p_off£t
] = (
uöt8_t
)(
ADV_AD_TYPE_FIELD_SIZE
 + 
d©a_size
);

480 *
p_off£t
 +
ADV_LENGTH_FIELD_SIZE
;

481 
p_ícoded_d©a
[*
p_off£t
] = 
BLE_GAP_AD_TYPE_SERVICE_DATA
;

482 *
p_off£t
 +
ADV_AD_TYPE_FIELD_SIZE
;

485 *
p_off£t
 +
	`uöt16_ícode
(
p_£rvi˚_d©a
->
£rvi˚_uuid
, &
p_ícoded_d©a
[*p_offset]);

488 i‡(
p_£rvi˚_d©a
->
d©a
.
size
 > 0)

490 i‡(
p_£rvi˚_d©a
->
d©a
.
p_d©a
 =
NULL
)

492  
NRF_ERROR_INVALID_PARAM
;

494 
	`mem˝y
(&
p_ícoded_d©a
[*
p_off£t
], 
p_£rvi˚_d©a
->
d©a
.
p_d©a
,Ö_£rvi˚_d©a->d©a.
size
);

495 *
p_off£t
 +
p_£rvi˚_d©a
->
d©a
.
size
;

499  
NRF_SUCCESS
;

500 
	}
}

502 
uöt32_t
 
	$adv_d©a_ícode
(
bÀ_advd©a_t
 c⁄° * c⁄° 
p_advd©a
,

503 
uöt8_t
 * c⁄° 
p_ícoded_d©a
,

504 
uöt16_t
 * c⁄° 
p_Àn
)

506 
uöt32_t
 
îr_code
 = 
NRF_SUCCESS
;

507 
uöt16_t
 
max_size
 = *
p_Àn
;

508 *
p_Àn
 = 0;

511 i‡(
p_advd©a
->
ö˛ude_bÀ_devi˚_addr
)

513 
îr_code
 = 
	`bÀ_devi˚_addr_ícode
(
p_ícoded_d©a
, 
p_Àn
, 
max_size
);

514 
	`VERIFY_SUCCESS
(
îr_code
);

518 i‡(
p_advd©a
->
ö˛ude_≠≥¨™˚
)

520 
îr_code
 = 
	`≠≥¨™˚_ícode
(
p_ícoded_d©a
, 
p_Àn
, 
max_size
);

521 
	`VERIFY_SUCCESS
(
îr_code
);

525 i‡(
p_advd©a
->
Êags
 != 0 )

527 
îr_code
 = 
	`Êags_ícode
(
p_advd©a
->
Êags
, 
p_ícoded_d©a
, 
p_Àn
, 
max_size
);

528 
	`VERIFY_SUCCESS
(
îr_code
);

532 i‡(
p_advd©a
->
p_tx_powî_Àvñ
 !
NULL
)

534 
îr_code
 = 
	`tx_powî_Àvñ_ícode
(*
p_advd©a
->
p_tx_powî_Àvñ
,

535 
p_ícoded_d©a
,

536 
p_Àn
,

537 
max_size
);

538 
	`VERIFY_SUCCESS
(
îr_code
);

542 i‡(
p_advd©a
->
uuids_m‹e_avaûabÀ
.
uuid_˙t
 > 0)

544 
îr_code
 = 
	`uuid_li°_ícode
(&
p_advd©a
->
uuids_m‹e_avaûabÀ
,

545 
BLE_GAP_AD_TYPE_16BIT_SERVICE_UUID_MORE_AVAILABLE
,

546 
BLE_GAP_AD_TYPE_128BIT_SERVICE_UUID_MORE_AVAILABLE
,

547 
p_ícoded_d©a
,

548 
p_Àn
,

549 
max_size
);

550 
	`VERIFY_SUCCESS
(
îr_code
);

554 i‡(
p_advd©a
->
uuids_com∂ëe
.
uuid_˙t
 > 0)

556 
îr_code
 = 
	`uuid_li°_ícode
(&
p_advd©a
->
uuids_com∂ëe
,

557 
BLE_GAP_AD_TYPE_16BIT_SERVICE_UUID_COMPLETE
,

558 
BLE_GAP_AD_TYPE_128BIT_SERVICE_UUID_COMPLETE
,

559 
p_ícoded_d©a
,

560 
p_Àn
,

561 
max_size
);

562 
	`VERIFY_SUCCESS
(
îr_code
);

566 i‡(
p_advd©a
->
uuids_sﬁicôed
.
uuid_˙t
 > 0)

568 
îr_code
 = 
	`uuid_li°_ícode
(&
p_advd©a
->
uuids_sﬁicôed
,

569 
BLE_GAP_AD_TYPE_SOLICITED_SERVICE_UUIDS_16BIT
,

570 
BLE_GAP_AD_TYPE_SOLICITED_SERVICE_UUIDS_128BIT
,

571 
p_ícoded_d©a
,

572 
p_Àn
,

573 
max_size
);

574 
	`VERIFY_SUCCESS
(
îr_code
);

578 i‡(
p_advd©a
->
p_¶ave_c⁄n_öt
 !
NULL
)

580 
îr_code
 = 
	`c⁄n_öt_ícode
(
p_advd©a
->
p_¶ave_c⁄n_öt
, 
p_ícoded_d©a
, 
p_Àn
, 
max_size
);

581 
	`VERIFY_SUCCESS
(
îr_code
);

585 i‡(
p_advd©a
->
p_m™uf_•ecific_d©a
 !
NULL
)

587 
îr_code
 = 
	`m™uf_•ecific_d©a_ícode
(
p_advd©a
->
p_m™uf_•ecific_d©a
,

588 
p_ícoded_d©a
,

589 
p_Àn
,

590 
max_size
);

591 
	`VERIFY_SUCCESS
(
îr_code
);

595 i‡(
p_advd©a
->
£rvi˚_d©a_cou¡
 > 0)

597 
îr_code
 = 
	`£rvi˚_d©a_ícode
(
p_advd©a
, 
p_ícoded_d©a
, 
p_Àn
, 
max_size
);

598 
	`VERIFY_SUCCESS
(
îr_code
);

602 i‡(
p_advd©a
->
«me_ty≥
 !
BLE_ADVDATA_NO_NAME
)

604 
îr_code
 = 
	`«me_ícode
(
p_advd©a
, 
p_ícoded_d©a
, 
p_Àn
, 
max_size
);

605 
	`VERIFY_SUCCESS
(
îr_code
);

608  
îr_code
;

609 
	}
}

612 
uöt32_t
 
	$advd©a_check
(c⁄° 
bÀ_advd©a_t
 * 
p_advd©a
)

616 ((
p_advd©a
->
Êags
 & 
BLE_GAP_ADV_FLAG_BR_EDR_NOT_SUPPORTED
) == 0)

619  
NRF_ERROR_INVALID_PARAM
;

622  
NRF_SUCCESS
;

623 
	}
}

626 
uöt32_t
 
	$§d©a_check
(c⁄° 
bÀ_advd©a_t
 * 
p_§d©a
)

629 i‡(
p_§d©a
->
Êags
)

631  
NRF_ERROR_INVALID_PARAM
;

634  
NRF_SUCCESS
;

635 
	}
}

638 
uöt32_t
 
	$bÀ_advd©a_£t
(c⁄° 
bÀ_advd©a_t
 * 
p_advd©a
, c⁄° bÀ_advd©a_à* 
p_§d©a
)

640 
uöt32_t
 
îr_code
;

641 
uöt16_t
 
Àn_advd©a
 = 
BLE_GAP_ADV_MAX_SIZE
;

642 
uöt16_t
 
Àn_§d©a
 = 
BLE_GAP_ADV_MAX_SIZE
;

643 
uöt8_t
 
ícoded_advd©a
[
BLE_GAP_ADV_MAX_SIZE
];

644 
uöt8_t
 
ícoded_§d©a
[
BLE_GAP_ADV_MAX_SIZE
];

645 
uöt8_t
 * 
p_ícoded_advd©a
;

646 
uöt8_t
 * 
p_ícoded_§d©a
;

649 i‡(
p_advd©a
 !
NULL
)

651 
îr_code
 = 
	`advd©a_check
(
p_advd©a
);

652 
	`VERIFY_SUCCESS
(
îr_code
);

654 
îr_code
 = 
	`adv_d©a_ícode
(
p_advd©a
, 
ícoded_advd©a
, &
Àn_advd©a
);

655 
	`VERIFY_SUCCESS
(
îr_code
);

656 
p_ícoded_advd©a
 = 
ícoded_advd©a
;

660 
p_ícoded_advd©a
 = 
NULL
;

661 
Àn_advd©a
 = 0;

665 i‡(
p_§d©a
 !
NULL
)

667 
îr_code
 = 
	`§d©a_check
(
p_§d©a
);

668 
	`VERIFY_SUCCESS
(
îr_code
);

670 
îr_code
 = 
	`adv_d©a_ícode
(
p_§d©a
, 
ícoded_§d©a
, &
Àn_§d©a
);

671 
	`VERIFY_SUCCESS
(
îr_code
);

672 
p_ícoded_§d©a
 = 
ícoded_§d©a
;

676 
p_ícoded_§d©a
 = 
NULL
;

677 
Àn_§d©a
 = 0;

681  
	`sd_bÀ_g≠_adv_d©a_£t
(
p_ícoded_advd©a
, 
Àn_advd©a
, 
p_ícoded_§d©a
, 
Àn_§d©a
);

682 
	}
}

	@D:\Private\Programing\MCU\Nordic\ble_app_template\nRF5_SDK_12.3.0_d7731ad\components\ble\common\ble_conn_params.c

41 
	~"bÀ_c⁄n_∑øms.h
"

42 
	~<°dlib.h
>

43 
	~"n‹dic_comm⁄.h
"

44 
	~"bÀ_hci.h
"

45 
	~"≠p_timî.h
"

46 
	~"bÀ_§v_comm⁄.h
"

47 
	~"≠p_utû.h
"

50 
bÀ_c⁄n_∑øms_öô_t
 
	gm_c⁄n_∑øms_c⁄fig
;

51 
bÀ_g≠_c⁄n_∑øms_t
 
	gm_¥e„ºed_c⁄n_∑øms
;

52 
uöt8_t
 
	gm_upd©e_cou¡
;

53 
uöt16_t
 
	gm_c⁄n_h™dÀ
;

54 
bÀ_g≠_c⁄n_∑øms_t
 
	gm_cuºít_c⁄n_∑øms
;

55 
APP_TIMER_DEF
(
m_c⁄n_∑øms_timî_id
);

57 
boﬁ
 
	gm_ch™ge_∑øm
 = 
Ál£
;

59 
boﬁ
 
	$is_c⁄n_∑øms_ok
(
bÀ_g≠_c⁄n_∑øms_t
 * 
p_c⁄n_∑øms
)

65 (
p_c⁄n_∑øms
->
max_c⁄n_öãrvÆ
 >
m_¥e„ºed_c⁄n_∑øms
.
mö_c⁄n_öãrvÆ
)

67 (
p_c⁄n_∑øms
->
max_c⁄n_öãrvÆ
 <
m_¥e„ºed_c⁄n_∑øms
.max_conn_interval)

70  
åue
;

74  
Ál£
;

76 
	}
}

79 
	$upd©e_timeout_h™dÀr
(* 
p_c⁄ãxt
)

81 
	`UNUSED_PARAMETER
(
p_c⁄ãxt
);

83 i‡(
m_c⁄n_h™dÀ
 !
BLE_CONN_HANDLE_INVALID
)

86 
m_upd©e_cou¡
++;

87 i‡(
m_upd©e_cou¡
 <
m_c⁄n_∑øms_c⁄fig
.
max_c⁄n_∑øms_upd©e_cou¡
)

89 
uöt32_t
 
îr_code
;

92 
îr_code
 = 
	`sd_bÀ_g≠_c⁄n_∑øm_upd©e
(
m_c⁄n_h™dÀ
, &
m_¥e„ºed_c⁄n_∑øms
);

93 i‡((
îr_code
 !
NRF_SUCCESS
Ë&& (
m_c⁄n_∑øms_c⁄fig
.
îr‹_h™dÀr
 !
NULL
))

95 
m_c⁄n_∑øms_c⁄fig
.
	`îr‹_h™dÀr
(
îr_code
);

100 
m_upd©e_cou¡
 = 0;

103 i‡(
m_c⁄n_∑øms_c⁄fig
.
disc⁄√˘_⁄_Áû
)

105 
uöt32_t
 
îr_code
;

107 
îr_code
 = 
	`sd_bÀ_g≠_disc⁄√˘
(
m_c⁄n_h™dÀ
, 
BLE_HCI_CONN_INTERVAL_UNACCEPTABLE
);

108 i‡((
îr_code
 !
NRF_SUCCESS
Ë&& (
m_c⁄n_∑øms_c⁄fig
.
îr‹_h™dÀr
 !
NULL
))

110 
m_c⁄n_∑øms_c⁄fig
.
	`îr‹_h™dÀr
(
îr_code
);

115 i‡(
m_c⁄n_∑øms_c⁄fig
.
evt_h™dÀr
 !
NULL
)

117 
bÀ_c⁄n_∑øms_evt_t
 
evt
;

119 
evt
.
evt_ty≥
 = 
BLE_CONN_PARAMS_EVT_FAILED
;

120 
m_c⁄n_∑øms_c⁄fig
.
	`evt_h™dÀr
(&
evt
);

124 
	}
}

127 
uöt32_t
 
	$bÀ_c⁄n_∑øms_öô
(c⁄° 
bÀ_c⁄n_∑øms_öô_t
 * 
p_öô
)

129 
uöt32_t
 
îr_code
;

131 
m_c⁄n_∑øms_c⁄fig
 = *
p_öô
;

132 
m_ch™ge_∑øm
 = 
Ál£
;

133 i‡(
p_öô
->
p_c⁄n_∑øms
 !
NULL
)

135 
m_¥e„ºed_c⁄n_∑øms
 = *
p_öô
->
p_c⁄n_∑øms
;

138 
îr_code
 = 
	`sd_bÀ_g≠_µ˝_£t
(&
m_¥e„ºed_c⁄n_∑øms
);

139 i‡(
îr_code
 !
NRF_SUCCESS
)

141  
îr_code
;

147 
îr_code
 = 
	`sd_bÀ_g≠_µ˝_gë
(&
m_¥e„ºed_c⁄n_∑øms
);

148 i‡(
îr_code
 !
NRF_SUCCESS
)

150  
îr_code
;

154 
m_c⁄n_h™dÀ
 = 
BLE_CONN_HANDLE_INVALID
;

155 
m_upd©e_cou¡
 = 0;

157  
	`≠p_timî_¸óã
(&
m_c⁄n_∑øms_timî_id
,

158 
APP_TIMER_MODE_SINGLE_SHOT
,

159 
upd©e_timeout_h™dÀr
);

160 
	}
}

163 
uöt32_t
 
	$bÀ_c⁄n_∑øms_°›
()

165  
	`≠p_timî_°›
(
m_c⁄n_∑øms_timî_id
);

166 
	}
}

169 
	$c⁄n_∑øms_√gŸüti⁄
()

172 i‡(!
	`is_c⁄n_∑øms_ok
(&
m_cuºít_c⁄n_∑øms
))

174 
uöt32_t
 
îr_code
;

175 
uöt32_t
 
timeout_ticks
;

177 i‡(
m_ch™ge_∑øm
)

180 i‡(
m_c⁄n_∑øms_c⁄fig
.
evt_h™dÀr
 !
NULL
)

182 
bÀ_c⁄n_∑øms_evt_t
 
evt
;

184 
evt
.
evt_ty≥
 = 
BLE_CONN_PARAMS_EVT_FAILED
;

185 
m_c⁄n_∑øms_c⁄fig
.
	`evt_h™dÀr
(&
evt
);

190 i‡(
m_upd©e_cou¡
 == 0)

193 
timeout_ticks
 = 
m_c⁄n_∑øms_c⁄fig
.
fú°_c⁄n_∑øms_upd©e_dñay
;

197 
timeout_ticks
 = 
m_c⁄n_∑øms_c⁄fig
.
√xt_c⁄n_∑øms_upd©e_dñay
;

200 
îr_code
 = 
	`≠p_timî_°¨t
(
m_c⁄n_∑øms_timî_id
, 
timeout_ticks
, 
NULL
);

201 i‡((
îr_code
 !
NRF_SUCCESS
Ë&& (
m_c⁄n_∑øms_c⁄fig
.
îr‹_h™dÀr
 !
NULL
))

203 
m_c⁄n_∑øms_c⁄fig
.
	`îr‹_h™dÀr
(
îr_code
);

210 i‡(
m_c⁄n_∑øms_c⁄fig
.
evt_h™dÀr
 !
NULL
)

212 
bÀ_c⁄n_∑øms_evt_t
 
evt
;

214 
evt
.
evt_ty≥
 = 
BLE_CONN_PARAMS_EVT_SUCCEEDED
;

215 
m_c⁄n_∑øms_c⁄fig
.
	`evt_h™dÀr
(&
evt
);

218 
m_ch™ge_∑øm
 = 
Ál£
;

219 
	}
}

222 
	$⁄_c⁄√˘
(
bÀ_evt_t
 * 
p_bÀ_evt
)

225 
m_c⁄n_h™dÀ
 = 
p_bÀ_evt
->
evt
.
g≠_evt
.
c⁄n_h™dÀ
;

226 
m_cuºít_c⁄n_∑øms
 = 
p_bÀ_evt
->
evt
.
g≠_evt
.
∑øms
.
c⁄√˘ed
.
c⁄n_∑øms
;

227 
m_upd©e_cou¡
 = 0;

230 i‡(
m_c⁄n_∑øms_c⁄fig
.
°¨t_⁄_nŸify_cccd_h™dÀ
 =
BLE_GATT_HANDLE_INVALID
)

232 
	`c⁄n_∑øms_√gŸüti⁄
();

234 
	}
}

237 
	$⁄_disc⁄√˘
(
bÀ_evt_t
 * 
p_bÀ_evt
)

239 
uöt32_t
 
îr_code
;

241 
m_c⁄n_h™dÀ
 = 
BLE_CONN_HANDLE_INVALID
;

244 
m_upd©e_cou¡
 = 0;

246 
îr_code
 = 
	`≠p_timî_°›
(
m_c⁄n_∑øms_timî_id
);

247 i‡((
îr_code
 !
NRF_SUCCESS
Ë&& (
m_c⁄n_∑øms_c⁄fig
.
îr‹_h™dÀr
 !
NULL
))

249 
m_c⁄n_∑øms_c⁄fig
.
	`îr‹_h™dÀr
(
îr_code
);

251 
	}
}

254 
	$⁄_wrôe
(
bÀ_evt_t
 * 
p_bÀ_evt
)

256 
bÀ_g©ts_evt_wrôe_t
 * 
p_evt_wrôe
 = &
p_bÀ_evt
->
evt
.
g©ts_evt
.
∑øms
.
wrôe
;

260 (
p_evt_wrôe
->
h™dÀ
 =
m_c⁄n_∑øms_c⁄fig
.
°¨t_⁄_nŸify_cccd_h™dÀ
)

262 (
p_evt_wrôe
->
Àn
 == 2)

266 i‡(
	`bÀ_§v_is_nŸifiˇti⁄_íabÀd
(
p_evt_wrôe
->
d©a
))

269 
	`c⁄n_∑øms_√gŸüti⁄
();

273 
uöt32_t
 
îr_code
;

276 
îr_code
 = 
	`≠p_timî_°›
(
m_c⁄n_∑øms_timî_id
);

277 i‡((
îr_code
 !
NRF_SUCCESS
Ë&& (
m_c⁄n_∑øms_c⁄fig
.
îr‹_h™dÀr
 !
NULL
))

279 
m_c⁄n_∑øms_c⁄fig
.
	`îr‹_h™dÀr
(
îr_code
);

283 
	}
}

286 
	$⁄_c⁄n_∑øms_upd©e
(
bÀ_evt_t
 * 
p_bÀ_evt
)

289 
m_cuºít_c⁄n_∑øms
 = 
p_bÀ_evt
->
evt
.
g≠_evt
.
∑øms
.
c⁄n_∑øm_upd©e
.
c⁄n_∑øms
;

291 
	`c⁄n_∑øms_√gŸüti⁄
();

292 
	}
}

295 
	$bÀ_c⁄n_∑øms_⁄_bÀ_evt
(
bÀ_evt_t
 * 
p_bÀ_evt
)

297 
p_bÀ_evt
->
hódî
.
evt_id
)

299 
BLE_GAP_EVT_CONNECTED
:

300 
	`⁄_c⁄√˘
(
p_bÀ_evt
);

303 
BLE_GAP_EVT_DISCONNECTED
:

304 
	`⁄_disc⁄√˘
(
p_bÀ_evt
);

307 
BLE_GATTS_EVT_WRITE
:

308 
	`⁄_wrôe
(
p_bÀ_evt
);

311 
BLE_GAP_EVT_CONN_PARAM_UPDATE
:

312 
	`⁄_c⁄n_∑øms_upd©e
(
p_bÀ_evt
);

319 
	}
}

322 
uöt32_t
 
	$bÀ_c⁄n_∑øms_ch™ge_c⁄n_∑øms
(
bÀ_g≠_c⁄n_∑øms_t
 * 
√w_∑øms
)

324 
uöt32_t
 
îr_code
;

326 
m_¥e„ºed_c⁄n_∑øms
 = *
√w_∑øms
;

328 
îr_code
 = 
	`sd_bÀ_g≠_µ˝_£t
(&
m_¥e„ºed_c⁄n_∑øms
);

329 i‡(
îr_code
 =
NRF_SUCCESS
)

331 i‡(!
	`is_c⁄n_∑øms_ok
(&
m_cuºít_c⁄n_∑øms
))

333 
m_ch™ge_∑øm
 = 
åue
;

334 
îr_code
 = 
	`sd_bÀ_g≠_c⁄n_∑øm_upd©e
(
m_c⁄n_h™dÀ
, &
m_¥e„ºed_c⁄n_∑øms
);

335 
m_upd©e_cou¡
 = 1;

340 i‡(
m_c⁄n_∑øms_c⁄fig
.
evt_h™dÀr
 !
NULL
)

342 
bÀ_c⁄n_∑øms_evt_t
 
evt
;

344 
evt
.
evt_ty≥
 = 
BLE_CONN_PARAMS_EVT_SUCCEEDED
;

345 
m_c⁄n_∑øms_c⁄fig
.
	`evt_h™dÀr
(&
evt
);

347 
îr_code
 = 
NRF_SUCCESS
;

350  
îr_code
;

351 
	}
}

	@D:\Private\Programing\MCU\Nordic\ble_app_template\nRF5_SDK_12.3.0_d7731ad\components\ble\common\ble_conn_state.c

41 
	~"bÀ_c⁄n_°©e.h
"

42 
	~<°dboﬁ.h
>

43 
	~<°döt.h
>

44 
	~<°rög.h
>

45 
	~"bÀ.h
"

46 
	~"sdk_m≠≥d_Êags.h
"

47 
	~"≠p_îr‹.h
"

50 #i‡
deföed
(
__CC_ARM
)

51 #¥agm®
push


52 #¥agm®
™⁄_uni⁄s


53 #ñi‡
deföed
(
__ICCARM__
)

54 #¥agm®
œnguage
=
exãnded


55 #ñi‡
deföed
(
__GNUC__
)

60 
	#BLE_CONN_STATE_N_DEFAULT_FLAGS
 5

	)

61 
	#BLE_CONN_STATE_N_FLAGS
 (
BLE_CONN_STATE_N_DEFAULT_FLAGS
 + 
BLE_CONN_STATE_N_USER_FLAGS
Ë

	)

68 
sdk_m≠≥d_Êags_t
 
	mvÆid_Êags
;

69 
sdk_m≠≥d_Êags_t
 
	mc⁄√˘ed_Êags
;

70 
sdk_m≠≥d_Êags_t
 
	m˚¡øl_Êags
;

71 
sdk_m≠≥d_Êags_t
 
	mí¸y±ed_Êags
;

72 
sdk_m≠≥d_Êags_t
 
	mmôm_¥Ÿe˘ed_Êags
;

73 
sdk_m≠≥d_Êags_t
 
	mu£r_Êags
[
BLE_CONN_STATE_N_USER_FLAGS
];

74 } 
	tbÀ_c⁄n_°©e_Êag_cﬁÀ˘i⁄s_t
;

81 
uöt32_t
 
	macquúed_Êags
;

82 
uöt16_t
 
	mvÆid_c⁄n_h™dÀs
[
SDK_MAPPED_FLAGS_N_KEYS
];

85 
bÀ_c⁄n_°©e_Êag_cﬁÀ˘i⁄s_t
 
	mÊags
;

86 
sdk_m≠≥d_Êags_t
 
	mÊag_¨øy
[
BLE_CONN_STATE_N_FLAGS
];

88 } 
	tbÀ_c⁄n_°©e_t
;

91 #i‡
deföed
(
__CC_ARM
)

92 #¥agm®
p›


93 #ñi‡
deföed
(
__ICCARM__
)

95 #ñi‡
deföed
(
__GNUC__
)

100 
bÀ_c⁄n_°©e_t
 
	gm_bcs
 = {0};

105 
	$bcs_öã∫Æ_°©e_ª£t
()

107 
	`mem£t
–&
m_bcs
, 0, (
bÀ_c⁄n_°©e_t
) );

108 
	}
}

119 
boﬁ
 
	$ªc‹d_a˘iv©e
(
uöt16_t
 
c⁄n_h™dÀ
)

121 
uöt16_t
 
avaûabÀ_ödex
 = 
	`sdk_m≠≥d_Êags_fú°_key_ödex_gë
(~
m_bcs
.
Êags
.
vÆid_Êags
);

123 i‡(
avaûabÀ_ödex
 !
SDK_MAPPED_FLAGS_INVALID_INDEX
)

125 
m_bcs
.
vÆid_c⁄n_h™dÀs
[
avaûabÀ_ödex
] = 
c⁄n_h™dÀ
;

126 
	`sdk_m≠≥d_Êags_upd©e_by_key
(
m_bcs
.
vÆid_c⁄n_h™dÀs
,

127 &
m_bcs
.
Êags
.
c⁄√˘ed_Êags
,

128 
c⁄n_h™dÀ
,

130 
	`sdk_m≠≥d_Êags_upd©e_by_key
(
m_bcs
.
vÆid_c⁄n_h™dÀs
,

131 &
m_bcs
.
Êags
.
vÆid_Êags
,

132 
c⁄n_h™dÀ
,

135  
åue
;

138  
Ál£
;

139 
	}
}

146 
	$ªc‹d_övÆid©e
(
uöt16_t
 
c⁄n_h™dÀ
)

148 
	`sdk_m≠≥d_Êags_bulk_upd©e_by_key
(
m_bcs
.
vÆid_c⁄n_h™dÀs
,

149 
m_bcs
.
Êag_¨øy
,

150 
BLE_CONN_STATE_N_FLAGS
,

151 
c⁄n_h™dÀ
,

153 
	}
}

160 
	$ªc‹d_£t_disc⁄√˘ed
(
uöt16_t
 
c⁄n_h™dÀ
)

162 
	`sdk_m≠≥d_Êags_upd©e_by_key
(
m_bcs
.
vÆid_c⁄n_h™dÀs
,

163 &
m_bcs
.
Êags
.
c⁄√˘ed_Êags
,

164 
c⁄n_h™dÀ
,

166 
	}
}

172 
	$ªc‹d_purge_disc⁄√˘ed
()

174 
sdk_m≠≥d_Êags_key_li°_t
 
disc⁄√˘ed_li°
;

176 
disc⁄√˘ed_li°
 = 
	`sdk_m≠≥d_Êags_key_li°_gë
(

177 
m_bcs
.
vÆid_c⁄n_h™dÀs
,

178 (~
m_bcs
.
Êags
.
c⁄√˘ed_Êags
Ë& (m_bcs.Êags.
vÆid_Êags
));

180 
uöt32_t
 
i
 = 0; i < 
disc⁄√˘ed_li°
.
Àn
; i++)

182 
	`ªc‹d_övÆid©e
(
disc⁄√˘ed_li°
.
Êag_keys
[
i
]);

184 
	}
}

193 
boﬁ
 
	$u£r_Êag_is_acquúed
(
bÀ_c⁄n_°©e_u£r_Êag_id_t
 
Êag_id
)

195  ((
m_bcs
.
acquúed_Êags
 & (1 << 
Êag_id
)) != 0);

196 
	}
}

203 
	$u£r_Êag_acquúe
(
bÀ_c⁄n_°©e_u£r_Êag_id_t
 
Êag_id
)

205 
m_bcs
.
acquúed_Êags
 |(1 << 
Êag_id
);

206 
	}
}

209 
	$bÀ_c⁄n_°©e_öô
()

211 
	`bcs_öã∫Æ_°©e_ª£t
();

212 
	}
}

215 
	$bÀ_c⁄n_°©e_⁄_bÀ_evt
(
bÀ_evt_t
 * 
p_bÀ_evt
)

217 
p_bÀ_evt
->
hódî
.
evt_id
)

219 
BLE_GAP_EVT_CONNECTED
:

220 
	`ªc‹d_purge_disc⁄√˘ed
();

222 i‡–!
	`ªc‹d_a˘iv©e
(
p_bÀ_evt
->
evt
.
g≠_evt
.
c⁄n_h™dÀ
) )

225 
	`APP_ERROR_HANDLER
(
NRF_ERROR_NO_MEM
);

229 
boﬁ
 
is_˚¡øl
 =

230 (
p_bÀ_evt
->
evt
.
g≠_evt
.
∑øms
.
c⁄√˘ed
.
rﬁe
 =
BLE_GAP_ROLE_CENTRAL
);

232 
	`sdk_m≠≥d_Êags_upd©e_by_key
(
m_bcs
.
vÆid_c⁄n_h™dÀs
,

233 &
m_bcs
.
Êags
.
˚¡øl_Êags
,

234 
p_bÀ_evt
->
evt
.
g≠_evt
.
c⁄n_h™dÀ
,

235 
is_˚¡øl
);

240 
BLE_GAP_EVT_DISCONNECTED
:

241 
	`ªc‹d_£t_disc⁄√˘ed
(
p_bÀ_evt
->
evt
.
g≠_evt
.
c⁄n_h™dÀ
);

244 
BLE_GAP_EVT_CONN_SEC_UPDATE
:

245 
	`sdk_m≠≥d_Êags_upd©e_by_key
(

246 
m_bcs
.
vÆid_c⁄n_h™dÀs
,

247 &
m_bcs
.
Êags
.
í¸y±ed_Êags
,

248 
p_bÀ_evt
->
evt
.
g≠_evt
.
c⁄n_h™dÀ
,

249 (
p_bÀ_evt
->
evt
.
g≠_evt
.
∑øms
.
c⁄n_£c_upd©e
.
c⁄n_£c
.
£c_mode
.
lv
 > 1));

250 
	`sdk_m≠≥d_Êags_upd©e_by_key
(

251 
m_bcs
.
vÆid_c⁄n_h™dÀs
,

252 &
m_bcs
.
Êags
.
môm_¥Ÿe˘ed_Êags
,

253 
p_bÀ_evt
->
evt
.
g≠_evt
.
c⁄n_h™dÀ
,

254 (
p_bÀ_evt
->
evt
.
g≠_evt
.
∑øms
.
c⁄n_£c_upd©e
.
c⁄n_£c
.
£c_mode
.
lv
 > 2));

257 
	}
}

260 
boﬁ
 
	$bÀ_c⁄n_°©e_vÆid
(
uöt16_t
 
c⁄n_h™dÀ
)

262  
	`sdk_m≠≥d_Êags_gë_by_key
(
m_bcs
.
vÆid_c⁄n_h™dÀs
,

263 
m_bcs
.
Êags
.
vÆid_Êags
,

264 
c⁄n_h™dÀ
);

265 
	}
}

268 
uöt8_t
 
	$bÀ_c⁄n_°©e_rﬁe
(
uöt16_t
 
c⁄n_h™dÀ
)

270 
uöt8_t
 
rﬁe
 = 
BLE_GAP_ROLE_INVALID
;

272 i‡–
	`sdk_m≠≥d_Êags_gë_by_key
(
m_bcs
.
vÆid_c⁄n_h™dÀs
, m_bcs.
Êags
.
vÆid_Êags
, 
c⁄n_h™dÀ
) )

274 
boﬁ
 
˚¡øl
 = 
	`sdk_m≠≥d_Êags_gë_by_key
(
m_bcs
.
vÆid_c⁄n_h™dÀs
,

275 
m_bcs
.
Êags
.
˚¡øl_Êags
,

276 
c⁄n_h™dÀ
);

278 
rﬁe
 = 
˚¡øl
 ? 
BLE_GAP_ROLE_CENTRAL
 : 
BLE_GAP_ROLE_PERIPH
;

281  
rﬁe
;

282 
	}
}

285 
bÀ_c⁄n_°©e_°©us_t
 
	$bÀ_c⁄n_°©e_°©us
(
uöt16_t
 
c⁄n_h™dÀ
)

287 
bÀ_c⁄n_°©e_°©us_t
 
c⁄n_°©us
 = 
BLE_CONN_STATUS_INVALID
;

288 
boﬁ
 
vÆid
 = 
	`sdk_m≠≥d_Êags_gë_by_key
(
m_bcs
.
vÆid_c⁄n_h™dÀs
,

289 
m_bcs
.
Êags
.
vÆid_Êags
,

290 
c⁄n_h™dÀ
);

292 i‡(
vÆid
)

294 
boﬁ
 
c⁄√˘ed
 = 
	`sdk_m≠≥d_Êags_gë_by_key
(
m_bcs
.
vÆid_c⁄n_h™dÀs
,

295 
m_bcs
.
Êags
.
c⁄√˘ed_Êags
,

296 
c⁄n_h™dÀ
);

298 
c⁄n_°©us
 = 
c⁄√˘ed
 ? 
BLE_CONN_STATUS_CONNECTED
 : 
BLE_CONN_STATUS_DISCONNECTED
;

301  
c⁄n_°©us
;

302 
	}
}

305 
boﬁ
 
	$bÀ_c⁄n_°©e_í¸y±ed
(
uöt16_t
 
c⁄n_h™dÀ
)

307  
	`sdk_m≠≥d_Êags_gë_by_key
(
m_bcs
.
vÆid_c⁄n_h™dÀs
,

308 
m_bcs
.
Êags
.
í¸y±ed_Êags
,

309 
c⁄n_h™dÀ
);

310 
	}
}

313 
boﬁ
 
	$bÀ_c⁄n_°©e_môm_¥Ÿe˘ed
(
uöt16_t
 
c⁄n_h™dÀ
)

315  
	`sdk_m≠≥d_Êags_gë_by_key
(
m_bcs
.
vÆid_c⁄n_h™dÀs
,

316 
m_bcs
.
Êags
.
môm_¥Ÿe˘ed_Êags
,

317 
c⁄n_h™dÀ
);

318 
	}
}

321 
uöt32_t
 
	$bÀ_c⁄n_°©e_n_c⁄√˘i⁄s
()

323  
	`sdk_m≠≥d_Êags_n_Êags_£t
(
m_bcs
.
Êags
.
c⁄√˘ed_Êags
);

324 
	}
}

327 
uöt32_t
 
	$bÀ_c⁄n_°©e_n_˚¡øls
()

329  
	`sdk_m≠≥d_Êags_n_Êags_£t
((
m_bcs
.
Êags
.
˚¡øl_Êags
Ë& (m_bcs.Êags.
c⁄√˘ed_Êags
));

330 
	}
}

333 
uöt32_t
 
	$bÀ_c⁄n_°©e_n_≥rùhîÆs
()

335  
	`sdk_m≠≥d_Êags_n_Êags_£t
((~
m_bcs
.
Êags
.
˚¡øl_Êags
Ë& (m_bcs.Êags.
c⁄√˘ed_Êags
));

336 
	}
}

339 
sdk_m≠≥d_Êags_key_li°_t
 
	$bÀ_c⁄n_°©e_c⁄n_h™dÀs
()

341  
	`sdk_m≠≥d_Êags_key_li°_gë
(
m_bcs
.
vÆid_c⁄n_h™dÀs
, m_bcs.
Êags
.
vÆid_Êags
);

342 
	}
}

345 
sdk_m≠≥d_Êags_key_li°_t
 
	$bÀ_c⁄n_°©e_˚¡øl_h™dÀs
()

347  
	`sdk_m≠≥d_Êags_key_li°_gë
(
m_bcs
.
vÆid_c⁄n_h™dÀs
,

348 (
m_bcs
.
Êags
.
˚¡øl_Êags
Ë& (m_bcs.Êags.
c⁄√˘ed_Êags
));

349 
	}
}

352 
sdk_m≠≥d_Êags_key_li°_t
 
	$bÀ_c⁄n_°©e_≥rùh_h™dÀs
()

354  
	`sdk_m≠≥d_Êags_key_li°_gë
(
m_bcs
.
vÆid_c⁄n_h™dÀs
,

355 (~
m_bcs
.
Êags
.
˚¡øl_Êags
Ë& (m_bcs.Êags.
c⁄√˘ed_Êags
));

356 
	}
}

359 
bÀ_c⁄n_°©e_u£r_Êag_id_t
 
	$bÀ_c⁄n_°©e_u£r_Êag_acquúe
()

361 
bÀ_c⁄n_°©e_u£r_Êag_id_t
 
i
 = 
BLE_CONN_STATE_USER_FLAG0
;

362 
i
 < 
BLE_CONN_STATE_N_USER_FLAGS
;

363 
i
++)

365 i‡–!
	`u£r_Êag_is_acquúed
(
i
) )

367 
	`u£r_Êag_acquúe
(
i
);

368  
i
;

372  
BLE_CONN_STATE_USER_FLAG_INVALID
;

373 
	}
}

376 
boﬁ
 
	$bÀ_c⁄n_°©e_u£r_Êag_gë
(
uöt16_t
 
c⁄n_h™dÀ
, 
bÀ_c⁄n_°©e_u£r_Êag_id_t
 
Êag_id
)

378 i‡(
	`u£r_Êag_is_acquúed
(
Êag_id
))

380  
	`sdk_m≠≥d_Êags_gë_by_key
(
m_bcs
.
vÆid_c⁄n_h™dÀs
,

381 
m_bcs
.
Êags
.
u£r_Êags
[
Êag_id
],

382 
c⁄n_h™dÀ
);

386  
Ál£
;

388 
	}
}

391 
	$bÀ_c⁄n_°©e_u£r_Êag_£t
(
uöt16_t
 
c⁄n_h™dÀ
,

392 
bÀ_c⁄n_°©e_u£r_Êag_id_t
 
Êag_id
,

393 
boﬁ
 
vÆue
)

395 i‡(
	`u£r_Êag_is_acquúed
(
Êag_id
))

397 
	`sdk_m≠≥d_Êags_upd©e_by_key
(
m_bcs
.
vÆid_c⁄n_h™dÀs
,

398 &
m_bcs
.
Êags
.
u£r_Êags
[
Êag_id
],

399 
c⁄n_h™dÀ
,

400 
vÆue
);

402 
	}
}

405 
sdk_m≠≥d_Êags_t
 
	$bÀ_c⁄n_°©e_u£r_Êag_cﬁÀ˘i⁄
(
bÀ_c⁄n_°©e_u£r_Êag_id_t
 
Êag_id
)

407 i‡–
	`u£r_Êag_is_acquúed
(
Êag_id
) )

409  
m_bcs
.
Êags
.
u£r_Êags
[
Êag_id
];

415 
	}
}

	@D:\Private\Programing\MCU\Nordic\ble_app_template\nRF5_SDK_12.3.0_d7731ad\components\ble\common\ble_srv_common.c

46 
	~"bÀ_§v_comm⁄.h
"

47 
	~<°rög.h
>

48 
	~"n‹dic_comm⁄.h
"

49 
	~"≠p_îr‹.h
"

50 
	~"bÀ.h
"

52 
boﬁ
 
	$bÀ_§v_is_nŸifiˇti⁄_íabÀd
(
uöt8_t
 c⁄° * 
p_ícoded_d©a
)

54 
uöt16_t
 
cccd_vÆue
 = 
	`uöt16_decode
(
p_ícoded_d©a
);

55  ((
cccd_vÆue
 & 
BLE_GATT_HVX_NOTIFICATION
) != 0);

56 
	}
}

58 
boﬁ
 
	$bÀ_§v_is_ödiˇti⁄_íabÀd
(
uöt8_t
 c⁄° * 
p_ícoded_d©a
)

60 
uöt16_t
 
cccd_vÆue
 = 
	`uöt16_decode
(
p_ícoded_d©a
);

61  ((
cccd_vÆue
 & 
BLE_GATT_HVX_INDICATION
) != 0);

62 
	}
}

64 
uöt8_t
 
	$bÀ_§v_ªp‹t_ªf_ícode
(
uöt8_t
 * 
p_ícoded_buf„r
,

65 c⁄° 
bÀ_§v_ªp‹t_ªf_t
 * 
p_ªp‹t_ªf
)

67 
uöt8_t
 
Àn
 = 0;

69 
p_ícoded_buf„r
[
Àn
++] = 
p_ªp‹t_ªf
->
ªp‹t_id
;

70 
p_ícoded_buf„r
[
Àn
++] = 
p_ªp‹t_ªf
->
ªp‹t_ty≥
;

72 
	`APP_ERROR_CHECK_BOOL
(
Àn
 =
BLE_SRV_ENCODED_REPORT_REF_LEN
);

73  
Àn
;

74 
	}
}

77 
	$bÀ_§v_ascii_to_utf8
(
bÀ_§v_utf8_°r_t
 * 
p_utf8
, * 
p_ascii
)

79 
p_utf8
->
Àngth
 = (
uöt16_t
)
	`°æí
(
p_ascii
);

80 
p_utf8
->
p_°r
 = (
uöt8_t
 *)
p_ascii
;

81 
	}
}

91 
ölöe
 
	$£t_£curôy_ªq
(
£curôy_ªq_t
 
Àvñ
, 
bÀ_g≠_c⁄n_£c_mode_t
 * 
p_≥rm
)

95 
	`BLE_GAP_CONN_SEC_MODE_SET_NO_ACCESS
(
p_≥rm
);

96 
Àvñ
)

98 
SEC_NO_ACCESS
:

99 
	`BLE_GAP_CONN_SEC_MODE_SET_NO_ACCESS
(
p_≥rm
);

101 
SEC_OPEN
:

102 
	`BLE_GAP_CONN_SEC_MODE_SET_OPEN
(
p_≥rm
);

104 
SEC_JUST_WORKS
:

105 
	`BLE_GAP_CONN_SEC_MODE_SET_ENC_NO_MITM
(
p_≥rm
);

107 
SEC_MITM
:

108 
	`BLE_GAP_CONN_SEC_MODE_SET_ENC_WITH_MITM
(
p_≥rm
);

110 
SEC_SIGNED
:

111 
	`BLE_GAP_CONN_SEC_MODE_SET_SIGNED_NO_MITM
(
p_≥rm
);

113 
SEC_SIGNED_MITM
:

114 
	`BLE_GAP_CONN_SEC_MODE_SET_SIGNED_WITH_MITM
(
p_≥rm
);

118 
	}
}

121 
uöt32_t
 
	$ch¨a˘îi°ic_add
(
uöt16_t
 
£rvi˚_h™dÀ
,

122 
bÀ_add_ch¨_∑øms_t
 * 
p_ch¨_¥›s
,

123 
bÀ_g©ts_ch¨_h™dÀs_t
 * 
p_ch¨_h™dÀ
)

125 
bÀ_g©ts_ch¨_md_t
 
ch¨_md
;

126 
bÀ_g©ts_©å_t
 
©å_ch¨_vÆue
;

127 
bÀ_uuid_t
 
ch¨_uuid
;

128 
bÀ_g©ts_©å_md_t
 
©å_md
;

129 
bÀ_g©ts_©å_md_t
 
u£r_des¸_©å_md
;

130 
bÀ_g©ts_©å_md_t
 
cccd_md
;

132 i‡(
p_ch¨_¥›s
->
uuid_ty≥
 == 0)

134 
ch¨_uuid
.
ty≥
 = 
BLE_UUID_TYPE_BLE
;

138 
ch¨_uuid
.
ty≥
 = 
p_ch¨_¥›s
->
uuid_ty≥
;

140 
ch¨_uuid
.
uuid
 = 
p_ch¨_¥›s
->uuid;

142 
	`mem£t
(&
©å_md
, 0, (
bÀ_g©ts_©å_md_t
));

143 
	`£t_£curôy_ªq
(
p_ch¨_¥›s
->
ªad_ac˚ss
, &
©å_md
.
ªad_≥rm
);

144 
	`£t_£curôy_ªq
(
p_ch¨_¥›s
->
wrôe_ac˚ss
, & 
©å_md
.
wrôe_≥rm
);

145 
©å_md
.
rd_auth
 = (
p_ch¨_¥›s
->
is_de„ªd_ªad
 ? 1 : 0);

146 
©å_md
.
wr_auth
 = (
p_ch¨_¥›s
->
is_de„ªd_wrôe
 ? 1 : 0);

147 
©å_md
.
vÀn
 = (
p_ch¨_¥›s
->
is_v¨_Àn
 ? 1 : 0);

148 
©å_md
.
vloc
 = (
p_ch¨_¥›s
->
is_vÆue_u£r
 ? 
BLE_GATTS_VLOC_USER
 : 
BLE_GATTS_VLOC_STACK
);

151 
	`mem£t
(&
ch¨_md
, 0, (
bÀ_g©ts_ch¨_md_t
));

152 i‡((
p_ch¨_¥›s
->
ch¨_¥›s
.
nŸify
 =1)||’_ch¨_¥›s->ch¨_¥›s.
ödiˇã
 == 1))

155 
	`mem£t
(&
cccd_md
, 0, (cccd_md));

156 
	`£t_£curôy_ªq
(
p_ch¨_¥›s
->
cccd_wrôe_ac˚ss
, &
cccd_md
.
wrôe_≥rm
);

157 
	`BLE_GAP_CONN_SEC_MODE_SET_OPEN
(&
cccd_md
.
ªad_≥rm
);

159 
cccd_md
.
vloc
 = 
BLE_GATTS_VLOC_STACK
;

161 
ch¨_md
.
p_cccd_md
 = &
cccd_md
;

163 
ch¨_md
.
ch¨_¥›s
 = 
p_ch¨_¥›s
->char_props;

164 
ch¨_md
.
ch¨_ext_¥›s
 = 
p_ch¨_¥›s
->char_ext_props;

166 
	`mem£t
(&
©å_ch¨_vÆue
, 0, (
bÀ_g©ts_©å_t
));

167 
©å_ch¨_vÆue
.
p_uuid
 = &
ch¨_uuid
;

168 
©å_ch¨_vÆue
.
p_©å_md
 = &
©å_md
;

169 
©å_ch¨_vÆue
.
max_Àn
 = 
p_ch¨_¥›s
->max_len;

170 i‡(
p_ch¨_¥›s
->
p_öô_vÆue
 !
NULL
)

172 
©å_ch¨_vÆue
.
öô_Àn
 = 
p_ch¨_¥›s
->init_len;

173 
©å_ch¨_vÆue
.
p_vÆue
 = 
p_ch¨_¥›s
->
p_öô_vÆue
;

175 i‡(
p_ch¨_¥›s
->
p_u£r_des¸
 !
NULL
)

177 
	`mem£t
(&
u£r_des¸_©å_md
, 0, (
bÀ_g©ts_©å_md_t
));

178 
ch¨_md
.
ch¨_u£r_desc_max_size
 = 
p_ch¨_¥›s
->
p_u£r_des¸
->
max_size
;

179 
ch¨_md
.
ch¨_u£r_desc_size
 = 
p_ch¨_¥›s
->
p_u£r_des¸
->
size
;

180 
ch¨_md
.
p_ch¨_u£r_desc
 = 
p_ch¨_¥›s
->
p_u£r_des¸
->p_char_user_desc;

182 
ch¨_md
.
p_u£r_desc_md
 = &
u£r_des¸_©å_md
;

184 
	`£t_£curôy_ªq
(
p_ch¨_¥›s
->
p_u£r_des¸
->
ªad_ac˚ss
, &
u£r_des¸_©å_md
.
ªad_≥rm
);

185 
	`£t_£curôy_ªq
(
p_ch¨_¥›s
->
p_u£r_des¸
->
wrôe_ac˚ss
, &
u£r_des¸_©å_md
.
wrôe_≥rm
);

187 
u£r_des¸_©å_md
.
rd_auth
 = (
p_ch¨_¥›s
->
p_u£r_des¸
->
is_de„ªd_ªad
 ? 1 : 0);

188 
u£r_des¸_©å_md
.
wr_auth
 = (
p_ch¨_¥›s
->
p_u£r_des¸
->
is_de„ªd_wrôe
 ? 1 : 0);

189 
u£r_des¸_©å_md
.
vÀn
 = (
p_ch¨_¥›s
->
p_u£r_des¸
->
is_v¨_Àn
 ? 1 : 0);

190 
u£r_des¸_©å_md
.
vloc
 = (
p_ch¨_¥›s
->
p_u£r_des¸
->
is_vÆue_u£r
 ? 
BLE_GATTS_VLOC_USER
 : 
BLE_GATTS_VLOC_STACK
);

192 i‡(
p_ch¨_¥›s
->
p_¥e£¡©i⁄_f‹m©
 !
NULL
)

194 
ch¨_md
.
p_ch¨_pf
 = 
p_ch¨_¥›s
->
p_¥e£¡©i⁄_f‹m©
;

196  
	`sd_bÀ_g©ts_ch¨a˘îi°ic_add
(
£rvi˚_h™dÀ
,

197 &
ch¨_md
,

198 &
©å_ch¨_vÆue
,

199 
p_ch¨_h™dÀ
);

200 
	}
}

203 
uöt32_t
 
	$des¸ùt‹_add
(
uöt16_t
 
ch¨_h™dÀ
,

204 
bÀ_add_des¸_∑øms_t
 * 
p_des¸_¥›s
,

205 
uöt16_t
 * 
p_des¸_h™dÀ
)

207 
bÀ_g©ts_©å_t
 
des¸_∑øms
;

208 
bÀ_uuid_t
 
desc_uuid
;

209 
bÀ_g©ts_©å_md_t
 
©å_md
;

211 
	`mem£t
(&
des¸_∑øms
, 0, (descr_params));

212 i‡(
p_des¸_¥›s
->
uuid_ty≥
 == 0)

214 
desc_uuid
.
ty≥
 = 
BLE_UUID_TYPE_BLE
;

218 
desc_uuid
.
ty≥
 = 
p_des¸_¥›s
->
uuid_ty≥
;

220 
desc_uuid
.
uuid
 = 
p_des¸_¥›s
->uuid;

221 
des¸_∑øms
.
p_uuid
 = &
desc_uuid
;

223 
	`£t_£curôy_ªq
(
p_des¸_¥›s
->
ªad_ac˚ss
, &
©å_md
.
ªad_≥rm
);

224 
	`£t_£curôy_ªq
(
p_des¸_¥›s
->
wrôe_ac˚ss
,&
©å_md
.
wrôe_≥rm
);

226 
©å_md
.
rd_auth
 = (
p_des¸_¥›s
->
is_de„ªd_ªad
 ? 1 : 0);

227 
©å_md
.
wr_auth
 = (
p_des¸_¥›s
->
is_de„ªd_wrôe
 ? 1 : 0);

228 
©å_md
.
vÀn
 = (
p_des¸_¥›s
->
is_v¨_Àn
 ? 1 : 0);

229 
©å_md
.
vloc
 = (
p_des¸_¥›s
->
is_vÆue_u£r
 ? 
BLE_GATTS_VLOC_USER
 : 
BLE_GATTS_VLOC_STACK
);

230 
des¸_∑øms
.
p_©å_md
 = &
©å_md
;

232 
des¸_∑øms
.
öô_Àn
 = 
p_des¸_¥›s
->init_len;

233 
des¸_∑øms
.
öô_offs
 = 
p_des¸_¥›s
->init_offs;

234 
des¸_∑øms
.
max_Àn
 = 
p_des¸_¥›s
->max_len;

235 
des¸_∑øms
.
p_vÆue
 = 
p_des¸_¥›s
->p_value;

237  
	`sd_bÀ_g©ts_des¸ùt‹_add
(
ch¨_h™dÀ
, &
des¸_∑øms
, 
p_des¸_h™dÀ
);

238 
	}
}

	@D:\Private\Programing\MCU\Nordic\ble_app_template\nRF5_SDK_12.3.0_d7731ad\components\ble\peer_manager\gatt_cache_manager.c

41 
	~"sdk_comm⁄.h
"

42 #i‡
NRF_MODULE_ENABLED
(
PEER_MANAGER
)

43 
	~"g©t_ˇche_m™agî.h
"

45 
	~"bÀ_g≠.h
"

46 
	~"bÀ_c⁄n_°©e.h
"

47 
	~"≥î_m™agî_ty≥s.h
"

48 
	~"≥î_m™agî_öã∫Æ.h
"

49 
	~"id_m™agî.h
"

50 
	~"£curôy_di•©chî.h
"

51 
	~"g©ts_ˇche_m™agî.h
"

55 
	#GCM_EVENT_HANDLERS_CNT
 ((
m_evt_h™dÀrs
Ë/ (m_evt_h™dÀrs[0]))

	)

58 
pm_gcm_evt_h™dÀr
(
gcm_evt_t
 c⁄° * 
p_gcm_evt
);

62 
gcm_evt_h™dÀr_t
 
	gm_evt_h™dÀrs
[] =

64 
pm_gcm_evt_h™dÀr


67 
boﬁ
 
	gm_moduÀ_öôülized
;

68 
bÀ_c⁄n_°©e_u£r_Êag_id_t
 
	gm_Êag_loˇl_db_upd©e_≥ndög
;

69 
bÀ_c⁄n_°©e_u£r_Êag_id_t
 
	gm_Êag_loˇl_db_≠∂y_≥ndög
;

70 
bÀ_c⁄n_°©e_u£r_Êag_id_t
 
	gm_Êag_£rvi˚_ch™ged_≥ndög
;

71 
bÀ_c⁄n_°©e_u£r_Êag_id_t
 
	gm_Êag_£rvi˚_ch™ged_£¡
;

74 
£rvi˚_ch™ged_≥ndög_Êags_check
();

81 
	$öã∫Æ_°©e_ª£t
()

83 
m_moduÀ_öôülized
 = 
Ál£
;

84 
	}
}

87 
	$evt_£nd
(
gcm_evt_t
 c⁄° * 
p_gcm_evt
)

89 
uöt32_t
 
i
 = 0; i < 
GCM_EVENT_HANDLERS_CNT
; i++)

91 
m_evt_h™dÀrs
[
i
](
p_gcm_evt
);

93 
	}
}

103 
boﬁ
 
	$cccd_wrôãn
(
bÀ_g©ts_evt_wrôe_t
 * 
p_wrôe_evt
)

105  ( (
p_wrôe_evt
->
›
 =
BLE_GATTS_OP_WRITE_REQ
)

106 && (
p_wrôe_evt
->
uuid
.
ty≥
 =
BLE_UUID_TYPE_BLE
)

107 && (
p_wrôe_evt
->
uuid
.uuid =
BLE_UUID_DESCRIPTOR_CLIENT_CHAR_CONFIG
)

109 
	}
}

120 
	$loˇl_db_≠∂y_ö_evt
(
uöt16_t
 
c⁄n_h™dÀ
)

122 
boﬁ
 
£t_¥o˚duª_as_≥ndög
 = 
Ál£
;

123 
ªt_code_t
 
îr_code
;

124 
gcm_evt_t
 
evít
;

126 i‡(
c⁄n_h™dÀ
 =
BLE_CONN_HANDLE_INVALID
)

131 
îr_code
 = 
	`gscm_loˇl_db_ˇche_≠∂y
(
c⁄n_h™dÀ
);

133 
îr_code
)

135 
NRF_SUCCESS
:

136 
evít
.
evt_id
 = 
GCM_EVT_LOCAL_DB_CACHE_APPLIED
;

137 
evít
.
≥î_id
 = 
	`im_≥î_id_gë_by_c⁄n_h™dÀ
(
c⁄n_h™dÀ
);

138 
evít
.
∑øms
.
loˇl_db_ˇche_≠∂õd
.
c⁄n_h™dÀ
 = conn_handle;

140 
	`evt_£nd
(&
evít
);

143 
NRF_ERROR_BUSY
:

144 
£t_¥o˚duª_as_≥ndög
 = 
åue
;

147 
NRF_ERROR_INVALID_DATA
:

148 
evít
.
evt_id
 = 
GCM_EVT_ERROR_LOCAL_DB_CACHE_APPLY
;

149 
evít
.
≥î_id
 = 
	`im_≥î_id_gë_by_c⁄n_h™dÀ
(
c⁄n_h™dÀ
);

150 
evít
.
∑øms
.
îr‹_loˇl_db_ˇche_≠∂y
.
c⁄n_h™dÀ
 = conn_handle;

152 
	`evt_£nd
(&
evít
);

155 
BLE_ERROR_INVALID_CONN_HANDLE
:

160 
evít
.
evt_id
 = 
GCM_EVT_ERROR_UNEXPECTED
;

161 
evít
.
≥î_id
 = 
	`im_≥î_id_gë_by_c⁄n_h™dÀ
(
c⁄n_h™dÀ
);

162 
evít
.
∑øms
.
îr‹_u√x≥˘ed
.
c⁄n_h™dÀ
 = conn_handle;

163 
evít
.
∑øms
.
îr‹_u√x≥˘ed
.
îr‹
 = 
îr_code
;

165 
	`evt_£nd
(&
evít
);

169 
	`bÀ_c⁄n_°©e_u£r_Êag_£t
(
c⁄n_h™dÀ
, 
m_Êag_loˇl_db_≠∂y_≥ndög
, 
£t_¥o˚duª_as_≥ndög
);

170 
	}
}

181 
	$loˇl_db_upd©e_ö_evt
(
uöt16_t
 
c⁄n_h™dÀ
)

183 
gcm_evt_t
 
evít
;

184 
boﬁ
 
£t_¥o˚duª_as_≥ndög
 = 
Ál£
;

185 
ªt_code_t
 
îr_code
 = 
	`gscm_loˇl_db_ˇche_upd©e
(
c⁄n_h™dÀ
);

187 
îr_code
)

189 
NRF_SUCCESS
:

190 
evít
.
evt_id
 = 
GCM_EVT_LOCAL_DB_CACHE_UPDATED
;

191 
evít
.
∑øms
.
loˇl_db_ˇche_≠∂õd
.
c⁄n_h™dÀ
 = conn_handle;

192 
evít
.
≥î_id
 = 
	`im_≥î_id_gë_by_c⁄n_h™dÀ
(
c⁄n_h™dÀ
);

194 
	`evt_£nd
(&
evít
);

197 
BLE_ERROR_INVALID_CONN_HANDLE
:

201 
NRF_ERROR_BUSY
:

202 
£t_¥o˚duª_as_≥ndög
 = 
åue
;

205 
NRF_ERROR_DATA_SIZE
:

206 
evít
.
evt_id
 = 
GCM_EVT_ERROR_DATA_SIZE
;

207 
evít
.
∑øms
.
îr‹_d©a_size
.
c⁄n_h™dÀ
 = conn_handle;

208 
evít
.
≥î_id
 = 
	`im_≥î_id_gë_by_c⁄n_h™dÀ
(
c⁄n_h™dÀ
);

210 
	`evt_£nd
(&
evít
);

213 
NRF_ERROR_STORAGE_FULL
:

214 
evít
.
evt_id
 = 
GCM_EVT_ERROR_STORAGE_FULL
;

215 
evít
.
∑øms
.
îr‹_no_mem
.
c⁄n_h™dÀ
 = conn_handle;

216 
evít
.
≥î_id
 = 
	`im_≥î_id_gë_by_c⁄n_h™dÀ
(
c⁄n_h™dÀ
);

218 
	`evt_£nd
(&
evít
);

222 
evít
.
evt_id
 = 
GCM_EVT_ERROR_UNEXPECTED
;

223 
evít
.
≥î_id
 = 
	`im_≥î_id_gë_by_c⁄n_h™dÀ
(
c⁄n_h™dÀ
);

224 
evít
.
∑øms
.
îr‹_u√x≥˘ed
.
c⁄n_h™dÀ
 = conn_handle;

225 
evít
.
∑øms
.
îr‹_u√x≥˘ed
.
îr‹
 = 
îr_code
;

227 
	`evt_£nd
(&
evít
);

231 
	`bÀ_c⁄n_°©e_u£r_Êag_£t
(
c⁄n_h™dÀ
, 
m_Êag_loˇl_db_upd©e_≥ndög
, 
£t_¥o˚duª_as_≥ndög
);

232 
	}
}

243 
	$£rvi˚_ch™ged_£nd_ö_evt
(
uöt16_t
 
c⁄n_h™dÀ
)

245 
gcm_evt_t
 
evít
;

246 
boﬁ
 
sc_≥ndög_°©e
 = 
åue
;

247 
boﬁ
 
sc_£¡_°©e
 = 
Ál£
;

248 
ªt_code_t
 
îr_code
 = 
	`gscm_£rvi˚_ch™ged_öd_£nd
(
c⁄n_h™dÀ
);

250 
îr_code
)

252 
NRF_SUCCESS
:

253 
sc_£¡_°©e
 = 
åue
;

255 
evít
.
evt_id
 = 
GCM_EVT_SERVICE_CHANGED_IND_SENT
;

256 
evít
.
≥î_id
 = 
	`im_≥î_id_gë_by_c⁄n_h™dÀ
(
c⁄n_h™dÀ
);

257 
evít
.
∑øms
.
£rvi˚_ch™ged_öd_£¡
.
c⁄n_h™dÀ
 = conn_handle;

259 
	`evt_£nd
(&
evít
);

262 
NRF_ERROR_BUSY
:

266 
NRF_ERROR_INVALID_STATE
:

270 
NRF_ERROR_NOT_SUPPORTED
:

272 
sc_≥ndög_°©e
 = 
Ál£
;

273 
	`gscm_db_ch™ge_nŸifiˇti⁄_d⁄e
(
	`im_≥î_id_gë_by_c⁄n_h™dÀ
(
c⁄n_h™dÀ
));

276 
BLE_ERROR_GATTS_SYS_ATTR_MISSING
:

277 
	`loˇl_db_≠∂y_ö_evt
(
c⁄n_h™dÀ
);

280 
BLE_ERROR_INVALID_CONN_HANDLE
:

285 
evít
.
evt_id
 = 
GCM_EVT_ERROR_UNEXPECTED
;

286 
evít
.
∑øms
.
îr‹_u√x≥˘ed
.
c⁄n_h™dÀ
 = conn_handle;

287 
evít
.
∑øms
.
îr‹_u√x≥˘ed
.
îr‹
 = 
îr_code
;

288 
evít
.
≥î_id
 = 
	`im_≥î_id_gë_by_c⁄n_h™dÀ
(
c⁄n_h™dÀ
);

290 
	`evt_£nd
(&
evít
);

294 
	`bÀ_c⁄n_°©e_u£r_Êag_£t
(
c⁄n_h™dÀ
, 
m_Êag_£rvi˚_ch™ged_≥ndög
, 
sc_≥ndög_°©e
);

295 
	`bÀ_c⁄n_°©e_u£r_Êag_£t
(
c⁄n_h™dÀ
, 
m_Êag_£rvi˚_ch™ged_£¡
, 
sc_£¡_°©e
);

296 
	}
}

304 
	$gcm_gscm_evt_h™dÀr
(
gscm_evt_t
 c⁄° * 
p_evít
)

306 
gcm_evt_t
 
evít
;

307 
evít
.
≥î_id
 = 
p_evít
->peer_id;

309 
p_evít
->
evt_id
)

311 
GSCM_EVT_LOCAL_DB_CACHE_STORED
:

312 
evít
.
evt_id
 = 
GCM_EVT_LOCAL_DB_CACHE_STORED
;

314 
	`evt_£nd
(&
evít
);

315 
	`loˇl_db_≠∂y_ö_evt
(
	`im_c⁄n_h™dÀ_gë
(
p_evít
->
≥î_id
));

318 
GSCM_EVT_LOCAL_DB_CACHE_UPDATED
:

319 
evít
.
evt_id
 = 
GCM_EVT_LOCAL_DB_CACHE_UPDATED
;

320 
evít
.
∑øms
.
loˇl_db_ˇche_upd©ed
.
c⁄n_h™dÀ
 = 
p_evít
->params.local_db_cache_updated.conn_handle;

322 
	`evt_£nd
(&
evít
);

325 
GSCM_EVT_SC_STATE_STORED
:

326 i‡(
p_evít
->
∑øms
.
sc_°©e_°‹ed
.
°©e
)

328 
uöt16_t
 
c⁄n_h™dÀ
 = 
	`im_c⁄n_h™dÀ_gë
(
p_evít
->
≥î_id
);

329 i‡(
c⁄n_h™dÀ
 !
BLE_CONN_HANDLE_INVALID
)

331 
	`bÀ_c⁄n_°©e_u£r_Êag_£t
(
c⁄n_h™dÀ
, 
m_Êag_£rvi˚_ch™ged_≥ndög
, 
åue
);

332 
	`£rvi˚_ch™ged_≥ndög_Êags_check
();

337 
	}
}

345 
	$gcm_im_evt_h™dÀr
(
im_evt_t
 c⁄° * 
p_evít
)

347 
p_evít
->
evt_id
)

349 
IM_EVT_BONDED_PEER_CONNECTED
:

350 
	`loˇl_db_≠∂y_ö_evt
(
p_evít
->
c⁄n_h™dÀ
);

351 i‡(
	`gscm_£rvi˚_ch™ged_öd_√eded
(
p_evít
->
c⁄n_h™dÀ
))

353 
	`bÀ_c⁄n_°©e_u£r_Êag_£t
(
p_evít
->
c⁄n_h™dÀ
, 
m_Êag_£rvi˚_ch™ged_≥ndög
, 
åue
);

359 
	}
}

367 
	$gcm_smd_evt_h™dÀr
(
smd_evt_t
 c⁄° * 
p_evít
)

369 
p_evít
->
evt_id
)

371 
SMD_EVT_BONDING_INFO_STORED
:

372 
	`loˇl_db_upd©e_ö_evt
(
p_evít
->
c⁄n_h™dÀ
);

377 
	}
}

380 
ªt_code_t
 
	$gcm_öô
()

382 
	`NRF_PM_DEBUG_CHECK
(!
m_moduÀ_öôülized
);

384 
	`öã∫Æ_°©e_ª£t
();

386 
m_Êag_loˇl_db_upd©e_≥ndög
 = 
	`bÀ_c⁄n_°©e_u£r_Êag_acquúe
();

387 
m_Êag_loˇl_db_≠∂y_≥ndög
 = 
	`bÀ_c⁄n_°©e_u£r_Êag_acquúe
();

388 
m_Êag_£rvi˚_ch™ged_≥ndög
 = 
	`bÀ_c⁄n_°©e_u£r_Êag_acquúe
();

389 
m_Êag_£rvi˚_ch™ged_£¡
 = 
	`bÀ_c⁄n_°©e_u£r_Êag_acquúe
();

391 i‡((
m_Êag_loˇl_db_upd©e_≥ndög
 =
BLE_CONN_STATE_USER_FLAG_INVALID
)

392 || (
m_Êag_loˇl_db_≠∂y_≥ndög
 =
BLE_CONN_STATE_USER_FLAG_INVALID
)

393 || (
m_Êag_£rvi˚_ch™ged_≥ndög
 =
BLE_CONN_STATE_USER_FLAG_INVALID
)

394 || (
m_Êag_£rvi˚_ch™ged_£¡
 =
BLE_CONN_STATE_USER_FLAG_INVALID
))

396  
NRF_ERROR_INTERNAL
;

399 
m_moduÀ_öôülized
 = 
åue
;

401  
NRF_SUCCESS
;

402 
	}
}

410 
	$≠∂y_≥ndög_Êags_check
()

412 
sdk_m≠≥d_Êags_t
 
≠∂y_≥ndög_Êags
;

414 
≠∂y_≥ndög_Êags
 = 
	`bÀ_c⁄n_°©e_u£r_Êag_cﬁÀ˘i⁄
(
m_Êag_loˇl_db_≠∂y_≥ndög
);

415 i‡(
	`sdk_m≠≥d_Êags_™y_£t
(
≠∂y_≥ndög_Êags
))

417 
sdk_m≠≥d_Êags_key_li°_t
 
c⁄n_h™dÀ_li°
;

418 
c⁄n_h™dÀ_li°
 = 
	`bÀ_c⁄n_°©e_c⁄n_h™dÀs
();

420 
uöt32_t
 
i
 = 0; i < 
c⁄n_h™dÀ_li°
.
Àn
; i++)

422 i‡(
	`bÀ_c⁄n_°©e_u£r_Êag_gë
(
c⁄n_h™dÀ_li°
.
Êag_keys
[
i
], 
m_Êag_loˇl_db_≠∂y_≥ndög
))

424 
	`loˇl_db_≠∂y_ö_evt
(
c⁄n_h™dÀ_li°
.
Êag_keys
[
i
]);

428 
	}
}

433 
	$upd©e_≥ndög_Êags_check
()

435 
sdk_m≠≥d_Êags_t
 
upd©e_≥ndög_Êags
;

437 
upd©e_≥ndög_Êags
 = 
	`bÀ_c⁄n_°©e_u£r_Êag_cﬁÀ˘i⁄
(
m_Êag_loˇl_db_upd©e_≥ndög
);

438 i‡(
	`sdk_m≠≥d_Êags_™y_£t
(
upd©e_≥ndög_Êags
))

440 
sdk_m≠≥d_Êags_key_li°_t
 
c⁄n_h™dÀ_li°
;

441 
c⁄n_h™dÀ_li°
 = 
	`bÀ_c⁄n_°©e_c⁄n_h™dÀs
();

443 
uöt32_t
 
i
 = 0; i < 
c⁄n_h™dÀ_li°
.
Àn
; i++)

445 i‡(
	`bÀ_c⁄n_°©e_u£r_Êag_gë
(
c⁄n_h™dÀ_li°
.
Êag_keys
[
i
], 
m_Êag_loˇl_db_upd©e_≥ndög
))

447 
	`loˇl_db_upd©e_ö_evt
(
c⁄n_h™dÀ_li°
.
Êag_keys
[
i
]);

451 
	}
}

456 
	$£rvi˚_ch™ged_≥ndög_Êags_check
()

458 
sdk_m≠≥d_Êags_t
 
£rvi˚_ch™ged_≥ndög_Êags
;

460 
£rvi˚_ch™ged_≥ndög_Êags
 = 
	`bÀ_c⁄n_°©e_u£r_Êag_cﬁÀ˘i⁄
(
m_Êag_£rvi˚_ch™ged_≥ndög
);

461 i‡(
	`sdk_m≠≥d_Êags_™y_£t
(
£rvi˚_ch™ged_≥ndög_Êags
))

463 
sdk_m≠≥d_Êags_key_li°_t
 
c⁄n_h™dÀ_li°
;

464 
c⁄n_h™dÀ_li°
 = 
	`bÀ_c⁄n_°©e_c⁄n_h™dÀs
();

466 
uöt32_t
 
i
 = 0; i < 
c⁄n_h™dÀ_li°
.
Àn
; i++)

468 i‡–
	`bÀ_c⁄n_°©e_u£r_Êag_gë
(
c⁄n_h™dÀ_li°
.
Êag_keys
[
i
],

469 
m_Êag_£rvi˚_ch™ged_≥ndög
)

470 && !
	`bÀ_c⁄n_°©e_u£r_Êag_gë
(
c⁄n_h™dÀ_li°
.
Êag_keys
[
i
],

471 
m_Êag_£rvi˚_ch™ged_£¡
))

473 
	`£rvi˚_ch™ged_£nd_ö_evt
(
c⁄n_h™dÀ_li°
.
Êag_keys
[
i
]);

477 
	}
}

484 
	$gcm_bÀ_evt_h™dÀr
(
bÀ_evt_t
 * 
p_bÀ_evt
)

486 
gcm_evt_t
 
evít
;

488 
p_bÀ_evt
->
hódî
.
evt_id
)

490 
BLE_GATTS_EVT_SYS_ATTR_MISSING
:

491 
	`loˇl_db_≠∂y_ö_evt
(
p_bÀ_evt
->
evt
.
g©ts_evt
.
c⁄n_h™dÀ
);

494 
BLE_GATTS_EVT_SC_CONFIRM
:

495 
evít
.
evt_id
 = 
GCM_EVT_SERVICE_CHANGED_IND_CONFIRMED
;

496 
evít
.
≥î_id
 = 
	`im_≥î_id_gë_by_c⁄n_h™dÀ
(
p_bÀ_evt
->
evt
.
g©ts_evt
.
c⁄n_h™dÀ
);

497 
evít
.
∑øms
.
£rvi˚_ch™ged_öd_£¡
.
c⁄n_h™dÀ
 = 
p_bÀ_evt
->
evt
.
g©ts_evt
.conn_handle;

499 
	`gscm_db_ch™ge_nŸifiˇti⁄_d⁄e
(
evít
.
≥î_id
);

500 
	`bÀ_c⁄n_°©e_u£r_Êag_£t
(
p_bÀ_evt
->
evt
.
g©ts_evt
.
c⁄n_h™dÀ
, 
m_Êag_£rvi˚_ch™ged_≥ndög
, 
Ál£
);

502 
	`evt_£nd
(&
evít
);

505 
BLE_GATTS_EVT_WRITE
:

506 i‡(
	`cccd_wrôãn
(&
p_bÀ_evt
->
evt
.
g©ts_evt
.
∑øms
.
wrôe
))

508 
	`loˇl_db_upd©e_ö_evt
(
p_bÀ_evt
->
evt
.
g©ts_evt
.
c⁄n_h™dÀ
);

513 
	`≠∂y_≥ndög_Êags_check
();

514 
	`upd©e_≥ndög_Êags_check
();

515 
	`£rvi˚_ch™ged_≥ndög_Êags_check
();

516 
	}
}

519 
ªt_code_t
 
	$gcm_loˇl_db_ˇche_upd©e
(
uöt16_t
 
c⁄n_h™dÀ
)

521 
	`NRF_PM_DEBUG_CHECK
(
m_moduÀ_öôülized
);

523 
ªt_code_t
 
îr_code
 = 
	`gscm_loˇl_db_ˇche_upd©e
(
c⁄n_h™dÀ
);

524 
boﬁ
 
£t_¥o˚duª_as_≥ndög
 = 
Ál£
;

526 i‡(
îr_code
 =
NRF_ERROR_BUSY
)

528 
£t_¥o˚duª_as_≥ndög
 = 
åue
;

529 
îr_code
 = 
NRF_SUCCESS
;

532 
	`bÀ_c⁄n_°©e_u£r_Êag_£t
(
c⁄n_h™dÀ
, 
m_Êag_loˇl_db_upd©e_≥ndög
, 
£t_¥o˚duª_as_≥ndög
);

534  
îr_code
;

535 
	}
}

538 
ªt_code_t
 
	$gcm_loˇl_db_ˇche_£t
(
pm_≥î_id_t
 
≥î_id
, 
pm_≥î_d©a_loˇl_g©t_db_t
 * 
p_loˇl_db
)

540 
	`NRF_PM_DEBUG_CHECK
(
m_moduÀ_öôülized
);

542  
	`gscm_loˇl_db_ˇche_£t
(
≥î_id
, 
p_loˇl_db
);

543 
	}
}

546 
	$gcm_loˇl_d©aba£_has_ch™ged
()

548 
	`gscm_loˇl_d©aba£_has_ch™ged
();

550 
sdk_m≠≥d_Êags_key_li°_t
 
c⁄n_h™dÀs
 = 
	`bÀ_c⁄n_°©e_c⁄n_h™dÀs
();

552 
uöt16_t
 
i
 = 0; i < 
c⁄n_h™dÀs
.
Àn
; i++)

554 i‡(
	`im_≥î_id_gë_by_c⁄n_h™dÀ
(
c⁄n_h™dÀs
.
Êag_keys
[
i
]Ë=
PM_PEER_ID_INVALID
)

556 
	`bÀ_c⁄n_°©e_u£r_Êag_£t
(
c⁄n_h™dÀs
.
Êag_keys
[
i
], 
m_Êag_£rvi˚_ch™ged_≥ndög
, 
åue
);

560 
	`£rvi˚_ch™ged_≥ndög_Êags_check
();

561 
	}
}

	@D:\Private\Programing\MCU\Nordic\ble_app_template\nRF5_SDK_12.3.0_d7731ad\components\ble\peer_manager\gatts_cache_manager.c

41 
	~"sdk_comm⁄.h
"

42 #i‡
NRF_MODULE_ENABLED
(
PEER_MANAGER
)

43 
	~"g©ts_ˇche_m™agî.h
"

45 
	~<°rög.h
>

46 
	~"bÀ_g≠.h
"

47 
	~"≥î_m™agî_ty≥s.h
"

48 
	~"≥î_m™agî_öã∫Æ.h
"

49 
	~"≥î_d©aba£.h
"

50 
	~"id_m™agî.h
"

54 
	#SYS_ATTR_SYS
 (
BLE_GATTS_SYS_ATTR_FLAG_SYS_SRVCS
)

	)

55 
	#SYS_ATTR_USR
 (
BLE_GATTS_SYS_ATTR_FLAG_USR_SRVCS
)

	)

56 
	#SYS_ATTR_BOTH
 (
SYS_ATTR_SYS
 | 
SYS_ATTR_USR
)

	)

59 
	#GSCM_EVENT_HANDLERS_CNT
 ((
m_evt_h™dÀr
Ë/ (m_evt_h™dÀr[0]))

	)

63 
gcm_gscm_evt_h™dÀr
(
gscm_evt_t
 c⁄° * 
p_evít
);

67 
gscm_evt_h™dÀr_t
 
	gm_evt_h™dÀr
[] =

69 
gcm_gscm_evt_h™dÀr


72 
boﬁ
 
	gm_moduÀ_öôülized
;

73 
pm_≥î_id_t
 
	gm_cuºít_sc_°‹e_≥î_id
;

78 
	$öã∫Æ_°©e_ª£t
()

80 
m_moduÀ_öôülized
 = 
Ál£
;

81 
m_cuºít_sc_°‹e_≥î_id
 = 
PM_PEER_ID_INVALID
;

82 
	}
}

85 
	$evt_£nd
(
gscm_evt_t
 c⁄° * 
p_evít
)

87 
uöt32_t
 
i
 = 0; i < 
GSCM_EVENT_HANDLERS_CNT
; i++)

89 
m_evt_h™dÀr
[
i
](
p_evít
);

91 
	}
}

100 
	$£rvi˚_ch™ged_≥ndög_£t
()

102 
	`NRF_PM_DEBUG_CHECK
(
m_moduÀ_öôülized
);

104 
ªt_code_t
 
îr_code
;

106 c⁄° 
uöt32_t
 
£rvi˚_ch™ged_≥ndög
 = 
åue
;

109 
pm_≥î_d©a_c⁄°_t
 
≥î_d©a
 =

111 .
d©a_id
 = 
PM_PEER_DATA_ID_SERVICE_CHANGED_PENDING
,

112 .
Àngth_w‹ds
 = 
	`PM_SC_STATE_N_WORDS
(),

113 .
p_£rvi˚_ch™ged_≥ndög
 = (
boﬁ
*)&
£rvi˚_ch™ged_≥ndög
,

117 
îr_code
 = 
	`pdb_øw_°‹e
(
m_cuºít_sc_°‹e_≥î_id
, &
≥î_d©a
, 
NULL
);

118 (
m_cuºít_sc_°‹e_≥î_id
 !
PM_PEER_ID_INVALID
Ë&& (
îr_code
 !
NRF_ERROR_BUSY
))

120 
m_cuºít_sc_°‹e_≥î_id
 = 
	`pdb_√xt_≥î_id_gë
(m_current_sc_store_peer_id);

121 
îr_code
 = 
	`pdb_øw_°‹e
(
m_cuºít_sc_°‹e_≥î_id
, &
≥î_d©a
, 
NULL
);

123 
	}
}

133 
	$gscm_pdb_evt_h™dÀr
(
pdb_evt_t
 c⁄° * 
p_evít
)

135 i‡(
p_evít
->
evt_id
 =
PDB_EVT_RAW_STORED
)

137 i‡(
p_evít
->
d©a_id
 =
PM_PEER_DATA_ID_SERVICE_CHANGED_PENDING
)

139 
ªt_code_t
 
îr_code
;

140 
pm_≥î_d©a_Êash_t
 
≥î_d©a
;

142 
îr_code
 = 
	`pdb_≥î_d©a_±r_gë
(
p_evít
->
≥î_id
,

143 
PM_PEER_DATA_ID_SERVICE_CHANGED_PENDING
,

144 &
≥î_d©a
);

146 i‡(
îr_code
 =
NRF_SUCCESS
)

148 
gscm_evt_t
 
gscm_evt
;

149 
gscm_evt
.
evt_id
 = 
GSCM_EVT_SC_STATE_STORED
;

150 
gscm_evt
.
≥î_id
 = 
p_evít
->peer_id;

151 
gscm_evt
.
∑øms
.
sc_°©e_°‹ed
.
°©e
 = *
≥î_d©a
.
p_£rvi˚_ch™ged_≥ndög
;

153 
	`evt_£nd
(&
gscm_evt
);

158 i‡(
m_cuºít_sc_°‹e_≥î_id
 !
PM_PEER_ID_INVALID
)

160 
	`£rvi˚_ch™ged_≥ndög_£t
();

162 
	}
}

165 
ªt_code_t
 
	$gscm_öô
()

167 
	`NRF_PM_DEBUG_CHECK
(!
m_moduÀ_öôülized
);

169 
	`öã∫Æ_°©e_ª£t
();

170 
m_moduÀ_öôülized
 = 
åue
;

172  
NRF_SUCCESS
;

173 
	}
}

176 
ªt_code_t
 
	$gscm_loˇl_db_ˇche_upd©e
(
uöt16_t
 
c⁄n_h™dÀ
)

178 
	`NRF_PM_DEBUG_CHECK
(
m_moduÀ_öôülized
);

180 
pm_≥î_id_t
 
≥î_id
 = 
	`im_≥î_id_gë_by_c⁄n_h™dÀ
(
c⁄n_h™dÀ
);

181 
ªt_code_t
 
îr_code
;

183 i‡(
≥î_id
 =
PM_PEER_ID_INVALID
)

185  
BLE_ERROR_INVALID_CONN_HANDLE
;

189 
pm_≥î_d©a_t
 
≥î_d©a
;

190 
uöt16_t
 
n_bufs
 = 1;

191 
boﬁ
 
ªåy_wôh_biggî_buf„r
 = 
Ál£
;

195 
ªåy_wôh_biggî_buf„r
 = 
Ál£
;

197 
îr_code
 = 
	`pdb_wrôe_buf_gë
(
≥î_id
, 
PM_PEER_DATA_ID_GATT_LOCAL
, 
n_bufs
++, &
≥î_d©a
);

198 i‡(
îr_code
 =
NRF_SUCCESS
)

200 
pm_≥î_d©a_loˇl_g©t_db_t
 * 
p_loˇl_g©t_db
 = 
≥î_d©a
.p_local_gatt_db;

202 
p_loˇl_g©t_db
->
Êags
 = 
SYS_ATTR_BOTH
;

204 
îr_code
 = 
	`sd_bÀ_g©ts_sys_©å_gë
(
c⁄n_h™dÀ
, &
p_loˇl_g©t_db
->
d©a
[0], &p_loˇl_g©t_db->
Àn
,Ö_loˇl_g©t_db->
Êags
);

206 i‡(
îr_code
 =
NRF_SUCCESS
)

208 
îr_code
 = 
	`pdb_wrôe_buf_°‹e
(
≥î_id
, 
PM_PEER_DATA_ID_GATT_LOCAL
);

212 i‡(
îr_code
 =
NRF_ERROR_DATA_SIZE
)

215 
ªåy_wôh_biggî_buf„r
 = 
åue
;

217 i‡(
îr_code
 =
NRF_ERROR_NOT_FOUND
)

220 
îr_code
 = 
NRF_SUCCESS
;

223 
ªt_code_t
 
îr_code_ªÀa£
 = 
	`pdb_wrôe_buf_ªÀa£
(
≥î_id
, 
PM_PEER_DATA_ID_GATT_LOCAL
);

224 i‡(
îr_code_ªÀa£
 !
NRF_SUCCESS
)

226 
îr_code
 = 
NRF_ERROR_INTERNAL
;

230 i‡(
îr_code
 =
NRF_ERROR_INVALID_PARAM
)

233 
îr_code
 = 
NRF_ERROR_DATA_SIZE
;

235 } 
ªåy_wôh_biggî_buf„r
);

238  
îr_code
;

239 
	}
}

242 
ªt_code_t
 
	$gscm_loˇl_db_ˇche_≠∂y
(
uöt16_t
 
c⁄n_h™dÀ
)

244 
	`NRF_PM_DEBUG_CHECK
(
m_moduÀ_öôülized
);

246 
pm_≥î_id_t
 
≥î_id
 = 
	`im_≥î_id_gë_by_c⁄n_h™dÀ
(
c⁄n_h™dÀ
);

247 
ªt_code_t
 
îr_code
;

248 
pm_≥î_d©a_Êash_t
 
≥î_d©a
;

249 
uöt8_t
 c⁄° * 
p_sys_©å_d©a
 = 
NULL
;

250 
uöt16_t
 
sys_©å_Àn
 = 0;

251 
uöt32_t
 
sys_©å_Êags
 = (
SYS_ATTR_BOTH
);

252 
boﬁ
 
Æl_©åibuãs_≠∂õd
 = 
åue
;

254 i‡(
≥î_id
 !
PM_PEER_ID_INVALID
)

256 
îr_code
 = 
	`pdb_≥î_d©a_±r_gë
(
≥î_id
, 
PM_PEER_DATA_ID_GATT_LOCAL
, &
≥î_d©a
);

257 i‡(
îr_code
 =
NRF_SUCCESS
)

259 
pm_≥î_d©a_loˇl_g©t_db_t
 c⁄° * 
p_loˇl_g©t_db
;

261 
p_loˇl_g©t_db
 = 
≥î_d©a
.p_local_gatt_db;

262 
p_sys_©å_d©a
 = 
p_loˇl_g©t_db
->
d©a
;

263 
sys_©å_Àn
 = 
p_loˇl_g©t_db
->
Àn
;

264 
sys_©å_Êags
 = 
p_loˇl_g©t_db
->
Êags
;

270 
îr_code
 = 
	`sd_bÀ_g©ts_sys_©å_£t
(
c⁄n_h™dÀ
, 
p_sys_©å_d©a
, 
sys_©å_Àn
, 
sys_©å_Êags
);

272 i‡(
îr_code
 =
NRF_ERROR_NO_MEM
)

274 
îr_code
 = 
NRF_ERROR_BUSY
;

276 i‡(
îr_code
 =
NRF_ERROR_INVALID_STATE
)

278 
îr_code
 = 
NRF_SUCCESS
;

280 i‡(
îr_code
 =
NRF_ERROR_INVALID_DATA
)

282 
Æl_©åibuãs_≠∂õd
 = 
Ál£
;

284 i‡(
sys_©å_Êags
 & 
SYS_ATTR_USR
)

287 
sys_©å_Êags
 = 
SYS_ATTR_SYS
;

289 i‡(
p_sys_©å_d©a
 || 
sys_©å_Àn
)

292 
p_sys_©å_d©a
 = 
NULL
;

293 
sys_©å_Àn
 = 0;

294 
sys_©å_Êags
 = 
SYS_ATTR_BOTH
;

298 
îr_code
 = 
NRF_ERROR_INTERNAL
;

301 } 
îr_code
 =
NRF_ERROR_INVALID_DATA
);

303 i‡(!
Æl_©åibuãs_≠∂õd
)

305 
îr_code
 = 
NRF_ERROR_INVALID_DATA
;

308  
îr_code
;

309 
	}
}

312 
ªt_code_t
 
	$gscm_loˇl_db_ˇche_£t
(
pm_≥î_id_t
 
≥î_id
, 
pm_≥î_d©a_loˇl_g©t_db_t
 * 
p_loˇl_db
)

314 
	`NRF_PM_DEBUG_CHECK
(
m_moduÀ_öôülized
);

316 
pm_≥î_d©a_c⁄°_t
 
≥î_d©a
;

318 
	`mem£t
(&
≥î_d©a
, 0, (
pm_≥î_d©a_c⁄°_t
));

319 
≥î_d©a
.
d©a_id
 = 
PM_PEER_DATA_ID_GATT_LOCAL
;

320 
≥î_d©a
.
p_loˇl_g©t_db
 = 
p_loˇl_db
;

322  
	`pdb_øw_°‹e
(
≥î_id
, &
≥î_d©a
, 
NULL
);

323 
	}
}

326 
	$gscm_loˇl_d©aba£_has_ch™ged
()

328 
	`NRF_PM_DEBUG_CHECK
(
m_moduÀ_öôülized
);

329 
m_cuºít_sc_°‹e_≥î_id
 = 
	`pdb_√xt_≥î_id_gë
(
PM_PEER_ID_INVALID
);

330 
	`£rvi˚_ch™ged_≥ndög_£t
();

331 
	}
}

334 
boﬁ
 
	$gscm_£rvi˚_ch™ged_öd_√eded
(
uöt16_t
 
c⁄n_h™dÀ
)

336 
ªt_code_t
 
îr_code
;

337 
pm_≥î_d©a_Êash_t
 
≥î_d©a
;

338 
pm_≥î_id_t
 
≥î_id
 = 
	`im_≥î_id_gë_by_c⁄n_h™dÀ
(
c⁄n_h™dÀ
);

340 
îr_code
 = 
	`pdb_≥î_d©a_±r_gë
(
≥î_id
, 
PM_PEER_DATA_ID_SERVICE_CHANGED_PENDING
, &
≥î_d©a
);

342 i‡(
îr_code
 !
NRF_SUCCESS
)

344  
Ál£
;

347  *
≥î_d©a
.
p_£rvi˚_ch™ged_≥ndög
;

348 
	}
}

351 
ªt_code_t
 
	$gscm_£rvi˚_ch™ged_öd_£nd
(
uöt16_t
 
c⁄n_h™dÀ
)

353 
uöt16_t
 
°¨t_h™dÀ
 = 0x0000;

354 c⁄° 
uöt16_t
 
íd_h™dÀ
 = 0xFFFF;

355 
ªt_code_t
 
îr_code
;

359 
îr_code
 = 
	`sd_bÀ_g©ts_£rvi˚_ch™ged
(
c⁄n_h™dÀ
, 
°¨t_h™dÀ
, 
íd_h™dÀ
);

360 i‡(
îr_code
 =
BLE_ERROR_INVALID_ATTR_HANDLE
)

362 
°¨t_h™dÀ
 += 1;

364 } 
îr_code
 =
BLE_ERROR_INVALID_ATTR_HANDLE
);

366  
îr_code
;

367 
	}
}

370 
	$gscm_db_ch™ge_nŸifiˇti⁄_d⁄e
(
pm_≥î_id_t
 
≥î_id
)

372 
	`NRF_PM_DEBUG_CHECK
(
m_moduÀ_öôülized
);

375 c⁄° 
uöt32_t
 
£rvi˚_ch™ged_≥ndög
 = 
Ál£
;

378 
pm_≥î_d©a_c⁄°_t
 
≥î_d©a
 =

380 .
d©a_id
 = 
PM_PEER_DATA_ID_SERVICE_CHANGED_PENDING
,

381 .
Àngth_w‹ds
 = 
	`PM_SC_STATE_N_WORDS
(),

382 .
p_£rvi˚_ch™ged_≥ndög
 = (
boﬁ
*)&
£rvi˚_ch™ged_≥ndög
,

388 (Ë
	`pdb_øw_°‹e
(
≥î_id
, &
≥î_d©a
, 
NULL
);

390 
	}
}

	@D:\Private\Programing\MCU\Nordic\ble_app_template\nRF5_SDK_12.3.0_d7731ad\components\ble\peer_manager\id_manager.c

41 
	~"sdk_comm⁄.h
"

42 #i‡
NRF_MODULE_ENABLED
(
PEER_MANAGER
)

43 
	~"id_m™agî.h
"

45 
	~<°rög.h
>

46 
	~"bÀ.h
"

47 
	~"bÀ_g≠.h
"

48 
	~"bÀ_c⁄n_°©e.h
"

49 
	~"≥î_m™agî_ty≥s.h
"

50 
	~"≥î_d©aba£.h
"

51 
	~"≥î_d©a_°‹age.h
"

52 
	~"ƒf_soc.h
"

55 
	#IM_MAX_CONN_HANDLES
 (8)

	)

56 
	#IM_NO_INVALID_CONN_HANDLES
 (0xFF)

	)

57 
	#IM_ADDR_CLEARTEXT_LENGTH
 (3)

	)

58 
	#IM_ADDR_CIPHERTEXT_LENGTH
 (3)

	)

61 
	#IM_EVENT_HANDLERS_CNT
 ((
m_evt_h™dÀrs
Ë/ (m_evt_h™dÀrs[0]))

	)

65 
pm_im_evt_h™dÀr
(
im_evt_t
 c⁄° * 
p_evít
);

66 
gcm_im_evt_h™dÀr
(
im_evt_t
 c⁄° * 
p_evít
);

70 
im_evt_h™dÀr_t
 c⁄° 
	gm_evt_h™dÀrs
[] =

72 
pm_im_evt_h™dÀr
,

73 
gcm_im_evt_h™dÀr


79 
pm_≥î_id_t
 
	m≥î_id
;

80 
uöt16_t
 
	mc⁄n_h™dÀ
;

81 
bÀ_g≠_addr_t
 
	m≥î_addªss
;

82 } 
	tim_c⁄√˘i⁄_t
;

84 
boﬁ
 
	gm_moduÀ_öôülized
;

85 
im_c⁄√˘i⁄_t
 
	gm_c⁄√˘i⁄s
[8];

86 
bÀ_c⁄n_°©e_u£r_Êag_id_t
 
	gm_c⁄n_°©e_u£r_Êag_id
;

88 
uöt8_t
 
	gm_wli°ed_≥î_˙t
;

89 
pm_≥î_id_t
 
	gm_wli°ed_≥îs
[
BLE_GAP_WHITELIST_ADDR_MAX_COUNT
];

91 #i‡(
NRF_SD_BLE_API_VERSION
 == 2)

92 
bÀ_g≠_addr_t
 
	gm_cuºít_id_addr
;

96 
	$öã∫Æ_°©e_ª£t
()

98 
m_c⁄n_°©e_u£r_Êag_id
 = 
BLE_CONN_STATE_USER_FLAG_INVALID
;

100 
uöt32_t
 
i
 = 0; i < 
IM_MAX_CONN_HANDLES
; i++)

102 
m_c⁄√˘i⁄s
[
i
].
c⁄n_h™dÀ
 = 
BLE_CONN_HANDLE_INVALID
;

104 
	}
}

111 
	$evt_£nd
(
im_evt_t
 * 
p_evít
)

113 
uöt32_t
 
i
 = 0; i < 
IM_EVENT_HANDLERS_CNT
; i++)

115 
m_evt_h™dÀrs
[
i
](
p_evít
);

117 
	}
}

128 
uöt8_t
 
	$gë_‰ì_c⁄√˘i⁄
()

130 
uöt32_t
 
i
 = 0; i < 
IM_MAX_CONN_HANDLES
; i++)

134 i‡(!
	`bÀ_c⁄n_°©e_u£r_Êag_gë
(
m_c⁄√˘i⁄s
[
i
].
c⁄n_h™dÀ
, 
m_c⁄n_°©e_u£r_Êag_id
))

136  
i
;

140  
IM_NO_INVALID_CONN_HANDLES
;

141 
	}
}

151 
uöt8_t
 
	$gë_c⁄√˘i⁄_by_c⁄n_h™dÀ
(
uöt16_t
 
c⁄n_h™dÀ
)

153 i‡(
	`bÀ_c⁄n_°©e_u£r_Êag_gë
(
c⁄n_h™dÀ
, 
m_c⁄n_°©e_u£r_Êag_id
))

155 
uöt32_t
 
i
 = 0; i < 
IM_MAX_CONN_HANDLES
; i++)

157 i‡(
m_c⁄√˘i⁄s
[
i
].
c⁄n_h™dÀ
 == conn_handle)

159  
i
;

164  
IM_NO_INVALID_CONN_HANDLES
;

165 
	}
}

176 
uöt8_t
 
	$√w_c⁄√˘i⁄
(
uöt16_t
 
c⁄n_h™dÀ
, 
bÀ_g≠_addr_t
 * 
p_bÀ_addr
)

178 
uöt8_t
 
c⁄n_ödex
 = 
IM_NO_INVALID_CONN_HANDLES
;

180 i‡((
p_bÀ_addr
 !
NULL
Ë&& (
c⁄n_h™dÀ
 !
BLE_CONN_HANDLE_INVALID
))

182 
	`bÀ_c⁄n_°©e_u£r_Êag_£t
(
c⁄n_h™dÀ
, 
m_c⁄n_°©e_u£r_Êag_id
, 
åue
);

184 
c⁄n_ödex
 = 
	`gë_c⁄√˘i⁄_by_c⁄n_h™dÀ
(
c⁄n_h™dÀ
);

185 i‡(
c⁄n_ödex
 =
IM_NO_INVALID_CONN_HANDLES
)

187 
c⁄n_ödex
 = 
	`gë_‰ì_c⁄√˘i⁄
();

190 i‡(
c⁄n_ödex
 !
IM_NO_INVALID_CONN_HANDLES
)

192 
m_c⁄√˘i⁄s
[
c⁄n_ödex
].
c⁄n_h™dÀ
 = conn_handle;

193 
m_c⁄√˘i⁄s
[
c⁄n_ödex
].
≥î_id
 = 
PM_PEER_ID_INVALID
;

194 
m_c⁄√˘i⁄s
[
c⁄n_ödex
].
≥î_addªss
 = *
p_bÀ_addr
;

197  
c⁄n_ödex
;

198 
	}
}

210 
boﬁ
 
	$is_vÆid_úk
(
bÀ_g≠_úk_t
 c⁄° * 
p_úk
)

212 
	`NRF_PM_DEBUG_CHECK
(
p_úk
 !
NULL
);

214 
uöt32_t
 
i
 = 0; i < 
BLE_GAP_SEC_KEY_LEN
; i++)

216 i‡(
p_úk
->
úk
[
i
] != 0)

218  
åue
;

221  
Ál£
;

222 
	}
}

235 
boﬁ
 
	$addr_com∑ª
(
bÀ_g≠_addr_t
 c⁄° * 
p_addr1
, bÀ_g≠_addr_àc⁄° * 
p_addr2
)

238 i‡((
p_addr1
 =
NULL
Ë|| (
p_addr2
 == NULL))

240  
Ál£
;

244 i‡(
p_addr1
->
addr_ty≥
 !
p_addr2
->addr_type)

246  
Ál£
;

249  (
	`memcmp
(
p_addr1
->
addr
, 
p_addr2
->addr, 
BLE_GAP_ADDR_LEN
) == 0);

250 
	}
}

253 
	$im_bÀ_evt_h™dÀr
(
bÀ_evt_t
 * 
bÀ_evt
)

255 
bÀ_g≠_evt_t
 
g≠_evt
;

256 
pm_≥î_id_t
 
b⁄ded_m©chög_≥î_id
;

258 
	`NRF_PM_DEBUG_CHECK
(
m_moduÀ_öôülized
);

260 i‡(
bÀ_evt
->
hódî
.
evt_id
 !
BLE_GAP_EVT_CONNECTED
)

266 
g≠_evt
 = 
bÀ_evt
->
evt
.gap_evt;

267 
b⁄ded_m©chög_≥î_id
 = 
PM_PEER_ID_INVALID
;

269 i‡–
g≠_evt
.
∑øms
.
c⁄√˘ed
.
≥î_addr
.
addr_ty≥


270 !
BLE_GAP_ADDR_TYPE_RANDOM_PRIVATE_NON_RESOLVABLE
)

278 
pm_≥î_id_t
 
≥î_id
;

279 
pm_≥î_d©a_Êash_t
 
≥î_d©a
;

281 
	`pds_≥î_d©a_ôî©e_¥ï¨e
();

283 
g≠_evt
.
∑øms
.
c⁄√˘ed
.
≥î_addr
.
addr_ty≥
)

285 
BLE_GAP_ADDR_TYPE_PUBLIC
:

286 
BLE_GAP_ADDR_TYPE_RANDOM_STATIC
:

288 
	`pds_≥î_d©a_ôî©e
(
PM_PEER_DATA_ID_BONDING
, &
≥î_id
, &
≥î_d©a
))

290 i‡(
	`addr_com∑ª
(&
g≠_evt
.
∑øms
.
c⁄√˘ed
.
≥î_addr
,

291 &
≥î_d©a
.
p_b⁄dög_d©a
->
≥î_bÀ_id
.
id_addr_öfo
))

293 
b⁄ded_m©chög_≥î_id
 = 
≥î_id
;

300 
BLE_GAP_ADDR_TYPE_RANDOM_PRIVATE_RESOLVABLE
:

302 
	`pds_≥î_d©a_ôî©e
(
PM_PEER_DATA_ID_BONDING
, &
≥î_id
, &
≥î_d©a
))

304 i‡(
	`im_addªss_ªsﬁve
(&
g≠_evt
.
∑øms
.
c⁄√˘ed
.
≥î_addr
,

305 &
≥î_d©a
.
p_b⁄dög_d©a
->
≥î_bÀ_id
.
id_öfo
))

307 
b⁄ded_m©chög_≥î_id
 = 
≥î_id
;

315 
	`NRF_PM_DEBUG_CHECK
(
Ál£
);

320 
uöt8_t
 
√w_ödex
 = 
	`√w_c⁄√˘i⁄
(
g≠_evt
.
c⁄n_h™dÀ
,

321 &
g≠_evt
.
∑øms
.
c⁄√˘ed
.
≥î_addr
);

322 
	`UNUSED_VARIABLE
(
√w_ödex
);

324 i‡(
b⁄ded_m©chög_≥î_id
 !
PM_PEER_ID_INVALID
)

326 
	`im_√w_≥î_id
(
g≠_evt
.
c⁄n_h™dÀ
, 
b⁄ded_m©chög_≥î_id
);

329 
im_evt_t
 
im_evt
;

330 
im_evt
.
c⁄n_h™dÀ
 = 
g≠_evt
.conn_handle;

331 
im_evt
.
evt_id
 = 
IM_EVT_BONDED_PEER_CONNECTED
;

332 
	`evt_£nd
(&
im_evt
);

334 
	}
}

345 
boﬁ
 
	$im_is_du∂iˇã_b⁄dög_d©a
(
pm_≥î_d©a_b⁄dög_t
 c⁄° * 
p_b⁄dög_d©a1
,

346 
pm_≥î_d©a_b⁄dög_t
 c⁄° * 
p_b⁄dög_d©a2
)

348 
	`NRF_PM_DEBUG_CHECK
(
p_b⁄dög_d©a1
 !
NULL
);

349 
	`NRF_PM_DEBUG_CHECK
(
p_b⁄dög_d©a2
 !
NULL
);

351 i‡(!
	`is_vÆid_úk
(&
p_b⁄dög_d©a1
->
≥î_bÀ_id
.
id_öfo
))

353  
Ál£
;

356 
boﬁ
 
du∂iˇã_úk
 = (
	`memcmp
(
p_b⁄dög_d©a1
->
≥î_bÀ_id
.
id_öfo
.
úk
,

357 
p_b⁄dög_d©a2
->
≥î_bÀ_id
.
id_öfo
.
úk
,

358 
BLE_GAP_SEC_KEY_LEN
) == 0);

360 
boﬁ
 
du∂iˇã_addr
 = 
	`addr_com∑ª
(&
p_b⁄dög_d©a1
->
≥î_bÀ_id
.
id_addr_öfo
,

361 &
p_b⁄dög_d©a2
->
≥î_bÀ_id
.
id_addr_öfo
);

363  
du∂iˇã_úk
 || 
du∂iˇã_addr
;

364 
	}
}

372 
	$im_pdb_evt_h™dÀr
(
pdb_evt_t
 c⁄° * 
p_evít
)

374 
ªt_code_t
 
ªt
;

375 
pm_≥î_id_t
 
≥î_id
;

376 
pm_≥î_d©a_Êash_t
 
≥î_d©a
;

377 
pm_≥î_d©a_Êash_t
 
≥î_d©a_du∂iˇã
;

379 
	`NRF_PM_DEBUG_CHECK
(
m_moduÀ_öôülized
);

380 
	`NRF_PM_DEBUG_CHECK
(
p_evít
 !
NULL
);

382 i‡((
p_evít
->
evt_id
 !
PDB_EVT_WRITE_BUF_STORED
) ||

383 (
p_evít
->
d©a_id
 !
PM_PEER_DATA_ID_BONDING
))

391 
ªt
 = 
	`pdb_≥î_d©a_±r_gë
(
p_evít
->
≥î_id
, 
PM_PEER_DATA_ID_BONDING
, &
≥î_d©a
);

393 i‡(
ªt
 !
NRF_SUCCESS
)

396 
	`NRF_PM_DEBUG_CHECK
(
Ál£
);

400 
	`pds_≥î_d©a_ôî©e_¥ï¨e
();

402 
	`pds_≥î_d©a_ôî©e
(
PM_PEER_DATA_ID_BONDING
, &
≥î_id
, &
≥î_d©a_du∂iˇã
))

404 i‡(
p_evít
->
≥î_id
 ==Öeer_id)

411 i‡(
	`im_is_du∂iˇã_b⁄dög_d©a
(
≥î_d©a
.
p_b⁄dög_d©a
,

412 
≥î_d©a_du∂iˇã
.
p_b⁄dög_d©a
))

414 
im_evt_t
 
im_evt
;

415 
im_evt
.
c⁄n_h™dÀ
 = 
	`im_c⁄n_h™dÀ_gë
(
p_evít
->
≥î_id
);

416 
im_evt
.
evt_id
 = 
IM_EVT_DUPLICATE_ID
;

417 
im_evt
.
∑øms
.
du∂iˇã_id
.
≥î_id_1
 = 
p_evít
->
≥î_id
;

418 
im_evt
.
∑øms
.
du∂iˇã_id
.
≥î_id_2
 = 
≥î_id
;

419 
	`evt_£nd
(&
im_evt
);

423 
	}
}

426 
ªt_code_t
 
	$im_öô
()

428 
	`NRF_PM_DEBUG_CHECK
(!
m_moduÀ_öôülized
);

430 
	`öã∫Æ_°©e_ª£t
();

432 
m_c⁄n_°©e_u£r_Êag_id
 = 
	`bÀ_c⁄n_°©e_u£r_Êag_acquúe
();

433 i‡(
m_c⁄n_°©e_u£r_Êag_id
 =
BLE_CONN_STATE_USER_FLAG_INVALID
)

435  
NRF_ERROR_INTERNAL
;

438 #i‡(
NRF_SD_BLE_API_VERSION
 == 2)

439 
ªt_code_t
 
ªt_code
 = 
	`sd_bÀ_g≠_addªss_gë
(&
m_cuºít_id_addr
);

440 i‡(
ªt_code
 !
NRF_SUCCESS
)

442  
NRF_ERROR_INTERNAL
;

446 
m_moduÀ_öôülized
 = 
åue
;

448  
NRF_SUCCESS
;

449 
	}
}

452 
pm_≥î_id_t
 
	$im_≥î_id_gë_by_c⁄n_h™dÀ
(
uöt16_t
 
c⁄n_h™dÀ
)

454 
uöt8_t
 
c⁄n_ödex
;

456 
	`NRF_PM_DEBUG_CHECK
(
m_moduÀ_öôülized
);

458 
c⁄n_ödex
 = 
	`gë_c⁄√˘i⁄_by_c⁄n_h™dÀ
(
c⁄n_h™dÀ
);

460 i‡(
c⁄n_ödex
 !
IM_NO_INVALID_CONN_HANDLES
)

462  
m_c⁄√˘i⁄s
[
c⁄n_ödex
].
≥î_id
;

465  
PM_PEER_ID_INVALID
;

466 
	}
}

469 
ªt_code_t
 
	$im_bÀ_addr_gë
(
uöt16_t
 
c⁄n_h™dÀ
, 
bÀ_g≠_addr_t
 * 
p_bÀ_addr
)

471 
uöt8_t
 
c⁄n_ödex
;

473 
	`NRF_PM_DEBUG_CHECK
(
m_moduÀ_öôülized
);

474 
	`NRF_PM_DEBUG_CHECK
(
p_bÀ_addr
 !
NULL
);

476 
c⁄n_ödex
 = 
	`gë_c⁄√˘i⁄_by_c⁄n_h™dÀ
(
c⁄n_h™dÀ
);

478 i‡(
c⁄n_ödex
 !
IM_NO_INVALID_CONN_HANDLES
)

480 *
p_bÀ_addr
 = 
m_c⁄√˘i⁄s
[
c⁄n_ödex
].
≥î_addªss
;

481  
NRF_SUCCESS
;

484  
NRF_ERROR_NOT_FOUND
;

485 
	}
}

488 
boﬁ
 
	$im_ma°î_ids_com∑ª
(
bÀ_g≠_ma°î_id_t
 c⁄° * 
p_ma°î_id1
,

489 
bÀ_g≠_ma°î_id_t
 c⁄° * 
p_ma°î_id2
)

491 
	`NRF_PM_DEBUG_CHECK
(
m_moduÀ_öôülized
);

492 
	`NRF_PM_DEBUG_CHECK
(
p_ma°î_id1
 !
NULL
);

493 
	`NRF_PM_DEBUG_CHECK
(
p_ma°î_id2
 !
NULL
);

495 i‡(!
	`im_ma°î_id_is_vÆid
(
p_ma°î_id1
))

497  
Ál£
;

500 i‡(
p_ma°î_id1
->
ediv
 !
p_ma°î_id2
->ediv)

502  
Ál£
;

505  (
	`memcmp
(
p_ma°î_id1
->
ønd
, 
p_ma°î_id2
->ønd, 
BLE_GAP_SEC_RAND_LEN
) == 0);

506 
	}
}

509 
pm_≥î_id_t
 
	$im_≥î_id_gë_by_ma°î_id
(
bÀ_g≠_ma°î_id_t
 * 
p_ma°î_id
)

511 
pm_≥î_id_t
 
≥î_id
;

512 
pm_≥î_d©a_Êash_t
 
≥î_d©a
;

514 
	`NRF_PM_DEBUG_CHECK
(
m_moduÀ_öôülized
);

515 
	`NRF_PM_DEBUG_CHECK
(
p_ma°î_id
 !
NULL
);

517 
	`pds_≥î_d©a_ôî©e_¥ï¨e
();

520 
	`pds_≥î_d©a_ôî©e
(
PM_PEER_DATA_ID_BONDING
, &
≥î_id
, &
≥î_d©a
))

522 i‡(
	`im_ma°î_ids_com∑ª
(
p_ma°î_id
, &
≥î_d©a
.
p_b⁄dög_d©a
->
own_…k
.
ma°î_id
) ||

523 
	`im_ma°î_ids_com∑ª
(
p_ma°î_id
, &
≥î_d©a
.
p_b⁄dög_d©a
->
≥î_…k
.
ma°î_id
))

526  
≥î_id
;

531  
PM_PEER_ID_INVALID
;

532 
	}
}

535 
uöt16_t
 
	$im_c⁄n_h™dÀ_gë
(
pm_≥î_id_t
 
≥î_id
)

537 
	`NRF_PM_DEBUG_CHECK
(
m_moduÀ_öôülized
);

539 
uöt32_t
 
i
 = 0; i < 
IM_MAX_CONN_HANDLES
; i++)

541 i‡(
≥î_id
 =
m_c⁄√˘i⁄s
[
i
].peer_id)

543  
m_c⁄√˘i⁄s
[
i
].
c⁄n_h™dÀ
;

546  
BLE_CONN_HANDLE_INVALID
;

547 
	}
}

550 
boﬁ
 
	$im_ma°î_id_is_vÆid
(
bÀ_g≠_ma°î_id_t
 c⁄° * 
p_ma°î_id
)

552 
	`NRF_PM_DEBUG_CHECK
(
m_moduÀ_öôülized
);

554 i‡(
p_ma°î_id
->
ediv
 != 0)

556  
åue
;

559 
uöt32_t
 
i
 = 0; i < 
BLE_GAP_SEC_RAND_LEN
; i++)

561 i‡(
p_ma°î_id
->
ønd
[
i
] != 0)

563  
åue
;

566  
Ál£
;

567 
	}
}

575 
	$≥î_id_£t
(
uöt16_t
 
c⁄n_h™dÀ
, 
pm_≥î_id_t
 
≥î_id
)

577 
uöt8_t
 
c⁄n_ödex
 = 
	`gë_c⁄√˘i⁄_by_c⁄n_h™dÀ
(
c⁄n_h™dÀ
);

578 i‡(
c⁄n_ödex
 !
IM_NO_INVALID_CONN_HANDLES
)

580 
m_c⁄√˘i⁄s
[
c⁄n_ödex
].
≥î_id
 =Öeer_id;

582 
	}
}

585 
	$im_√w_≥î_id
(
uöt16_t
 
c⁄n_h™dÀ
, 
pm_≥î_id_t
 
≥î_id
)

587 
	`NRF_PM_DEBUG_CHECK
(
m_moduÀ_öôülized
);

589 
	`≥î_id_£t
(
c⁄n_h™dÀ
, 
≥î_id
);

590 
	}
}

593 
ªt_code_t
 
	$im_≥î_‰ì
(
pm_≥î_id_t
 
≥î_id
)

595 
uöt16_t
 
c⁄n_h™dÀ
;

596 
ªt_code_t
 
ªt
;

598 
	`NRF_PM_DEBUG_CHECK
(
m_moduÀ_öôülized
);

600 
c⁄n_h™dÀ
 = 
	`im_c⁄n_h™dÀ_gë
(
≥î_id
);

601 
ªt
 = 
	`pdb_≥î_‰ì
(
≥î_id
);

603 i‡((
c⁄n_h™dÀ
 !
BLE_CONN_HANDLE_INVALID
Ë&& (
ªt
 =
NRF_SUCCESS
))

605 
	`≥î_id_£t
(
c⁄n_h™dÀ
, 
PM_PEER_ID_INVALID
);

607  
ªt
;

608 
	}
}

613 
ªt_code_t
 
	$≥îs_id_keys_gë
(
pm_≥î_id_t
 c⁄° * 
p_≥îs
,

614 
uöt32_t
 
≥î_˙t
,

615 
bÀ_g≠_addr_t
 * 
p_g≠_addrs
,

616 
uöt32_t
 * 
p_addr_˙t
,

617 
bÀ_g≠_úk_t
 * 
p_g≠_úks
,

618 
uöt32_t
 * 
p_úk_˙t
)

620 
ªt_code_t
 
ªt
;

622 
pm_≥î_d©a_b⁄dög_t
 
b⁄d_d©a
;

623 
pm_≥î_d©a_t
 
≥î_d©a
;

625 
uöt32_t
 c⁄° 
buf_size
 = (
b⁄d_d©a
);

627 
boﬁ
 
c›y_addrs
 = 
Ál£
;

628 
boﬁ
 
c›y_úks
 = 
Ál£
;

630 
	`NRF_PM_DEBUG_CHECK
(
p_≥îs
 !
NULL
);

633 
	`NRF_PM_DEBUG_CHECK
((
p_g≠_addrs
 !
NULL
Ë|| (
p_g≠_úks
 != NULL));

635 i‡((
p_g≠_addrs
 !
NULL
Ë&& (
p_addr_˙t
 != NULL))

637 
	`NRF_PM_DEBUG_CHECK
((*
p_addr_˙t
Ë>
≥î_˙t
);

639 
c›y_addrs
 = 
åue
;

640 *
p_addr_˙t
 = 0;

643 i‡((
p_g≠_úks
 !
NULL
Ë&& (
p_úk_˙t
 != NULL))

645 
	`NRF_PM_DEBUG_CHECK
((*
p_úk_˙t
Ë>
≥î_˙t
);

647 
c›y_úks
 = 
åue
;

648 *
p_úk_˙t
 = 0;

651 
	`mem£t
(&
≥î_d©a
, 0x00, (peer_data));

652 
≥î_d©a
.
p_b⁄dög_d©a
 = &
b⁄d_d©a
;

656 
uöt32_t
 
i
 = 0; i < 
≥î_˙t
; i++)

658 
	`mem£t
(&
b⁄d_d©a
, 0x00, (bond_data));

661 
ªt
 = 
	`pds_≥î_d©a_ªad
(
p_≥îs
[
i
], 
PM_PEER_DATA_ID_BONDING
,

662 &
≥î_d©a
, &
buf_size
);

664 i‡((
ªt
 =
NRF_ERROR_NOT_FOUND
Ë|| (ªà=
NRF_ERROR_INVALID_PARAM
))

667  
NRF_ERROR_NOT_FOUND
;

670 
uöt8_t
 c⁄° 
addr_ty≥
 = 
b⁄d_d©a
.
≥î_bÀ_id
.
id_addr_öfo
.addr_type;

672 i‡((
addr_ty≥
 !
BLE_GAP_ADDR_TYPE_PUBLIC
) &&

673 (
addr_ty≥
 !
BLE_GAP_ADDR_TYPE_RANDOM_STATIC
))

676  
BLE_ERROR_GAP_INVALID_BLE_ADDR
;

680 i‡(
c›y_addrs
)

682 
	`mem˝y
(&
p_g≠_addrs
[
i
], &
b⁄d_d©a
.
≥î_bÀ_id
.
id_addr_öfo
, (
bÀ_g≠_addr_t
));

683 (*
p_addr_˙t
)++;

687 i‡(
c›y_úks
)

689 
	`mem˝y
(&
p_g≠_úks
[
i
], 
b⁄d_d©a
.
≥î_bÀ_id
.
id_öfo
.
úk
, 
BLE_GAP_SEC_KEY_LEN
);

690 (*
p_úk_˙t
)++;

694  
NRF_SUCCESS
;

695 
	}
}

698 
ªt_code_t
 
	$im_devi˚_idítôõs_li°_£t
(
pm_≥î_id_t
 c⁄° * 
p_≥îs
,

699 
uöt32_t
 
≥î_˙t
)

701 #i‡(
NRF_SD_BLE_API_VERSION
 == 3)

703 
ªt_code_t
 
ªt
;

704 
pm_≥î_d©a_t
 
≥î_d©a
;

705 
pm_≥î_d©a_b⁄dög_t
 
b⁄d_d©a
;

707 
bÀ_g≠_id_key_t
 
keys
[
BLE_GAP_DEVICE_IDENTITIES_MAX_COUNT
];

708 
bÀ_g≠_id_key_t
 c⁄° * 
key_±rs
[
BLE_GAP_DEVICE_IDENTITIES_MAX_COUNT
];

710 i‡((
p_≥îs
 =
NULL
Ë|| (
≥î_˙t
 == 0))

713  
	`sd_bÀ_g≠_devi˚_idítôõs_£t
(
NULL
, NULL, 0);

716 
≥î_d©a
.
p_b⁄dög_d©a
 = &
b⁄d_d©a
;

717 
uöt32_t
 c⁄° 
buf_size
 = (
b⁄d_d©a
);

719 
	`mem£t
(
keys
, 0x00, (keys));

720 
uöt32_t
 
i
 = 0; i < 
BLE_GAP_DEVICE_IDENTITIES_MAX_COUNT
; i++)

722 
key_±rs
[
i
] = &
keys
[i];

725 
uöt32_t
 
i
 = 0; i < 
≥î_˙t
; i++)

727 
	`mem£t
(&
b⁄d_d©a
, 0x00, (bond_data));

730 
ªt
 = 
	`pds_≥î_d©a_ªad
(
p_≥îs
[
i
], 
PM_PEER_DATA_ID_BONDING
,

731 &
≥î_d©a
, &
buf_size
);

733 i‡((
ªt
 =
NRF_ERROR_NOT_FOUND
Ë|| (ªà=
NRF_ERROR_INVALID_PARAM
))

736  
NRF_ERROR_NOT_FOUND
;

739 
uöt8_t
 c⁄° 
addr_ty≥
 = 
b⁄d_d©a
.
≥î_bÀ_id
.
id_addr_öfo
.addr_type;

741 i‡((
addr_ty≥
 !
BLE_GAP_ADDR_TYPE_PUBLIC
) &&

742 (
addr_ty≥
 !
BLE_GAP_ADDR_TYPE_RANDOM_STATIC
))

745  
BLE_ERROR_GAP_INVALID_BLE_ADDR
;

749 
	`mem˝y
(&
keys
[
i
], &
b⁄d_d©a
.
≥î_bÀ_id
, (
bÀ_g≠_id_key_t
));

752  
	`sd_bÀ_g≠_devi˚_idítôõs_£t
(
key_±rs
, 
NULL
, 
≥î_˙t
);

756  
NRF_ERROR_NOT_SUPPORTED
;

759 
	}
}

762 #i‡(
NRF_SD_BLE_API_VERSION
 == 2)

764 
ªt_code_t
 
	$addªss_£t_v2
(
uöt8_t
 
cy˛e_mode
, 
bÀ_g≠_addr_t
 * 
p_addr
)

766 
	`NRF_PM_DEBUG_CHECK
(
p_addr
 !
NULL
);

768 
ªt_code_t
 
ªt
 = 
	`sd_bÀ_g≠_addªss_£t
(
cy˛e_mode
, 
p_addr
);

770 
ªt
)

772 
NRF_SUCCESS
:

773 
NRF_ERROR_BUSY
:

774 
NRF_ERROR_INVALID_STATE
:

775 
NRF_ERROR_INVALID_PARAM
:

776 
BLE_ERROR_GAP_INVALID_BLE_ADDR
:

777  
ªt
;

780  
NRF_ERROR_INTERNAL
;

782 
	}
}

787 
ªt_code_t
 
	$im_id_addr_£t
(
bÀ_g≠_addr_t
 c⁄° * 
p_addr
)

789 #i‡(
NRF_SD_BLE_API_VERSION
 == 2)

791 
ªt_code_t
 
ªt
;

792 
bÀ_g≠_addr_t
 
cuºít_addr
;

794 
	`NRF_PM_DEBUG_CHECK
(
p_addr
 !
NULL
);

796 (Ë
	`sd_bÀ_g≠_addªss_gë
(&
cuºít_addr
);

798 
ªt
 = 
	`addªss_£t_v2
(
BLE_GAP_ADDR_CYCLE_MODE_NONE
, (
bÀ_g≠_addr_t
 *)
p_addr
);

799 i‡(
ªt
 !
NRF_SUCCESS
)

801  
ªt
;

804 i‡–
cuºít_addr
.
addr_ty≥
 =
BLE_GAP_ADDR_TYPE_RANDOM_PRIVATE_RESOLVABLE


805 || 
cuºít_addr
.
addr_ty≥
 =
BLE_GAP_ADDR_TYPE_RANDOM_PRIVATE_NON_RESOLVABLE
)

809 
ªt
 = 
	`addªss_£t_v2
(
BLE_GAP_ADDR_CYCLE_MODE_AUTO
, &
cuºít_addr
);

810 i‡(
ªt
 !
NRF_SUCCESS
)

812  
ªt
;

816 
	`mem˝y
(&
m_cuºít_id_addr
, 
p_addr
, (
bÀ_g≠_addr_t
));

818  
NRF_SUCCESS
;

822  
	`sd_bÀ_g≠_addr_£t
(
p_addr
);

825 
	}
}

828 
ªt_code_t
 
	$im_id_addr_gë
(
bÀ_g≠_addr_t
 * 
p_addr
)

830 
	`NRF_PM_DEBUG_CHECK
(
p_addr
 !
NULL
);

832 #i‡(
NRF_SD_BLE_API_VERSION
 == 2)

833 
	`mem˝y
(
p_addr
, &
m_cuºít_id_addr
, (
bÀ_g≠_addr_t
));

834  
NRF_SUCCESS
;

836  
	`sd_bÀ_g≠_addr_gë
(
p_addr
);

838 
	}
}

841 
ªt_code_t
 
	$im_¥ivacy_£t
(
pm_¥ivacy_∑øms_t
 c⁄° * 
p_¥ivacy_∑øms
)

843 #i‡(
NRF_SD_BLE_API_VERSION
 == 2)

845 
ªt_code_t
 
ªt
;

846 
bÀ_g≠_addr_t
 
¥ivacy_addr
;

847 
bÀ_g≠_úk_t
 
cuºít_úk
;

848 
bÀ_›t_t
 
¥ivacy_›ti⁄s
;

849 
bÀ_›t_t
 
cuºít_¥ivacy_›ti⁄s
;

851 
	`NRF_PM_DEBUG_CHECK
(
p_¥ivacy_∑øms
 !
NULL
);

853 
¥ivacy_addr
.
addr_ty≥
 = 
p_¥ivacy_∑øms
->
¥iv©e_addr_ty≥
;

854 
¥ivacy_›ti⁄s
.
g≠_›t
.
¥ivacy
.
p_úk
 = 
p_¥ivacy_∑øms
->
p_devi˚_úk
;

855 
¥ivacy_›ti⁄s
.
g≠_›t
.
¥ivacy
.
öãrvÆ_s
 = 
p_¥ivacy_∑øms
->
¥iv©e_addr_cy˛e_s
;

856 
cuºít_¥ivacy_›ti⁄s
.
g≠_›t
.
¥ivacy
.
p_úk
 = &
cuºít_úk
;

859 (Ë
	`sd_bÀ_›t_gë
(
BLE_GAP_OPT_PRIVACY
, &
cuºít_¥ivacy_›ti⁄s
);

860 (Ë
	`sd_bÀ_›t_£t
(
BLE_GAP_OPT_PRIVACY
, &
¥ivacy_›ti⁄s
);

862 i‡(
p_¥ivacy_∑øms
->
¥ivacy_mode
 =
BLE_GAP_PRIVACY_MODE_OFF
)

864 
ªt
 = 
	`addªss_£t_v2
(
BLE_GAP_ADDR_CYCLE_MODE_NONE
, &
m_cuºít_id_addr
);

868 
ªt
 = 
	`addªss_£t_v2
(
BLE_GAP_ADDR_CYCLE_MODE_AUTO
, &
¥ivacy_addr
);

871 i‡(
ªt
 !
NRF_SUCCESS
)

874 (Ë
	`sd_bÀ_›t_£t
(
BLE_GAP_OPT_PRIVACY
, &
cuºít_¥ivacy_›ti⁄s
);

880  
ªt
;

884  
	`sd_bÀ_g≠_¥ivacy_£t
(
p_¥ivacy_∑øms
);

887 
	}
}

890 
ªt_code_t
 
	$im_¥ivacy_gë
(
pm_¥ivacy_∑øms_t
 * 
p_¥ivacy_∑øms
)

892 #i‡(
NRF_SD_BLE_API_VERSION
 == 2)

894 
bÀ_g≠_addr_t
 
cur_addr
;

895 
bÀ_›t_t
 
cur_¥ivacy_›t
;

897 
	`NRF_PM_DEBUG_CHECK
(
p_¥ivacy_∑øms
 !
NULL
);

898 
	`NRF_PM_DEBUG_CHECK
(
p_¥ivacy_∑øms
->
p_devi˚_úk
 !
NULL
);

900 
cur_¥ivacy_›t
.
g≠_›t
.
¥ivacy
.
p_úk
 = 
p_¥ivacy_∑øms
->
p_devi˚_úk
;

903 (Ë
	`sd_bÀ_g≠_addªss_gë
(&
cur_addr
);

905 i‡–
cur_addr
.
addr_ty≥
 =
BLE_GAP_ADDR_TYPE_RANDOM_PRIVATE_RESOLVABLE


906 || 
cur_addr
.
addr_ty≥
 =
BLE_GAP_ADDR_TYPE_RANDOM_PRIVATE_NON_RESOLVABLE
)

908 
p_¥ivacy_∑øms
->
¥ivacy_mode
 = 
BLE_GAP_PRIVACY_MODE_DEVICE_PRIVACY
;

909 
p_¥ivacy_∑øms
->
¥iv©e_addr_ty≥
 = 
cur_addr
.
addr_ty≥
;

913 
p_¥ivacy_∑øms
->
¥ivacy_mode
 = 
BLE_GAP_PRIVACY_MODE_OFF
;

917 (Ë
	`sd_bÀ_›t_gë
(
BLE_GAP_OPT_PRIVACY
, &
cur_¥ivacy_›t
);

919 
p_¥ivacy_∑øms
->
¥iv©e_addr_cy˛e_s
 = 
cur_¥ivacy_›t
.
g≠_›t
.
¥ivacy
.
öãrvÆ_s
;

921  
NRF_SUCCESS
;

925  
	`sd_bÀ_g≠_¥ivacy_gë
(
p_¥ivacy_∑øms
);

928 
	}
}

934 
ªt_code_t
 
	$im_whôñi°_gë
(
bÀ_g≠_addr_t
 * 
p_addrs
,

935 
uöt32_t
 * 
p_addr_˙t
,

936 
bÀ_g≠_úk_t
 * 
p_úks
,

937 
uöt32_t
 * 
p_úk_˙t
)

940 
	`NRF_PM_DEBUG_CHECK
((
p_addrs
 !
NULL
Ë|| (
p_úks
 != NULL));

941 
	`NRF_PM_DEBUG_CHECK
((
p_addr_˙t
 !
NULL
Ë|| (
p_úk_˙t
 != NULL));

943 i‡(((
p_addr_˙t
 !
NULL
Ë&& (
m_wli°ed_≥î_˙t
 > *p_addr_cnt)) ||

944 ((
p_úk_˙t
 !
NULL
Ë&& (
m_wli°ed_≥î_˙t
 > *p_irk_cnt)))

947  
NRF_ERROR_NO_MEM
;

953  
	`≥îs_id_keys_gë
(
m_wli°ed_≥îs
, 
m_wli°ed_≥î_˙t
,

954 
p_addrs
, 
p_addr_˙t
,

955 
p_úks
, 
p_úk_˙t
);

956 
	}
}

964 
ªt_code_t
 
	$im_whôñi°_£t
(
pm_≥î_id_t
 c⁄° * 
p_≥îs
,

965 
uöt32_t
 
≥î_˙t
)

968 
	`mem£t
(
m_wli°ed_≥îs
, 0x00, (m_wlisted_peers));

970 i‡((
p_≥îs
 =
NULL
Ë|| (
≥î_˙t
 == 0))

973 
m_wli°ed_≥î_˙t
 = 0;

974 #i‡(
NRF_SD_BLE_API_VERSION
 == 3)

977  
	`sd_bÀ_g≠_whôñi°_£t
(
NULL
, 0);

980  
NRF_SUCCESS
;

987 
m_wli°ed_≥î_˙t
 = 
≥î_˙t
;

988 
	`mem˝y
(
m_wli°ed_≥îs
, 
p_≥îs
, (
pm_≥î_id_t
Ë* 
≥î_˙t
);

990 #i‡(
NRF_SD_BLE_API_VERSION
 == 3)

992 
ªt_code_t
 
ªt
;

993 
uöt32_t
 
wli°_addr_˙t
 = 0;

995 
bÀ_g≠_addr_t
 c⁄° * 
addr_±rs
[
BLE_GAP_WHITELIST_ADDR_MAX_COUNT
];

996 
bÀ_g≠_addr_t
 
addrs
[
BLE_GAP_WHITELIST_ADDR_MAX_COUNT
];

998 
	`mem£t
(
addrs
, 0x00, (addrs));

1001 
ªt
 = 
	`≥îs_id_keys_gë
(
p_≥îs
, 
≥î_˙t
, 
addrs
, &
wli°_addr_˙t
, 
NULL
, NULL);

1003 i‡(
ªt
 !
NRF_SUCCESS
)

1007  
ªt
;

1010 
uöt32_t
 
i
 = 0; i < 
BLE_GAP_WHITELIST_ADDR_MAX_COUNT
; i++)

1012 
addr_±rs
[
i
] = &
addrs
[i];

1017  
	`sd_bÀ_g≠_whôñi°_£t
(
addr_±rs
, 
≥î_˙t
);

1021  
NRF_SUCCESS
;

1024 
	}
}

1050 
	$ah
(
uöt8_t
 c⁄° * 
p_k
, uöt8_àc⁄° * 
p_r
, uöt8_à* 
p_loˇl_hash
)

1052 
ƒf_ecb_hÆ_d©a_t
 
ecb_hÆ_d©a
;

1054 
uöt32_t
 
i
 = 0; i < 
SOC_ECB_KEY_LENGTH
; i++)

1056 
ecb_hÆ_d©a
.
key
[
i
] = 
p_k
[
SOC_ECB_KEY_LENGTH
 - 1 - i];

1059 
	`mem£t
(
ecb_hÆ_d©a
.
˛óπext
, 0, 
SOC_ECB_KEY_LENGTH
 - 
IM_ADDR_CLEARTEXT_LENGTH
);

1061 
uöt32_t
 
i
 = 0; i < 
IM_ADDR_CLEARTEXT_LENGTH
; i++)

1063 
ecb_hÆ_d©a
.
˛óπext
[
SOC_ECB_KEY_LENGTH
 - 1 - 
i
] = 
p_r
[i];

1067 (Ë
	`sd_ecb_block_í¸y±
(&
ecb_hÆ_d©a
);

1069 
uöt32_t
 
i
 = 0; i < 
IM_ADDR_CIPHERTEXT_LENGTH
; i++)

1071 
p_loˇl_hash
[
i
] = 
ecb_hÆ_d©a
.
cùhîãxt
[
SOC_ECB_KEY_LENGTH
 - 1 - i];

1073 
	}
}

1076 
boﬁ
 
	$im_addªss_ªsﬁve
(
bÀ_g≠_addr_t
 c⁄° * 
p_addr
, 
bÀ_g≠_úk_t
 c⁄° * 
p_úk
)

1078 
	`NRF_PM_DEBUG_CHECK
(
m_moduÀ_öôülized
);

1080 
uöt8_t
 
hash
[
IM_ADDR_CIPHERTEXT_LENGTH
];

1081 
uöt8_t
 
loˇl_hash
[
IM_ADDR_CIPHERTEXT_LENGTH
];

1082 
uöt8_t
 
¥™d
[
IM_ADDR_CLEARTEXT_LENGTH
];

1084 i‡(
p_addr
->
addr_ty≥
 !
BLE_GAP_ADDR_TYPE_RANDOM_PRIVATE_RESOLVABLE
)

1086  
Ál£
;

1089 
	`mem˝y
(
hash
, 
p_addr
->
addr
, 
IM_ADDR_CIPHERTEXT_LENGTH
);

1090 
	`mem˝y
(
¥™d
, &
p_addr
->
addr
[
IM_ADDR_CIPHERTEXT_LENGTH
], 
IM_ADDR_CLEARTEXT_LENGTH
);

1091 
	`ah
(
p_úk
->
úk
, 
¥™d
, 
loˇl_hash
);

1093  (
	`memcmp
(
hash
, 
loˇl_hash
, 
IM_ADDR_CIPHERTEXT_LENGTH
) == 0);

1094 
	}
}

	@D:\Private\Programing\MCU\Nordic\ble_app_template\nRF5_SDK_12.3.0_d7731ad\components\ble\peer_manager\peer_data.c

41 
	~"sdk_comm⁄.h
"

42 #i‡
NRF_MODULE_ENABLED
(
PEER_MANAGER
)

43 
	~"≥î_d©a.h
"

45 
	~"≥î_m™agî_ty≥s.h
"

46 
	~"fds.h
"

49 
	$≥î_d©a_∑πs_gë
(
pm_≥î_d©a_c⁄°_t
 c⁄° * 
p_≥î_d©a
, 
fds_ªc‹d_chunk_t
 * 
p_chunks
, 
uöt16_t
 * 
p_n_chunks
)

51 i‡(
p_n_chunks
 =
NULL
)

54 i‡((
p_≥î_d©a
 =
NULL
Ë|| (
p_chunks
 == NULL))

56 *
p_n_chunks
 = 0;

60 
p_chunks
[0].
p_d©a
 = 
p_≥î_d©a
->
p_Æl_d©a
;

61 
p_chunks
[0].
Àngth_w‹ds
 = 
p_≥î_d©a
->length_words;

62 *
p_n_chunks
 = 1;

64 
	}
}

67 
ªt_code_t
 
	$≥î_d©a_de£rülize
(
pm_≥î_d©a_Êash_t
 c⁄° * 
p_ö_d©a
, 
pm_≥î_d©a_t
 * 
p_out_d©a
)

69 
ªt_code_t
 
îr_code
 = 
NRF_SUCCESS
;

71 i‡((
p_ö_d©a
 =
NULL
Ë|| (
p_out_d©a
 == NULL))

73 
îr_code
 = 
NRF_ERROR_NULL
;

77 i‡(
p_out_d©a
->
Àngth_w‹ds
 < 
p_ö_d©a
->length_words)

79 
p_out_d©a
->
Àngth_w‹ds
 = 
p_ö_d©a
->length_words;

80 
îr_code
 = 
NRF_ERROR_NO_MEM
;

84 
p_out_d©a
->
Àngth_w‹ds
 = 
p_ö_d©a
->length_words;

85 
p_out_d©a
->
d©a_id
 = 
p_ö_d©a
->data_id;

87 
	`mem˝y
(
p_out_d©a
->
p_Æl_d©a
, 
p_ö_d©a
->p_Æl_d©a,Ö_ö_d©a->
Àngth_w‹ds
 * 4);

90  
îr_code
;

91 
	}
}

	@D:\Private\Programing\MCU\Nordic\ble_app_template\nRF5_SDK_12.3.0_d7731ad\components\ble\peer_manager\peer_data_storage.c

41 
	~"sdk_comm⁄.h
"

42 #i‡
NRF_MODULE_ENABLED
(
PEER_MANAGER
)

43 
	~"≥î_d©a_°‹age.h
"

45 
	~<°döt.h
>

46 
	~<°rög.h
>

47 
	~"sdk_îr‹s.h
"

48 
	~"≥î_m™agî_ty≥s.h
"

49 
	~"≥î_m™agî_öã∫Æ.h
"

50 
	~"≥î_id.h
"

51 
	~"≥î_d©a.h
"

52 
	~"fds.h
"

56 
	#VERIFY_PEER_ID_IN_RANGE
(
id
Ë
	`VERIFY_FALSE
((id >
PM_PEER_ID_N_AVAILABLE_IDS
), \

57 
NRF_ERROR_INVALID_PARAM
)

	)

60 
	#VERIFY_PEER_DATA_ID_IN_RANGE
(
id
Ë
	`VERIFY_TRUE
(
	`≥î_d©a_id_is_vÆid
(id), \

61 
NRF_ERROR_INVALID_PARAM
)

	)

64 
	#PDS_EVENT_HANDLERS_CNT
 ((
m_evt_h™dÀrs
Ë/ (m_evt_h™dÀrs[0]))

	)

68 
pdb_pds_evt_h™dÀr
(
pds_evt_t
 const *);

72 
pds_evt_h™dÀr_t
 c⁄° 
	gm_evt_h™dÀrs
[] =

74 
pdb_pds_evt_h™dÀr
,

77 
boﬁ
 
	gm_moduÀ_öôülized
 = 
Ál£
;

78 
boﬁ
 
	gm_≥î_dñëe_queued
 = 
Ál£
;

79 
boﬁ
 
	gm_≥î_dñëe_⁄goög
 = 
Ál£
;

82 
fds_föd_tokí_t
 
	gm_fds_·ok
;

86 
	$pds_evt_£nd
(
pds_evt_t
 * 
p_evít
)

88 
uöt32_t
 
i
 = 0; i < 
PDS_EVENT_HANDLERS_CNT
; i++)

90 
m_evt_h™dÀrs
[
i
](
p_evít
);

92 
	}
}

96 
uöt16_t
 
	$≥î_id_to_fûe_id
(
pm_≥î_id_t
 
≥î_id
)

98  (
uöt16_t
)(
≥î_id
 + 
PEER_ID_TO_FILE_ID
);

99 
	}
}

103 
pm_≥î_id_t
 
	$fûe_id_to_≥î_id
(
uöt16_t
 
fûe_id
)

105  (
pm_≥î_id_t
)(
fûe_id
 + 
FILE_ID_TO_PEER_ID
);

106 
	}
}

110 
uöt16_t
 
	$≥î_d©a_id_to_ªc‹d_key
(
pm_≥î_d©a_id_t
 
≥î_d©a_id
)

112  (
uöt16_t
)(
≥î_d©a_id
 + 
DATA_ID_TO_RECORD_KEY
);

113 
	}
}

117 
pm_≥î_d©a_id_t
 
	$ªc‹d_key_to_≥î_d©a_id
(
uöt16_t
 
ªc‹d_key
)

119  (
pm_≥î_d©a_id_t
)(
ªc‹d_key
 + 
RECORD_KEY_TO_DATA_ID
);

120 
	}
}

124 
boﬁ
 
	$fûe_id_wôhö_pm_ønge
(
uöt16_t
 
fûe_id
)

126  ((
PDS_FIRST_RESERVED_FILE_ID
 <
fûe_id
)

127 && (
fûe_id
 <
PDS_LAST_RESERVED_FILE_ID
));

128 
	}
}

132 
boﬁ
 
	$ªc‹d_key_wôhö_pm_ønge
(
uöt16_t
 
ªc‹d_key
)

134  ((
PDS_FIRST_RESERVED_RECORD_KEY
 <
ªc‹d_key
)

135 && (
ªc‹d_key
 <
PDS_LAST_RESERVED_RECORD_KEY
));

136 
	}
}

139 
boﬁ
 
	$≥î_d©a_id_is_vÆid
(
pm_≥î_d©a_id_t
 
d©a_id
)

141  ((
d©a_id
 =
PM_PEER_DATA_ID_BONDING
) ||

142 (
d©a_id
 =
PM_PEER_DATA_ID_SERVICE_CHANGED_PENDING
) ||

143 (
d©a_id
 =
PM_PEER_DATA_ID_GATT_LOCAL
) ||

144 (
d©a_id
 =
PM_PEER_DATA_ID_GATT_REMOTE
) ||

145 (
d©a_id
 =
PM_PEER_DATA_ID_PEER_RANK
) ||

146 (
d©a_id
 =
PM_PEER_DATA_ID_APPLICATION
));

147 
	}
}

152 
	$≥î_d©a_dñëe
()

154 
ªt_code_t
 
ªt
;

155 
pm_≥î_id_t
 
≥î_id
;

156 
uöt16_t
 
fûe_id
;

157 
fds_ªc‹d_desc_t
 
desc
;

158 
fds_föd_tokí_t
 
·ok
;

160 
	`mem£t
(&
·ok
, 0x00, (
fds_föd_tokí_t
));

161 
≥î_id
 = 
	`≥î_id_gë_√xt_dñëed
(
PM_PEER_ID_INVALID
);

163  (
≥î_id
 !
PM_PEER_ID_INVALID
)

164 && (
	`fds_ªc‹d_föd_ö_fûe
(
	`≥î_id_to_fûe_id
(
≥î_id
), &
desc
, &
·ok
)

165 =
FDS_ERR_NOT_FOUND
))

167 
	`≥î_id_‰ì
(
≥î_id
);

168 
≥î_id
 = 
	`≥î_id_gë_√xt_dñëed
(peer_id);

171 i‡(!
m_≥î_dñëe_⁄goög
 && (
≥î_id
 !
PM_PEER_ID_INVALID
))

173 
m_≥î_dñëe_⁄goög
 = 
åue
;

175 
fûe_id
 = 
	`≥î_id_to_fûe_id
(
≥î_id
);

176 
ªt
 = 
	`fds_fûe_dñëe
(
fûe_id
);

178 i‡(
ªt
 =
FDS_ERR_NO_SPACE_IN_QUEUES
)

180 
m_≥î_dñëe_queued
 = 
åue
;

182 i‡(
ªt
 !
NRF_SUCCESS
)

184 
m_≥î_dñëe_⁄goög
 = 
Ál£
;

186 
pds_evt_t
 
pds_evt
;

188 
pds_evt
.
evt_id
 = 
PDS_EVT_ERROR_UNEXPECTED
;

189 
pds_evt
.
≥î_id
 =Öeer_id;

190 
pds_evt
.
d©a_id
 = 
PM_PEER_DATA_ID_INVALID
;

191 
pds_evt
.
°‹e_tokí
 = 
PM_STORE_TOKEN_INVALID
;

192 
pds_evt
.
ªsu…
 = 
ªt
;

194 
	`pds_evt_£nd
(&
pds_evt
);

197 
	}
}

200 
ªt_code_t
 
	$≥î_d©a_föd
(
pm_≥î_id_t
 
≥î_id
,

201 
pm_≥î_d©a_id_t
 
d©a_id
,

202 
fds_ªc‹d_desc_t
 * c⁄° 
p_desc
)

204 
ªt_code_t
 
ªt
;

205 
fds_föd_tokí_t
 
·ok
;

207 
	`NRF_PM_DEBUG_CHECK
(
≥î_id
 < 
PM_PEER_ID_N_AVAILABLE_IDS
);

208 
	`NRF_PM_DEBUG_CHECK
(
	`≥î_d©a_id_is_vÆid
(
d©a_id
));

209 
	`NRF_PM_DEBUG_CHECK
(
p_desc
 !
NULL
);

211 
	`mem£t
(&
·ok
, 0x00, (
fds_föd_tokí_t
));

213 
uöt16_t
 
fûe_id
 = 
	`≥î_id_to_fûe_id
(
≥î_id
);

214 
uöt16_t
 
ªc‹d_key
 = 
	`≥î_d©a_id_to_ªc‹d_key
(
d©a_id
);

216 
ªt
 = 
	`fds_ªc‹d_föd
(
fûe_id
, 
ªc‹d_key
, 
p_desc
, &
·ok
);

218 i‡(
ªt
 !
FDS_SUCCESS
)

220  
NRF_ERROR_NOT_FOUND
;

223  
NRF_SUCCESS
;

224 
	}
}

227 
	$≥î_ids_lﬂd
()

229 
fds_ªc‹d_desc_t
 
ªc‹d_desc
;

230 
fds_Êash_ªc‹d_t
 
ªc‹d
;

231 
fds_föd_tokí_t
 
·ok
;

233 
	`mem£t
(&
·ok
, 0x00, (
fds_föd_tokí_t
));

235 
uöt16_t
 c⁄° 
ªc‹d_key
 = 
	`≥î_d©a_id_to_ªc‹d_key
(
PM_PEER_DATA_ID_BONDING
);

237 
	`fds_ªc‹d_föd_by_key
(
ªc‹d_key
, &
ªc‹d_desc
, &
·ok
Ë=
FDS_SUCCESS
)

239 
pm_≥î_id_t
 
≥î_id
;

243 ()
	`fds_ªc‹d_›í
(&
ªc‹d_desc
, &
ªc‹d
);

244 
≥î_id
 = 
	`fûe_id_to_≥î_id
(
ªc‹d
.
p_hódî
->
ic
.
fûe_id
);

245 ()
	`fds_ªc‹d_˛o£
(&
ªc‹d_desc
);

247 ()
	`≥î_id_Æloˇã
(
≥î_id
);

249 
	}
}

252 
	$fds_evt_h™dÀr
(
fds_evt_t
 c⁄° * c⁄° 
p_fds_evt
)

254 
pds_evt_t
 
pds_evt
;

256 
pds_evt
.
ªsu…
 = (
p_fds_evt
->ªsu… =
FDS_SUCCESS
);

258 
p_fds_evt
->
id
)

260 
FDS_EVT_WRITE
:

261 
FDS_EVT_UPDATE
:

262 i‡–
	`fûe_id_wôhö_pm_ønge
(
p_fds_evt
->
wrôe
.
fûe_id
)

263 || 
	`ªc‹d_key_wôhö_pm_ønge
(
p_fds_evt
->
wrôe
.
ªc‹d_key
))

265 
pds_evt
.
≥î_id
 = 
	`fûe_id_to_≥î_id
(
p_fds_evt
->
wrôe
.
fûe_id
);

266 
pds_evt
.
d©a_id
 = 
	`ªc‹d_key_to_≥î_d©a_id
(
p_fds_evt
->
wrôe
.
ªc‹d_key
);

268 i‡(
p_fds_evt
->
id
 =
FDS_EVT_WRITE
)

270 
pds_evt
.
evt_id
 = (
p_fds_evt
->
ªsu…
 =
FDS_SUCCESS
Ë? 
PDS_EVT_STORED
 :

271 
PDS_EVT_ERROR_STORE
;

275 
pds_evt
.
evt_id
 = (
p_fds_evt
->
ªsu…
 =
FDS_SUCCESS
Ë? 
PDS_EVT_UPDATED
 :

276 
PDS_EVT_ERROR_UPDATE
;

279 
pds_evt
.
ªsu…
 = 
p_fds_evt
->result;

280 
pds_evt
.
°‹e_tokí
 = 
p_fds_evt
->
wrôe
.
ªc‹d_id
;

282 
	`pds_evt_£nd
(&
pds_evt
);

286 
FDS_EVT_DEL_RECORD
:

287 i‡–
	`fûe_id_wôhö_pm_ønge
(
p_fds_evt
->
dñ
.
fûe_id
)

288 || 
	`ªc‹d_key_wôhö_pm_ønge
(
p_fds_evt
->
dñ
.
ªc‹d_key
))

290 
pds_evt
.
≥î_id
 = 
	`fûe_id_to_≥î_id
(
p_fds_evt
->
dñ
.
fûe_id
);

291 
pds_evt
.
d©a_id
 = 
	`ªc‹d_key_to_≥î_d©a_id
(
p_fds_evt
->
dñ
.
ªc‹d_key
);

293 
pds_evt
.
evt_id
 = (
p_fds_evt
->
ªsu…
 =
FDS_SUCCESS
Ë? 
PDS_EVT_CLEARED
 :

294 
PDS_EVT_ERROR_CLEAR
;

296 
pds_evt
.
°‹e_tokí
 = 
p_fds_evt
->
dñ
.
ªc‹d_id
;

298 
	`pds_evt_£nd
(&
pds_evt
);

302 
FDS_EVT_DEL_FILE
:

304 i‡–
	`fûe_id_wôhö_pm_ønge
(
p_fds_evt
->
dñ
.
fûe_id
)

305 && (
p_fds_evt
->
dñ
.
ªc‹d_key
 =
FDS_RECORD_KEY_DIRTY
))

307 
pds_evt
.
≥î_id
 = 
	`fûe_id_to_≥î_id
(
p_fds_evt
->
dñ
.
fûe_id
);

308 
pds_evt
.
d©a_id
 = 
	`ªc‹d_key_to_≥î_d©a_id
(
p_fds_evt
->
dñ
.
ªc‹d_key
);

310 
pds_evt
.
d©a_id
 = 
PM_PEER_DATA_ID_INVALID
;

311 i‡(
p_fds_evt
->
ªsu…
 =
FDS_SUCCESS
)

313 
pds_evt
.
evt_id
 = 
PDS_EVT_PEER_ID_CLEAR
;

314 
	`≥î_id_‰ì
(
pds_evt
.
≥î_id
);

318 
pds_evt
.
evt_id
 = 
PDS_EVT_ERROR_PEER_ID_CLEAR
;

321 
m_≥î_dñëe_queued
 = 
Ál£
;

322 
m_≥î_dñëe_⁄goög
 = 
Ál£
;

324 
	`≥î_d©a_dñëe
();

326 
	`pds_evt_£nd
(&
pds_evt
);

331 
FDS_EVT_GC
:

332 
pds_evt
.
evt_id
 = 
PDS_EVT_COMPRESSED
;

333 
	`pds_evt_£nd
(&
pds_evt
);

340 i‡(
m_≥î_dñëe_queued
)

342 
m_≥î_dñëe_queued
 = 
Ál£
;

343 
	`≥î_d©a_dñëe
();

345 
	}
}

348 
ªt_code_t
 
	$pds_öô
()

350 
ªt_code_t
 
ªt
;

353 
	`NRF_PM_DEBUG_CHECK
(!
m_moduÀ_öôülized
);

355 
ªt
 = 
	`fds_ªgi°î
(
fds_evt_h™dÀr
);

356 i‡(
ªt
 !
NRF_SUCCESS
)

358  
NRF_ERROR_INTERNAL
;

361 
ªt
 = 
	`fds_öô
();

362 i‡(
ªt
 !
NRF_SUCCESS
)

364  
NRF_ERROR_STORAGE_FULL
;

367 
	`≥î_id_öô
();

368 
	`≥î_ids_lﬂd
();

370 
m_moduÀ_öôülized
 = 
åue
;

372  
NRF_SUCCESS
;

373 
	}
}

376 
ªt_code_t
 
	$pds_≥î_d©a_ªad
(
pm_≥î_id_t
 
≥î_id
,

377 
pm_≥î_d©a_id_t
 
d©a_id
,

378 
pm_≥î_d©a_t
 * c⁄° 
p_d©a
,

379 
uöt32_t
 c⁄° * c⁄° 
p_buf_Àn
)

381 
ªt_code_t
 
ªt
;

382 
fds_ªc‹d_desc_t
 
ªc_desc
;

383 
fds_Êash_ªc‹d_t
 
ªc_Êash
;

385 
	`NRF_PM_DEBUG_CHECK
(
m_moduÀ_öôülized
);

386 
	`NRF_PM_DEBUG_CHECK
(
p_d©a
 !
NULL
);

388 
	`VERIFY_PEER_ID_IN_RANGE
(
≥î_id
);

389 
	`VERIFY_PEER_DATA_ID_IN_RANGE
(
d©a_id
);

391 
ªt
 = 
	`≥î_d©a_föd
(
≥î_id
, 
d©a_id
, &
ªc_desc
);

393 i‡(
ªt
 !
NRF_SUCCESS
)

395  
NRF_ERROR_NOT_FOUND
;

399 
ªt
 = 
	`fds_ªc‹d_›í
(&
ªc_desc
, &
ªc_Êash
);

401 i‡(
ªt
 !
NRF_SUCCESS
)

403  
NRF_ERROR_NOT_FOUND
;

408 
p_d©a
->
d©a_id
 = data_id;

409 
p_d©a
->
Àngth_w‹ds
 = 
ªc_Êash
.
p_hódî
->
é
.length_words;

413 i‡(
p_buf_Àn
 !
NULL
)

415 
uöt32_t
 c⁄° 
d©a_Àn_byãs
 = (
p_d©a
->
Àngth_w‹ds
 * (uint32_t));

417 i‡((*
p_buf_Àn
Ë<
d©a_Àn_byãs
)

419 
	`mem˝y
(
p_d©a
->
p_Æl_d©a
, 
ªc_Êash
.p_d©a, 
d©a_Àn_byãs
);

423  
NRF_ERROR_NO_MEM
;

431 
p_d©a
->
p_Æl_d©a
 = (*)
ªc_Êash
.p_data;

435 ()
	`fds_ªc‹d_˛o£
(&
ªc_desc
);

437  
NRF_SUCCESS
;

438 
	}
}

441 
	$pds_≥î_d©a_ôî©e_¥ï¨e
()

443 
	`mem£t
(&
m_fds_·ok
, 0x00, (
fds_föd_tokí_t
));

444 
	}
}

447 
boﬁ
 
	$pds_≥î_d©a_ôî©e
(
pm_≥î_d©a_id_t
 
d©a_id
,

448 
pm_≥î_id_t
 * c⁄° 
p_≥î_id
,

449 
pm_≥î_d©a_Êash_t
 * c⁄° 
p_d©a
)

451 
ªt_code_t
 
ªt
;

452 
uöt16_t
 
ªc_key
;

453 
fds_ªc‹d_desc_t
 
ªc_desc
;

454 
fds_Êash_ªc‹d_t
 
ªc_Êash
;

456 
	`NRF_PM_DEBUG_CHECK
(
m_moduÀ_öôülized
);

457 
	`NRF_PM_DEBUG_CHECK
(
p_≥î_id
 !
NULL
);

458 
	`NRF_PM_DEBUG_CHECK
(
p_d©a
 !
NULL
);

461 
ªc_key
 = 
	`≥î_d©a_id_to_ªc‹d_key
(
d©a_id
);

463 i‡(
	`fds_ªc‹d_föd_by_key
(
ªc_key
, &
ªc_desc
, &
m_fds_·ok
Ë!
NRF_SUCCESS
)

465  
Ál£
;

468 
ªt
 = 
	`fds_ªc‹d_›í
(&
ªc_desc
, &
ªc_Êash
);

470 i‡(
ªt
 !
NRF_SUCCESS
)

475  
Ál£
;

478 
p_d©a
->
d©a_id
 = data_id;

479 
p_d©a
->
Àngth_w‹ds
 = 
ªc_Êash
.
p_hódî
->
é
.length_words;

480 
p_d©a
->
p_Æl_d©a
 = 
ªc_Êash
.p_data;

482 *
p_≥î_id
 = 
	`fûe_id_to_≥î_id
(
ªc_Êash
.
p_hódî
->
ic
.
fûe_id
);

484 ()
	`fds_ªc‹d_˛o£
(&
ªc_desc
);

486  
åue
;

487 
	}
}

490 
ªt_code_t
 
	$pds_•a˚_ª£rve
(
pm_≥î_d©a_c⁄°_t
 c⁄° * 
p_≥î_d©a
,

491 
pm_¥ï¨e_tokí_t
 * 
p_¥ï¨e_tokí
)

493 
ªt_code_t
 
ªt
;

495 
	`NRF_PM_DEBUG_CHECK
(
m_moduÀ_öôülized
);

496 
	`NRF_PM_DEBUG_CHECK
(
p_≥î_d©a
 !
NULL
);

497 
	`NRF_PM_DEBUG_CHECK
(
p_¥ï¨e_tokí
 !
NULL
);

499 
	`VERIFY_PEER_DATA_ID_IN_RANGE
(
p_≥î_d©a
->
d©a_id
);

501 
ªt
 = 
	`fds_ª£rve
((
fds_ª£rve_tokí_t
*)
p_¥ï¨e_tokí
, 
p_≥î_d©a
->
Àngth_w‹ds
);

503 
ªt
)

505 
FDS_SUCCESS
:

506  
NRF_SUCCESS
;

508 
FDS_ERR_RECORD_TOO_LARGE
:

509  
NRF_ERROR_INVALID_LENGTH
;

511 
FDS_ERR_NO_SPACE_IN_FLASH
:

512  
NRF_ERROR_STORAGE_FULL
;

515  
NRF_ERROR_INTERNAL
;

517 
	}
}

520 
ªt_code_t
 
	$pds_•a˚_ª£rve_ˇn˚l
(
pm_¥ï¨e_tokí_t
 
¥ï¨e_tokí
)

522 
ªt_code_t
 
ªt
;

524 
	`NRF_PM_DEBUG_CHECK
(
m_moduÀ_öôülized
);

525 
	`NRF_PM_DEBUG_CHECK
(
¥ï¨e_tokí
 !
PDS_PREPARE_TOKEN_INVALID
);

527 
ªt
 = 
	`fds_ª£rve_ˇn˚l
((
fds_ª£rve_tokí_t
*)&
¥ï¨e_tokí
);

529 i‡(
ªt
 !
FDS_SUCCESS
)

531  
NRF_ERROR_INTERNAL
;

534  
NRF_SUCCESS
;

535 
	}
}

538 
ªt_code_t
 
	$pds_≥î_d©a_°‹e
(
pm_≥î_id_t
 
≥î_id
,

539 
pm_≥î_d©a_c⁄°_t
 c⁄° * 
p_≥î_d©a
,

540 
pm_¥ï¨e_tokí_t
 
¥ï¨e_tokí
,

541 
pm_°‹e_tokí_t
 * 
p_°‹e_tokí
)

543 
ªt_code_t
 
ªt
;

544 
fds_ªc‹d_t
 
ªc
;

545 
fds_ªc‹d_desc_t
 
ªc_desc
;

546 
fds_ªc‹d_chunk_t
 
ªc_chunk
;

548 
	`NRF_PM_DEBUG_CHECK
(
m_moduÀ_öôülized
);

549 
	`NRF_PM_DEBUG_CHECK
(
p_≥î_d©a
 !
NULL
);

551 
	`VERIFY_PEER_ID_IN_RANGE
(
≥î_id
);

552 
	`VERIFY_PEER_DATA_ID_IN_RANGE
(
p_≥î_d©a
->
d©a_id
);

555 
ªc_chunk
.
p_d©a
 = 
p_≥î_d©a
->
p_Æl_d©a
;

556 
ªc_chunk
.
Àngth_w‹ds
 = 
p_≥î_d©a
->length_words;

559 
ªc
.
fûe_id
 = 
	`≥î_id_to_fûe_id
(
≥î_id
);

560 
ªc
.
key
 = 
	`≥î_d©a_id_to_ªc‹d_key
(
p_≥î_d©a
->
d©a_id
);

561 
ªc
.
d©a
.
p_chunks
 = &
ªc_chunk
;

562 
ªc
.
d©a
.
num_chunks
 = 1;

564 
ªt
 = 
	`≥î_d©a_föd
(
≥î_id
, 
p_≥î_d©a
->
d©a_id
, &
ªc_desc
);

566 i‡(
ªt
 =
NRF_ERROR_NOT_FOUND
)

569 i‡(
¥ï¨e_tokí
 =
PDS_PREPARE_TOKEN_INVALID
)

572 
ªt
 = 
	`fds_ªc‹d_wrôe
(&
ªc_desc
, &
ªc
);

577 
ªt
 = 
	`fds_ªc‹d_wrôe_ª£rved
(&
ªc_desc
, &
ªc
, (
fds_ª£rve_tokí_t
*)&
¥ï¨e_tokí
);

582 i‡(
¥ï¨e_tokí
 !
PDS_PREPARE_TOKEN_INVALID
)

584 ()
	`fds_ª£rve_ˇn˚l
((
fds_ª£rve_tokí_t
*)&
¥ï¨e_tokí
);

588 
ªt
 = 
	`fds_ªc‹d_upd©e
(&
ªc_desc
, &
ªc
);

591 
ªt
)

593 
FDS_SUCCESS
:

594 i‡(
p_°‹e_tokí
 !
NULL
)

597 ()
	`fds_ªc‹d_id_‰om_desc
(&
ªc_desc
, (
uöt32_t
*)
p_°‹e_tokí
);

599  
NRF_SUCCESS
;

601 
FDS_ERR_BUSY
:

602 
FDS_ERR_NO_SPACE_IN_QUEUES
:

603  
NRF_ERROR_BUSY
;

605 
FDS_ERR_NO_SPACE_IN_FLASH
:

606  
NRF_ERROR_STORAGE_FULL
;

609  
NRF_ERROR_INTERNAL
;

611 
	}
}

615 
ªt_code_t
 
	$pds_≥î_d©a_dñëe
(
pm_≥î_id_t
 
≥î_id
, 
pm_≥î_d©a_id_t
 
d©a_id
)

617 
ªt_code_t
 
ªt
;

618 
fds_ªc‹d_desc_t
 
ªc‹d_desc
;

620 
	`NRF_PM_DEBUG_CHECK
(
m_moduÀ_öôülized
);

622 
	`VERIFY_PEER_ID_IN_RANGE
(
≥î_id
);

623 
	`VERIFY_PEER_DATA_ID_IN_RANGE
(
d©a_id
);

625 
ªt
 = 
	`≥î_d©a_föd
(
≥î_id
, 
d©a_id
, &
ªc‹d_desc
);

627 i‡(
ªt
 !
NRF_SUCCESS
)

629  
NRF_ERROR_NOT_FOUND
;

632 
ªt
 = 
	`fds_ªc‹d_dñëe
(&
ªc‹d_desc
);

634 
ªt
)

636 
FDS_SUCCESS
:

637  
NRF_SUCCESS
;

639 
FDS_ERR_NO_SPACE_IN_QUEUES
:

640  
NRF_ERROR_BUSY
;

643  
NRF_ERROR_INTERNAL
;

645 
	}
}

648 
pm_≥î_id_t
 
	$pds_≥î_id_Æloˇã
()

650 
	`NRF_PM_DEBUG_CHECK
(
m_moduÀ_öôülized
);

651  
	`≥î_id_Æloˇã
(
PM_PEER_ID_INVALID
);

652 
	}
}

655 
ªt_code_t
 
	$pds_≥î_id_‰ì
(
pm_≥î_id_t
 
≥î_id
)

657 
	`NRF_PM_DEBUG_CHECK
(
m_moduÀ_öôülized
);

658 
	`VERIFY_PEER_ID_IN_RANGE
(
≥î_id
);

660 ()
	`≥î_id_dñëe
(
≥î_id
);

661 
	`≥î_d©a_dñëe
();

663  
NRF_SUCCESS
;

664 
	}
}

667 
boﬁ
 
	$pds_≥î_id_is_Æloˇãd
(
pm_≥î_id_t
 
≥î_id
)

669 
	`NRF_PM_DEBUG_CHECK
(
m_moduÀ_öôülized
);

670  
	`≥î_id_is_Æloˇãd
(
≥î_id
);

671 
	}
}

674 
pm_≥î_id_t
 
	$pds_√xt_≥î_id_gë
(
pm_≥î_id_t
 
¥ev_≥î_id
)

676 
	`NRF_PM_DEBUG_CHECK
(
m_moduÀ_öôülized
);

677  
	`≥î_id_gë_√xt_u£d
(
¥ev_≥î_id
);

678 
	}
}

681 
pm_≥î_id_t
 
	$pds_√xt_dñëed_≥î_id_gë
(
pm_≥î_id_t
 
¥ev_≥î_id
)

683 
	`NRF_PM_DEBUG_CHECK
(
m_moduÀ_öôülized
);

684  
	`≥î_id_gë_√xt_dñëed
(
¥ev_≥î_id
);

685 
	}
}

688 
uöt32_t
 
	$pds_≥î_cou¡_gë
()

690 
	`NRF_PM_DEBUG_CHECK
(
m_moduÀ_öôülized
);

691  
	`≥î_id_n_ids
();

692 
	}
}

	@D:\Private\Programing\MCU\Nordic\ble_app_template\nRF5_SDK_12.3.0_d7731ad\components\ble\peer_manager\peer_database.c

41 
	~"sdk_comm⁄.h
"

42 #i‡
NRF_MODULE_ENABLED
(
PEER_MANAGER
)

43 
	~"≥î_d©aba£.h
"

45 
	~<°rög.h
>

46 
	~"≥î_m™agî_ty≥s.h
"

47 
	~"≥î_m™agî_öã∫Æ.h
"

48 
	~"≥î_d©a_°‹age.h
"

49 
	~"pm_buf„r.h
"

52 
	#N_WRITE_BUFFERS
 (8Ë

	)

53 
	#N_WRITE_BUFFER_RECORDS
 (
N_WRITE_BUFFERS
Ë

	)

61 
	#VERIFY_DATA_ID_WRITE_BUF
(
d©a_id
) \

64 i‡(((
d©a_id
Ë!
PM_PEER_DATA_ID_BONDING
Ë&& ((d©a_idË!
PM_PEER_DATA_ID_GATT_LOCAL
)) \

66  
NRF_ERROR_INVALID_PARAM
; \

68 } 0)

	)

72 
	#PDB_EVENT_HANDLERS_CNT
 ((
m_evt_h™dÀrs
Ë/ (m_evt_h™dÀrs[0]))

	)

76 
pm_pdb_evt_h™dÀr
(
pdb_evt_t
 c⁄° * 
p_evít
);

77 
im_pdb_evt_h™dÀr
(
pdb_evt_t
 c⁄° * 
p_evít
);

78 
sm_pdb_evt_h™dÀr
(
pdb_evt_t
 c⁄° * 
p_evít
);

79 
smd_pdb_evt_h™dÀr
(
pdb_evt_t
 c⁄° * 
p_evít
);

80 
gscm_pdb_evt_h™dÀr
(
pdb_evt_t
 c⁄° * 
p_evít
);

84 
pdb_evt_h™dÀr_t
 c⁄° 
	gm_evt_h™dÀrs
[] =

86 
pm_pdb_evt_h™dÀr
,

87 
im_pdb_evt_h™dÀr
,

88 
sm_pdb_evt_h™dÀr
,

89 
smd_pdb_evt_h™dÀr
,

90 
gscm_pdb_evt_h™dÀr
,

99 
pm_≥î_id_t
 
	m≥î_id
;

100 
pm_≥î_d©a_id_t
 
	md©a_id
;

101 
pm_¥ï¨e_tokí_t
 
	m¥ï¨e_tokí
;

102 
pm_°‹e_tokí_t
 
	m°‹e_tokí
;

103 
uöt32_t
 
	mn_bufs
;

104 
uöt8_t
 
	mbuf„r_block_id
;

105 
uöt8_t
 
	m°‹e_ªque°ed
 : 1;

106 
uöt8_t
 
	m°‹e_Êash_fuŒ
 : 1;

107 
uöt8_t
 
	m°‹e_busy
 : 1;

108 } 
	tpdb_buf„r_ªc‹d_t
;

111 
boﬁ
 
	gm_moduÀ_öôülized
;

112 
pm_buf„r_t
 
	gm_wrôe_buf„r
;

113 
pdb_buf„r_ªc‹d_t
 
	gm_wrôe_buf„r_ªc‹ds
[
N_WRITE_BUFFER_RECORDS
];

114 
uöt32_t
 
	gm_n_wrôes
;

122 
	$wrôe_buf„r_ªc‹d_övÆid©e
(
pdb_buf„r_ªc‹d_t
 * 
p_ªc‹d
)

124 
p_ªc‹d
->
≥î_id
 = 
PM_PEER_ID_INVALID
;

125 
p_ªc‹d
->
d©a_id
 = 
PM_PEER_DATA_ID_INVALID
;

126 
p_ªc‹d
->
buf„r_block_id
 = 
PM_BUFFER_INVALID_ID
;

127 
p_ªc‹d
->
°‹e_busy
 = 
Ál£
;

128 
p_ªc‹d
->
°‹e_Êash_fuŒ
 = 
Ál£
;

129 
p_ªc‹d
->
°‹e_ªque°ed
 = 
Ál£
;

130 
p_ªc‹d
->
n_bufs
 = 0;

131 
p_ªc‹d
->
¥ï¨e_tokí
 = 
PDS_PREPARE_TOKEN_INVALID
;

132 
p_ªc‹d
->
°‹e_tokí
 = 
PM_STORE_TOKEN_INVALID
;

133 
	}
}

143 
pdb_buf„r_ªc‹d_t
 * 
	$wrôe_buf„r_ªc‹d_föd_√xt
(
pm_≥î_id_t
 
≥î_id
, * 
p_ödex
)

145 
uöt32_t
 
i
 = *
p_ödex
; i < 
N_WRITE_BUFFER_RECORDS
; i++)

147 i‡((
m_wrôe_buf„r_ªc‹ds
[
i
].
≥î_id
 ==Öeer_id))

149  &
m_wrôe_buf„r_ªc‹ds
[
i
];

152  
NULL
;

153 
	}
}

163 
pdb_buf„r_ªc‹d_t
 * 
	$wrôe_buf„r_ªc‹d_föd
(
pm_≥î_id_t
 
≥î_id
,

164 
pm_≥î_d©a_id_t
 
d©a_id
)

166 
ödex
 = 0;

167 
pdb_buf„r_ªc‹d_t
 * 
p_ªc‹d
 = 
	`wrôe_buf„r_ªc‹d_föd_√xt
(
≥î_id
, &
ödex
);

169 (
p_ªc‹d
 !
NULL
Ë&& (p_ªc‹d->
d©a_id
 != data_id))

171 
ödex
++;

172 
p_ªc‹d
 = 
	`wrôe_buf„r_ªc‹d_föd_√xt
(
≥î_id
, &
ödex
);

175  
p_ªc‹d
;

176 
	}
}

183 
pdb_buf„r_ªc‹d_t
 * 
	$wrôe_buf„r_ªc‹d_föd_unu£d
()

185  
	`wrôe_buf„r_ªc‹d_föd
(
PM_PEER_ID_INVALID
, 
PM_PEER_DATA_ID_INVALID
);

186 
	}
}

197 
	$wrôe_buf„r_ªc‹d_ªÀa£
(
pdb_buf„r_ªc‹d_t
 * 
p_wrôe_buf„r_ªc‹d
)

199 
uöt32_t
 
i
 = 0; i < 
p_wrôe_buf„r_ªc‹d
->
n_bufs
; i++)

201 
	`pm_buf„r_ªÀa£
(&
m_wrôe_buf„r
, 
p_wrôe_buf„r_ªc‹d
->
buf„r_block_id
 + 
i
);

204 
	`wrôe_buf„r_ªc‹d_övÆid©e
(
p_wrôe_buf„r_ªc‹d
);

205 
	}
}

214 
	$wrôe_buf„r_ªc‹d_gë
(
pdb_buf„r_ªc‹d_t
 ** 
µ_wrôe_buf„r_ªc‹d
, 
pm_≥î_id_t
 
≥î_id
, 
pm_≥î_d©a_id_t
 
d©a_id
)

216 i‡(
µ_wrôe_buf„r_ªc‹d
 =
NULL
)

220 *
µ_wrôe_buf„r_ªc‹d
 = 
	`wrôe_buf„r_ªc‹d_föd_unu£d
();

221 i‡(*
µ_wrôe_buf„r_ªc‹d
 =
NULL
)

226 (*
µ_wrôe_buf„r_ªc‹d
)->
≥î_id
 =Öeer_id;

227 (*
µ_wrôe_buf„r_ªc‹d
)->
d©a_id
 = data_id;

228 
	}
}

235 
	$pdb_evt_£nd
(
pdb_evt_t
 * 
p_evít
)

237 
uöt32_t
 
i
 = 0; i < 
PDB_EVENT_HANDLERS_CNT
; i++)

239 
m_evt_h™dÀrs
[
i
](
p_evít
);

241 
	}
}

248 
	$öã∫Æ_°©e_ª£t
()

250 
uöt32_t
 
i
 = 0; i < 
N_WRITE_BUFFER_RECORDS
; i++)

252 
	`wrôe_buf„r_ªc‹d_övÆid©e
(&
m_wrôe_buf„r_ªc‹ds
[
i
]);

254 
	}
}

262 
	$pdb_pds_evt_h™dÀr
(
pds_evt_t
 c⁄° * 
p_evít
)

264 
ªt_code_t
 
îr_code
;

265 
pdb_buf„r_ªc‹d_t
 * 
p_wrôe_buf„r_ªc‹d
;

266 
boﬁ
 
ªåy_Êash_fuŒ
 = 
Ál£
;

267 
pdb_evt_t
 
evít
 =

269 .
≥î_id
 = 
p_evít
->peer_id,

270 .
d©a_id
 = 
p_evít
->data_id,

273 
p_wrôe_buf„r_ªc‹d
 = 
	`wrôe_buf„r_ªc‹d_föd
(
p_evít
->
≥î_id
,Ö_evít->
d©a_id
);

275 
p_evít
->
evt_id
)

277 
PDS_EVT_STORED
:

278 
PDS_EVT_UPDATED
:

279 i‡–(
p_wrôe_buf„r_ªc‹d
 !
NULL
)

281 && (
p_wrôe_buf„r_ªc‹d
->
°‹e_ªque°ed
))

283 
	`wrôe_buf„r_ªc‹d_ªÀa£
(
p_wrôe_buf„r_ªc‹d
);

284 
evít
.
evt_id
 = 
PDB_EVT_WRITE_BUF_STORED
;

285 
evít
.
∑øms
.
wrôe_buf_°‹ed_evt
.
upd©e
 = (
p_evít
->
evt_id
 =
PDS_EVT_UPDATED
);

286 
	`pdb_evt_£nd
(&
evít
);

290 
evít
.
evt_id
 = 
PDB_EVT_RAW_STORED
;

291 
evít
.
∑øms
.
øw_°‹ed_evt
.
°‹e_tokí
 = 
p_evít
->store_token;

292 
	`pdb_evt_£nd
(&
evít
);

295 
PDS_EVT_ERROR_STORE
:

296 
PDS_EVT_ERROR_UPDATE
:

297 i‡–(
p_wrôe_buf„r_ªc‹d
 !
NULL
)

298 && (
p_wrôe_buf„r_ªc‹d
->
°‹e_tokí
 =
p_evít
->store_token)

299 && (
p_wrôe_buf„r_ªc‹d
->
°‹e_ªque°ed
))

302 
m_n_wrôes
++;

303 
p_wrôe_buf„r_ªc‹d
->
°‹e_ªque°ed
 = 
Ál£
;

304 
p_wrôe_buf„r_ªc‹d
->
°‹e_busy
 = 
åue
;

308 
evít
.
evt_id
 = 
PDB_EVT_RAW_STORE_FAILED
;

309 
evít
.
∑øms
.
îr‹_øw_°‹e_evt
.
îr_code
 = 
p_evít
->
ªsu…
;

310 
	`pdb_evt_£nd
(&
evít
);

313 
PDS_EVT_CLEARED
:

314 
evít
.
evt_id
 = 
PDB_EVT_CLEARED
;

315 
	`pdb_evt_£nd
(&
evít
);

317 
PDS_EVT_ERROR_CLEAR
:

318 
evít
.
evt_id
 = 
PDB_EVT_CLEAR_FAILED
;

319 
evít
.
∑øms
.
˛ór_Áûed_evt
.
îr_code
 = 
p_evít
->
ªsu…
;

320 
	`pdb_evt_£nd
(&
evít
);

322 
PDS_EVT_PEER_ID_CLEAR
:

323 
evít
.
evt_id
 = 
PDB_EVT_PEER_FREED
;

324 
	`pdb_evt_£nd
(&
evít
);

326 
PDS_EVT_ERROR_PEER_ID_CLEAR
:

327 
evít
.
evt_id
 = 
PDB_EVT_PEER_FREE_FAILED
;

328 
evít
.
∑øms
.
≥î_‰ì_Áûed_evt
.
îr_code
 = 
p_evít
->
ªsu…
;

329 
	`pdb_evt_£nd
(&
evít
);

331 
PDS_EVT_COMPRESSED
:

332 
ªåy_Êash_fuŒ
 = 
åue
;

333 
evít
.
evt_id
 = 
PDB_EVT_COMPRESSED
;

334 
	`pdb_evt_£nd
(&
evít
);

336 
PDS_EVT_ERROR_UNEXPECTED
:

337 
evít
.
∑øms
.
îr‹_u√x≥˘ed
.
îr_code
 = 
p_evít
->
ªsu…
;

343 i‡(
m_n_wrôes
 > 0)

345 
uöt32_t
 
i
 = 0; i < 
N_WRITE_BUFFER_RECORDS
; i++)

347 i‡((
m_wrôe_buf„r_ªc‹ds
[
i
].
°‹e_busy
)

348 || (
m_wrôe_buf„r_ªc‹ds
[
i
].
°‹e_Êash_fuŒ
 && 
ªåy_Êash_fuŒ
))

350 
îr_code
 = 
	`pdb_wrôe_buf_°‹e
(
m_wrôe_buf„r_ªc‹ds
[
i
].
≥î_id
,

351 
m_wrôe_buf„r_ªc‹ds
[
i
].
d©a_id
);

352 i‡(
îr_code
 !
NRF_SUCCESS
)

354 
evít
.
≥î_id
 = 
m_wrôe_buf„r_ªc‹ds
[
i
].peer_id;

355 
evít
.
d©a_id
 = 
m_wrôe_buf„r_ªc‹ds
[
i
].data_id;

356 i‡(
îr_code
 =
NRF_ERROR_STORAGE_FULL
)

358 
evít
.
evt_id
 = 
PDB_EVT_ERROR_NO_MEM
;

362 
evít
.
evt_id
 = 
PDB_EVT_ERROR_UNEXPECTED
;

363 
evít
.
∑øms
.
îr‹_u√x≥˘ed
.
îr_code
 =Érr_code;

366 
	`pdb_evt_£nd
(&
evít
);

372 
	}
}

375 
ªt_code_t
 
	$pdb_öô
()

377 
ªt_code_t
 
ªt
;

379 
	`NRF_PM_DEBUG_CHECK
(!
m_moduÀ_öôülized
);

381 
	`öã∫Æ_°©e_ª£t
();

383 
	`PM_BUFFER_INIT
(&
m_wrôe_buf„r
, 
N_WRITE_BUFFERS
, 
PDB_WRITE_BUF_SIZE
, 
ªt
);

385 i‡(
ªt
 !
NRF_SUCCESS
)

387  
NRF_ERROR_INTERNAL
;

390 
m_moduÀ_öôülized
 = 
åue
;

392  
NRF_SUCCESS
;

393 
	}
}

396 
pm_≥î_id_t
 
	$pdb_≥î_Æloˇã
()

399 i‡(!
MODULE_INITIALIZED
)

401  
PM_PEER_ID_INVALID
;

405 
	`NRF_PM_DEBUG_CHECK
(
m_moduÀ_öôülized
);

406  
	`pds_≥î_id_Æloˇã
();

407 
	}
}

410 
ªt_code_t
 
	$pdb_≥î_‰ì
(
pm_≥î_id_t
 
≥î_id
)

412 
ªt_code_t
 
îr_code_ö
 = 
NRF_SUCCESS
;

413 
ªt_code_t
 
îr_code_out
 = 
NRF_SUCCESS
;

415 
	`NRF_PM_DEBUG_CHECK
(
m_moduÀ_öôülized
);

417 
ödex
 = 0;

418 
pdb_buf„r_ªc‹d_t
 * 
p_ªc‹d
 = 
	`wrôe_buf„r_ªc‹d_föd_√xt
(
≥î_id
, &
ödex
);

420 
p_ªc‹d
 !
NULL
)

422 
îr_code_ö
 = 
	`pdb_wrôe_buf_ªÀa£
(
≥î_id
, 
p_ªc‹d
->
d©a_id
);

424 i‡–(
îr_code_ö
 !
NRF_SUCCESS
)

425 && (
îr_code_ö
 !
NRF_ERROR_NOT_FOUND
))

427 
îr_code_out
 = 
NRF_ERROR_INTERNAL
;

430 
ödex
++;

431 
p_ªc‹d
 = 
	`wrôe_buf„r_ªc‹d_föd_√xt
(
≥î_id
, &
ödex
);

434 i‡(
îr_code_out
 =
NRF_SUCCESS
)

436 
îr_code_ö
 = 
	`pds_≥î_id_‰ì
(
≥î_id
);

438 i‡(
îr_code_ö
 =
NRF_SUCCESS
)

442 i‡(
îr_code_ö
 =
NRF_ERROR_INVALID_PARAM
)

444 
îr_code_out
 = 
NRF_ERROR_INVALID_PARAM
;

448 
îr_code_out
 = 
NRF_ERROR_INTERNAL
;

452  
îr_code_out
;

453 
	}
}

456 
ªt_code_t
 
	$pdb_≥î_d©a_±r_gë
(
pm_≥î_id_t
 
≥î_id
,

457 
pm_≥î_d©a_id_t
 
d©a_id
,

458 
pm_≥î_d©a_Êash_t
 * c⁄° 
p_≥î_d©a
)

460 
	`NRF_PM_DEBUG_CHECK
(
m_moduÀ_öôülized
);

461 
	`NRF_PM_DEBUG_CHECK
(
p_≥î_d©a
 !
NULL
);

464  
	`pds_≥î_d©a_ªad
(
≥î_id
, 
d©a_id
, (
pm_≥î_d©a_t
*)
p_≥î_d©a
, 
NULL
);

465 
	}
}

468 
	$≥î_d©a_poöt_to_buf„r
(
pm_≥î_d©a_t
 * 
p_≥î_d©a
, 
pm_≥î_d©a_id_t
 
d©a_id
, 
uöt8_t
 * 
p_buf„r_mem‹y
, 
uöt16_t
 
n_bufs
)

470 
uöt16_t
 
n_byãs
 = 
n_bufs
 * 
PDB_WRITE_BUF_SIZE
;

471 
p_≥î_d©a
->
d©a_id
 = data_id;

473 
p_≥î_d©a
->
p_Æl_d©a
 = (
pm_≥î_d©a_b⁄dög_t
 *)
p_buf„r_mem‹y
;

474 
p_≥î_d©a
->
Àngth_w‹ds
 = 
	`BYTES_TO_WORDS
(
n_byãs
);

475 
	}
}

478 
	$≥î_d©a_c⁄°_poöt_to_buf„r
(
pm_≥î_d©a_c⁄°_t
 * 
p_≥î_d©a
, 
pm_≥î_d©a_id_t
 
d©a_id
, 
uöt8_t
 * 
p_buf„r_mem‹y
, 
uöt32_t
 
n_bufs
)

480 
	`≥î_d©a_poöt_to_buf„r
((
pm_≥î_d©a_t
*)
p_≥î_d©a
, 
d©a_id
, 
p_buf„r_mem‹y
, 
n_bufs
);

481 
	}
}

484 
	$wrôe_buf_Àngth_w‹ds_£t
(
pm_≥î_d©a_c⁄°_t
 * 
p_≥î_d©a
)

486 
p_≥î_d©a
->
d©a_id
)

488 
PM_PEER_DATA_ID_BONDING
:

489 
p_≥î_d©a
->
Àngth_w‹ds
 = 
	`PM_BONDING_DATA_N_WORDS
();

491 
PM_PEER_DATA_ID_SERVICE_CHANGED_PENDING
:

492 
p_≥î_d©a
->
Àngth_w‹ds
 = 
	`PM_SC_STATE_N_WORDS
();

494 
PM_PEER_DATA_ID_PEER_RANK
:

495 
p_≥î_d©a
->
Àngth_w‹ds
 = 
	`PM_USAGE_INDEX_N_WORDS
();

497 
PM_PEER_DATA_ID_GATT_LOCAL
:

498 
p_≥î_d©a
->
Àngth_w‹ds
 = 
	`PM_LOCAL_DB_N_WORDS
’_≥î_d©a->
p_loˇl_g©t_db
->
Àn
);

504 
	}
}

507 
ªt_code_t
 
	$pdb_wrôe_buf_gë
(
pm_≥î_id_t
 
≥î_id
,

508 
pm_≥î_d©a_id_t
 
d©a_id
,

509 
uöt32_t
 
n_bufs
,

510 
pm_≥î_d©a_t
 * 
p_≥î_d©a
)

512 
	`NRF_PM_DEBUG_CHECK
(
m_moduÀ_öôülized
);

514 
	`VERIFY_PARAM_NOT_NULL
(
p_≥î_d©a
);

515 
	`VERIFY_DATA_ID_WRITE_BUF
(
d©a_id
);

517 i‡–(
n_bufs
 == 0)

518 || (
n_bufs
 > 
N_WRITE_BUFFERS
)

519 || !
	`pds_≥î_id_is_Æloˇãd
(
≥î_id
))

521  
NRF_ERROR_INVALID_PARAM
;

524 
pdb_buf„r_ªc‹d_t
 * 
wrôe_buf„r_ªc‹d
;

525 
uöt8_t
 * 
p_buf„r_mem‹y
;

526 
boﬁ
 
√w_ªc‹d
 = 
Ál£
;

528 
wrôe_buf„r_ªc‹d
 = 
	`wrôe_buf„r_ªc‹d_föd
(
≥î_id
, 
d©a_id
);

530 i‡((
wrôe_buf„r_ªc‹d
 !
NULL
Ë&& (wrôe_buf„r_ªc‹d->
n_bufs
 <Ç_bufs))

534 
uöt8_t
 
i
 = 0; i < 
wrôe_buf„r_ªc‹d
->
n_bufs
; i++)

536 
	`pm_buf„r_ªÀa£
(&
m_wrôe_buf„r
, 
wrôe_buf„r_ªc‹d
->
buf„r_block_id
 + 
i
);

538 
	`wrôe_buf„r_ªc‹d_övÆid©e
(
wrôe_buf„r_ªc‹d
);

539 
wrôe_buf„r_ªc‹d
 = 
NULL
;

541 i‡((
wrôe_buf„r_ªc‹d
 !
NULL
Ë&& wrôe_buf„r_ªc‹d->
n_bufs
 >Ç_bufs)

544 
uöt8_t
 
i
 = 
n_bufs
; i < 
wrôe_buf„r_ªc‹d
->n_bufs; i++)

546 
	`pm_buf„r_ªÀa£
(&
m_wrôe_buf„r
, 
wrôe_buf„r_ªc‹d
->
buf„r_block_id
 + 
i
);

550 i‡(
wrôe_buf„r_ªc‹d
 =
NULL
)

552 
	`wrôe_buf„r_ªc‹d_gë
(&
wrôe_buf„r_ªc‹d
, 
≥î_id
, 
d©a_id
);

553 i‡(
wrôe_buf„r_ªc‹d
 =
NULL
)

555  
NRF_ERROR_BUSY
;

559 i‡(
wrôe_buf„r_ªc‹d
->
buf„r_block_id
 =
PM_BUFFER_INVALID_ID
)

561 
wrôe_buf„r_ªc‹d
->
buf„r_block_id
 = 
	`pm_buf„r_block_acquúe
(&
m_wrôe_buf„r
, 
n_bufs
);

563 i‡(
wrôe_buf„r_ªc‹d
->
buf„r_block_id
 =
PM_BUFFER_INVALID_ID
)

565 
	`wrôe_buf„r_ªc‹d_övÆid©e
(
wrôe_buf„r_ªc‹d
);

566  
NRF_ERROR_BUSY
;

569 
√w_ªc‹d
 = 
åue
;

572 
wrôe_buf„r_ªc‹d
->
n_bufs
 =Ç_bufs;

574 
p_buf„r_mem‹y
 = 
	`pm_buf„r_±r_gë
(&
m_wrôe_buf„r
, 
wrôe_buf„r_ªc‹d
->
buf„r_block_id
);

576 i‡(
p_buf„r_mem‹y
 =
NULL
)

578  
NRF_ERROR_INTERNAL
;

581 
	`≥î_d©a_poöt_to_buf„r
(
p_≥î_d©a
, 
d©a_id
, 
p_buf„r_mem‹y
, 
n_bufs
);

582 i‡(
√w_ªc‹d
 && (
d©a_id
 =
PM_PEER_DATA_ID_GATT_LOCAL
))

584 
p_≥î_d©a
->
p_loˇl_g©t_db
->
Àn
 = 
	`PM_LOCAL_DB_LEN
’_≥î_d©a->
Àngth_w‹ds
);

587  
NRF_SUCCESS
;

588 
	}
}

591 
ªt_code_t
 
	$pdb_wrôe_buf_ªÀa£
(
pm_≥î_id_t
 
≥î_id
, 
pm_≥î_d©a_id_t
 
d©a_id
)

593 
	`NRF_PM_DEBUG_CHECK
(
m_moduÀ_öôülized
);

595 
ªt_code_t
 
îr_code
 = 
NRF_SUCCESS
;

596 
pdb_buf„r_ªc‹d_t
 * 
p_wrôe_buf„r_ªc‹d
;

597 
p_wrôe_buf„r_ªc‹d
 = 
	`wrôe_buf„r_ªc‹d_föd
(
≥î_id
, 
d©a_id
);

599 i‡(
p_wrôe_buf„r_ªc‹d
 =
NULL
)

601  
NRF_ERROR_NOT_FOUND
;

604 i‡(
p_wrôe_buf„r_ªc‹d
->
¥ï¨e_tokí
 !
PDS_PREPARE_TOKEN_INVALID
)

606 
îr_code
 = 
	`pds_•a˚_ª£rve_ˇn˚l
(
p_wrôe_buf„r_ªc‹d
->
¥ï¨e_tokí
);

607 i‡(
îr_code
 !
NRF_SUCCESS
)

609 
îr_code
 = 
NRF_ERROR_INTERNAL
;

613 
	`wrôe_buf„r_ªc‹d_ªÀa£
(
p_wrôe_buf„r_ªc‹d
);

615  
îr_code
;

616 
	}
}

619 
ªt_code_t
 
	$pdb_wrôe_buf_°‹e_¥ï¨e
(
pm_≥î_id_t
 
≥î_id
, 
pm_≥î_d©a_id_t
 
d©a_id
)

621 
	`NRF_PM_DEBUG_CHECK
(
m_moduÀ_öôülized
);

623 
	`VERIFY_DATA_ID_WRITE_BUF
(
d©a_id
);

625 
ªt_code_t
 
îr_code
 = 
NRF_SUCCESS
;

626 
pdb_buf„r_ªc‹d_t
 * 
p_wrôe_buf„r_ªc‹d
;

627 
p_wrôe_buf„r_ªc‹d
 = 
	`wrôe_buf„r_ªc‹d_föd
(
≥î_id
, 
d©a_id
);

629 i‡(
p_wrôe_buf„r_ªc‹d
 =
NULL
)

631  
NRF_ERROR_NOT_FOUND
;

634 i‡(
p_wrôe_buf„r_ªc‹d
->
¥ï¨e_tokí
 =
PDS_PREPARE_TOKEN_INVALID
)

636 
uöt8_t
 * 
p_buf„r_mem‹y
 = 
	`pm_buf„r_±r_gë
(&
m_wrôe_buf„r
, 
p_wrôe_buf„r_ªc‹d
->
buf„r_block_id
);

637 
pm_≥î_d©a_c⁄°_t
 
≥î_d©a
 = {.
d©a_id
 = data_id};

639 i‡(
p_buf„r_mem‹y
 =
NULL
)

641  
NRF_ERROR_INTERNAL
;

644 
	`≥î_d©a_c⁄°_poöt_to_buf„r
(&
≥î_d©a
, 
d©a_id
, 
p_buf„r_mem‹y
, 
p_wrôe_buf„r_ªc‹d
->
n_bufs
);

646 
	`wrôe_buf_Àngth_w‹ds_£t
(&
≥î_d©a
);

648 
îr_code
 = 
	`pds_•a˚_ª£rve
(&
≥î_d©a
, &
p_wrôe_buf„r_ªc‹d
->
¥ï¨e_tokí
);

649 i‡(
îr_code
 =
NRF_ERROR_INVALID_LENGTH
)

651  
NRF_ERROR_INTERNAL
;

655  
îr_code
;

656 
	}
}

659 
ªt_code_t
 
	$pdb_wrôe_buf_°‹e
(
pm_≥î_id_t
 
≥î_id
,

660 
pm_≥î_d©a_id_t
 
d©a_id
)

662 
	`NRF_PM_DEBUG_CHECK
(
m_moduÀ_öôülized
);

664 
	`VERIFY_DATA_ID_WRITE_BUF
(
d©a_id
);

666 
ªt_code_t
 
îr_code
 = 
NRF_SUCCESS
;

667 
pdb_buf„r_ªc‹d_t
 * 
p_wrôe_buf„r_ªc‹d
;

668 
uöt8_t
 * 
p_buf„r_mem‹y
;

669 
pm_≥î_d©a_c⁄°_t
 
≥î_d©a
 = {.
d©a_id
 = data_id};

672 
p_wrôe_buf„r_ªc‹d
 = 
	`wrôe_buf„r_ªc‹d_föd
(
≥î_id
, 
d©a_id
);

674 i‡(
p_wrôe_buf„r_ªc‹d
 =
NULL
)

676  
NRF_ERROR_NOT_FOUND
;

679 i‡(
p_wrôe_buf„r_ªc‹d
->
°‹e_ªque°ed
)

681  
NRF_SUCCESS
;

684 
p_buf„r_mem‹y
 = 
	`pm_buf„r_±r_gë
(&
m_wrôe_buf„r
, 
p_wrôe_buf„r_ªc‹d
->
buf„r_block_id
);

686 i‡(
p_buf„r_mem‹y
 =
NULL
)

688  
NRF_ERROR_INTERNAL
;

691 
	`≥î_d©a_c⁄°_poöt_to_buf„r
(&
≥î_d©a
, 
d©a_id
, 
p_buf„r_mem‹y
, 
p_wrôe_buf„r_ªc‹d
->
n_bufs
);

693 
	`wrôe_buf_Àngth_w‹ds_£t
(&
≥î_d©a
);

695 
îr_code
 = 
	`pds_≥î_d©a_°‹e
(
≥î_id
,

696 &
≥î_d©a
,

697 
p_wrôe_buf„r_ªc‹d
->
¥ï¨e_tokí
,

698 &
p_wrôe_buf„r_ªc‹d
->
°‹e_tokí
);

700 i‡(
p_wrôe_buf„r_ªc‹d
->
°‹e_busy
 &&Ö_wrôe_buf„r_ªc‹d->
°‹e_Êash_fuŒ
)

702 
m_n_wrôes
--;

705 i‡(
îr_code
 =
NRF_SUCCESS
)

707 
p_wrôe_buf„r_ªc‹d
->
°‹e_ªque°ed
 = 
åue
;

708 
p_wrôe_buf„r_ªc‹d
->
°‹e_busy
 = 
Ál£
;

709 
p_wrôe_buf„r_ªc‹d
->
°‹e_Êash_fuŒ
 = 
Ál£
;

713 i‡(
îr_code
 =
NRF_ERROR_BUSY
)

715 
m_n_wrôes
++;

716 
p_wrôe_buf„r_ªc‹d
->
°‹e_busy
 = 
åue
;

717 
p_wrôe_buf„r_ªc‹d
->
°‹e_Êash_fuŒ
 = 
Ál£
;

718 
îr_code
 = 
NRF_SUCCESS
;

720 i‡(
îr_code
 =
NRF_ERROR_STORAGE_FULL
)

722 
m_n_wrôes
++;

723 
p_wrôe_buf„r_ªc‹d
->
°‹e_busy
 = 
Ál£
;

724 
p_wrôe_buf„r_ªc‹d
->
°‹e_Êash_fuŒ
 = 
åue
;

726 i‡(
îr_code
 !
NRF_ERROR_INVALID_PARAM
)

728 
îr_code
 = 
NRF_ERROR_INTERNAL
;

732  
îr_code
;

733 
	}
}

736 
ªt_code_t
 
	$pdb_˛ór
(
pm_≥î_id_t
 
≥î_id
, 
pm_≥î_d©a_id_t
 
d©a_id
)

738 
	`NRF_PM_DEBUG_CHECK
(
m_moduÀ_öôülized
);

739  
	`pds_≥î_d©a_dñëe
(
≥î_id
, 
d©a_id
);

740 
	}
}

743 
uöt32_t
 
	$pdb_n_≥îs
()

745 
	`NRF_PM_DEBUG_CHECK
(
m_moduÀ_öôülized
);

746  
	`pds_≥î_cou¡_gë
();

747 
	}
}

750 
pm_≥î_id_t
 
	$pdb_√xt_≥î_id_gë
(
pm_≥î_id_t
 
¥ev_≥î_id
)

752 
	`NRF_PM_DEBUG_CHECK
(
m_moduÀ_öôülized
);

753  
	`pds_√xt_≥î_id_gë
(
¥ev_≥î_id
);

754 
	}
}

757 
pm_≥î_id_t
 
	$pdb_√xt_dñëed_≥î_id_gë
(
pm_≥î_id_t
 
¥ev_≥î_id
)

759 
	`NRF_PM_DEBUG_CHECK
(
m_moduÀ_öôülized
);

760  
	`pds_√xt_dñëed_≥î_id_gë
(
¥ev_≥î_id
);

761 
	}
}

764 
ªt_code_t
 
	$pdb_≥î_d©a_lﬂd
(
pm_≥î_id_t
 
≥î_id
,

765 
pm_≥î_d©a_id_t
 
d©a_id
,

766 
pm_≥î_d©a_t
 * c⁄° 
p_≥î_d©a
)

768 
	`NRF_PM_DEBUG_CHECK
(
m_moduÀ_öôülized
);

769 
	`NRF_PM_DEBUG_CHECK
(
p_≥î_d©a
 !
NULL
);

772 
uöt32_t
 c⁄° 
d©a_Àn_byãs
 = (
p_≥î_d©a
->
Àngth_w‹ds
 * (uint32_t));

773  
	`pds_≥î_d©a_ªad
(
≥î_id
, 
d©a_id
, 
p_≥î_d©a
, &
d©a_Àn_byãs
);

774 
	}
}

777 
ªt_code_t
 
	$pdb_øw_°‹e
(
pm_≥î_id_t
 
≥î_id
,

778 
pm_≥î_d©a_c⁄°_t
 * 
p_≥î_d©a
,

779 
pm_°‹e_tokí_t
 * 
p_°‹e_tokí
)

781 
	`NRF_PM_DEBUG_CHECK
(
m_moduÀ_öôülized
);

782  
	`pds_≥î_d©a_°‹e
(
≥î_id
, 
p_≥î_d©a
, 
PDS_PREPARE_TOKEN_INVALID
, 
p_°‹e_tokí
);

783 
	}
}

	@D:\Private\Programing\MCU\Nordic\ble_app_template\nRF5_SDK_12.3.0_d7731ad\components\ble\peer_manager\peer_id.c

41 
	~"sdk_comm⁄.h
"

42 #i‡
NRF_MODULE_ENABLED
(
PEER_MANAGER
)

43 
	~"≥î_id.h
"

45 
	~<°döt.h
>

46 
	~<°rög.h
>

47 
	~"sdk_îr‹s.h
"

48 
	~"≥î_m™agî_ty≥s.h
"

49 
	~"pm_muãx.h
"

54 
uöt8_t
 
	mu£d_≥î_ids
[
MUTEX_STORAGE_SIZE
(
PM_PEER_ID_N_AVAILABLE_IDS
)];

55 
uöt8_t
 
	mdñëed_≥î_ids
[
MUTEX_STORAGE_SIZE
(
PM_PEER_ID_N_AVAILABLE_IDS
)];

56 } 
	tpi_t
;

59 
pi_t
 
	gm_pi
 = {{0}, {0}};

62 
	$öã∫Æ_°©e_ª£t
(
pi_t
 * 
p_pi
)

64 
	`mem£t
(
p_pi
, 0, (
pi_t
));

65 
	}
}

68 
	$≥î_id_öô
()

70 
	`öã∫Æ_°©e_ª£t
(&
m_pi
);

71 
	`pm_muãx_öô
(
m_pi
.
u£d_≥î_ids
, 
PM_PEER_ID_N_AVAILABLE_IDS
);

72 
	`pm_muãx_öô
(
m_pi
.
dñëed_≥î_ids
, 
PM_PEER_ID_N_AVAILABLE_IDS
);

73 
	}
}

76 
pm_≥î_id_t
 
	$˛aim
(
pm_≥î_id_t
 
≥î_id
, 
uöt8_t
 * 
muãx_group
)

78 
pm_≥î_id_t
 
Æloˇãd_≥î_id
 = 
PM_PEER_ID_INVALID
;

79 i‡(
≥î_id
 =
PM_PEER_ID_INVALID
)

81 
Æloˇãd_≥î_id
 = 
	`pm_muãx_lock_fú°_avaûabÀ
(
muãx_group
, 
PM_PEER_ID_N_AVAILABLE_IDS
);

82 i‡(
Æloˇãd_≥î_id
 =
PM_PEER_ID_N_AVAILABLE_IDS
)

84 
Æloˇãd_≥î_id
 = 
PM_PEER_ID_INVALID
;

87 i‡(
≥î_id
 < 
PM_PEER_ID_N_AVAILABLE_IDS
)

89 
boﬁ
 
lock_suc˚ss
 = 
	`pm_muãx_lock
(
muãx_group
, 
≥î_id
);

90 
Æloˇãd_≥î_id
 = 
lock_suc˚ss
 ? 
≥î_id
 : 
PM_PEER_ID_INVALID
;

92  
Æloˇãd_≥î_id
;

93 
	}
}

96 
	$ªÀa£
(
pm_≥î_id_t
 
≥î_id
, 
uöt8_t
 * 
muãx_group
)

98 i‡(
≥î_id
 < 
PM_PEER_ID_N_AVAILABLE_IDS
)

100 
	`pm_muãx_u∆ock
(
muãx_group
, 
≥î_id
);

102 
	}
}

105 
pm_≥î_id_t
 
	$≥î_id_Æloˇã
(
pm_≥î_id_t
 
≥î_id
)

107  
	`˛aim
(
≥î_id
, 
m_pi
.
u£d_≥î_ids
);

108 
	}
}

111 
boﬁ
 
	$≥î_id_dñëe
(
pm_≥î_id_t
 
≥î_id
)

113 
pm_≥î_id_t
 
dñëed_≥î_id
;

115 i‡(
≥î_id
 =
PM_PEER_ID_INVALID
)

117  
Ál£
;

120 
dñëed_≥î_id
 = 
	`˛aim
(
≥î_id
, 
m_pi
.
dñëed_≥î_ids
);

122  (
dñëed_≥î_id
 =
≥î_id
);

123 
	}
}

126 
	$≥î_id_‰ì
(
pm_≥î_id_t
 
≥î_id
)

128 
	`ªÀa£
(
≥î_id
, 
m_pi
.
u£d_≥î_ids
);

129 
	`ªÀa£
(
≥î_id
, 
m_pi
.
dñëed_≥î_ids
);

130 
	}
}

133 
boﬁ
 
	$≥î_id_is_Æloˇãd
(
pm_≥î_id_t
 
≥î_id
)

135 i‡(
≥î_id
 < 
PM_PEER_ID_N_AVAILABLE_IDS
)

137  
	`pm_muãx_lock_°©us_gë
(
m_pi
.
u£d_≥î_ids
, 
≥î_id
);

139  
Ál£
;

140 
	}
}

143 
boﬁ
 
	$≥î_id_is_dñëed
(
pm_≥î_id_t
 
≥î_id
)

145 i‡(
≥î_id
 < 
PM_PEER_ID_N_AVAILABLE_IDS
)

147  
	`pm_muãx_lock_°©us_gë
(
m_pi
.
dñëed_≥î_ids
, 
≥î_id
);

149  
Ál£
;

150 
	}
}

153 
pm_≥î_id_t
 
	$√xt_id_gë
(
pm_≥î_id_t
 
¥ev_≥î_id
, 
uöt8_t
 * 
muãx_group
)

155 
pm_≥î_id_t
 
i
 = (
¥ev_≥î_id
 =
PM_PEER_ID_INVALID
) ? 0 : (prev_peer_id + 1);

156 ; 
i
 < 
PM_PEER_ID_N_AVAILABLE_IDS
; i++)

158 i‡(
	`pm_muãx_lock_°©us_gë
(
muãx_group
, 
i
))

160  
i
;

164  
PM_PEER_ID_INVALID
;

165 
	}
}

168 
pm_≥î_id_t
 
	$≥î_id_gë_√xt_u£d
(
pm_≥î_id_t
 
≥î_id
)

170 
≥î_id
 = 
	`√xt_id_gë
’ìr_id, 
m_pi
.
u£d_≥î_ids
);

172 
≥î_id
 !
PM_PEER_ID_INVALID
)

174 i‡(!
	`≥î_id_is_dñëed
(
≥î_id
))

176  
≥î_id
;

179 
≥î_id
 = 
	`√xt_id_gë
’ìr_id, 
m_pi
.
u£d_≥î_ids
);

182  
≥î_id
;

183 
	}
}

186 
pm_≥î_id_t
 
	$≥î_id_gë_√xt_dñëed
(
pm_≥î_id_t
 
¥ev_≥î_id
)

188  
	`√xt_id_gë
(
¥ev_≥î_id
, 
m_pi
.
dñëed_≥î_ids
);

189 
	}
}

192 
uöt32_t
 
	$≥î_id_n_ids
()

194 
uöt32_t
 
n_ids
 = 0;

196 
pm_≥î_id_t
 
i
 = 0; i < 
PM_PEER_ID_N_AVAILABLE_IDS
; i++)

198 
n_ids
 +
	`pm_muãx_lock_°©us_gë
(
m_pi
.
u£d_≥î_ids
, 
i
);

201  
n_ids
;

202 
	}
}

	@D:\Private\Programing\MCU\Nordic\ble_app_template\nRF5_SDK_12.3.0_d7731ad\components\ble\peer_manager\peer_manager.c

41 
	~"sdk_comm⁄.h
"

42 #i‡
NRF_MODULE_ENABLED
(
PEER_MANAGER
)

43 
	~"≥î_m™agî.h
"

44 
	~<°rög.h
>

45 
	~"£curôy_m™agî.h
"

46 
	~"£curôy_di•©chî.h
"

47 
	~"g©t_ˇche_m™agî.h
"

48 
	~"g©ts_ˇche_m™agî.h
"

49 
	~"≥î_d©aba£.h
"

50 
	~"≥î_d©a_°‹age.h
"

51 
	~"id_m™agî.h
"

52 
	~"bÀ_c⁄n_°©e.h
"

53 
	~"≥î_m™agî_öã∫Æ.h
"

57 
	#MAX_REGISTRANTS
 (3)

	)

59 
	#MODULE_INITIALIZED
 (
m_moduÀ_öôülized
)

	)

62 
boﬁ
 
	gm_moduÀ_öôülized
;

63 
boﬁ
 
	gm_≥î_ønk_öôülized
;

64 
boﬁ
 
	gm_dñëög_Æl
;

65 
pm_°‹e_tokí_t
 
	gm_≥î_ønk_tokí
;

66 
uöt32_t
 
	gm_cuºít_highe°_≥î_ønk
;

67 
pm_≥î_id_t
 
	gm_highe°_ønked_≥î
;

68 
pm_evt_h™dÀr_t
 
	gm_evt_h™dÀrs
[
MAX_REGISTRANTS
];

69 
uöt8_t
 
	gm_n_ªgi°ø¡s
;

70 
bÀ_c⁄n_°©e_u£r_Êag_id_t
 
	gm_∑úög_Êag_id
;

71 
bÀ_c⁄n_°©e_u£r_Êag_id_t
 
	gm_b⁄dög_Êag_id
;

78 
	$evt_£nd
(
pm_evt_t
 * 
p_pm_evt
)

80 
i
 = 0; i < 
m_n_ªgi°ø¡s
; i++)

82 
m_evt_h™dÀrs
[
i
](
p_pm_evt
);

84 
	}
}

92 
	$pm_pdb_evt_h™dÀr
(
pdb_evt_t
 c⁄° * 
p_pdb_evt
)

94 
boﬁ
 
£nd_evt
 = 
åue
;

95 
pm_evt_t
 
pm_evt
;

97 
	`mem£t
(&
pm_evt
, 0, (
pm_evt_t
));

98 
pm_evt
.
≥î_id
 = 
p_pdb_evt
->peer_id;

99 
pm_evt
.
c⁄n_h™dÀ
 = 
	`im_c⁄n_h™dÀ_gë
’m_evt.
≥î_id
);

101 
p_pdb_evt
->
evt_id
)

103 
PDB_EVT_WRITE_BUF_STORED
:

104 
pm_evt
.
evt_id
 = 
PM_EVT_PEER_DATA_UPDATE_SUCCEEDED
;

105 
pm_evt
.
∑øms
.
≥î_d©a_upd©e_suc˚eded
.
d©a_id
 = 
p_pdb_evt
->data_id;

106 
pm_evt
.
∑øms
.
≥î_d©a_upd©e_suc˚eded
.
a˘i⁄
 = 
PM_PEER_DATA_OP_UPDATE
;

107 
pm_evt
.
∑øms
.
≥î_d©a_upd©e_suc˚eded
.
tokí
 = 
PM_STORE_TOKEN_INVALID
;

108 
pm_evt
.
∑øms
.
≥î_d©a_upd©e_suc˚eded
.
Êash_ch™ged
 = 
åue
;

111 
PDB_EVT_RAW_STORED
:

112 
pm_evt
.
evt_id
 = 
PM_EVT_PEER_DATA_UPDATE_SUCCEEDED
;

113 
pm_evt
.
∑øms
.
≥î_d©a_upd©e_suc˚eded
.
d©a_id
 = 
p_pdb_evt
->data_id;

114 
pm_evt
.
∑øms
.
≥î_d©a_upd©e_suc˚eded
.
a˘i⁄
 = 
PM_PEER_DATA_OP_UPDATE
;

115 
pm_evt
.
∑øms
.
≥î_d©a_upd©e_suc˚eded
.
tokí


116 
p_pdb_evt
->
∑øms
.
øw_°‹ed_evt
.
°‹e_tokí
;

117 
pm_evt
.
∑øms
.
≥î_d©a_upd©e_suc˚eded
.
Êash_ch™ged
 = 
åue
;

119 i‡–(
m_≥î_ønk_tokí
 !
PM_STORE_TOKEN_INVALID
)

120 && (
m_≥î_ønk_tokí
 =
p_pdb_evt
->
∑øms
.
øw_°‹ed_evt
.
°‹e_tokí
))

122 
m_≥î_ønk_tokí
 = 
PM_STORE_TOKEN_INVALID
;

123 
m_highe°_ønked_≥î
 = 
pm_evt
.
≥î_id
;

125 
pm_evt
.
∑øms
.
≥î_d©a_upd©e_suc˚eded
.
tokí
 = 
PM_STORE_TOKEN_INVALID
;

129 
PDB_EVT_RAW_STORE_FAILED
:

130 
pm_evt
.
evt_id
 = 
PM_EVT_PEER_DATA_UPDATE_FAILED
;

131 
pm_evt
.
∑øms
.
≥î_d©a_upd©e_Áûed
.
d©a_id
 = 
p_pdb_evt
->data_id;

132 
pm_evt
.
∑øms
.
≥î_d©a_upd©e_Áûed
.
a˘i⁄
 = 
PM_PEER_DATA_OP_UPDATE
;

133 
pm_evt
.
∑øms
.
≥î_d©a_upd©e_Áûed
.
tokí


134 
p_pdb_evt
->
∑øms
.
îr‹_øw_°‹e_evt
.
°‹e_tokí
;

135 
pm_evt
.
∑øms
.
≥î_d©a_upd©e_Áûed
.
îr‹


136 
p_pdb_evt
->
∑øms
.
îr‹_øw_°‹e_evt
.
îr_code
;

138 i‡–(
m_≥î_ønk_tokí
 !
PM_STORE_TOKEN_INVALID
)

139 && (
m_≥î_ønk_tokí
 =
p_pdb_evt
->
∑øms
.
øw_°‹ed_evt
.
°‹e_tokí
))

141 
m_≥î_ønk_tokí
 = 
PM_STORE_TOKEN_INVALID
;

142 
m_cuºít_highe°_≥î_ønk
 -= 1;

144 
pm_evt
.
∑øms
.
≥î_d©a_upd©e_suc˚eded
.
tokí
 = 
PM_STORE_TOKEN_INVALID
;

148 
PDB_EVT_CLEARED
:

149 
pm_evt
.
evt_id
 = 
PM_EVT_PEER_DATA_UPDATE_SUCCEEDED
;

150 
pm_evt
.
∑øms
.
≥î_d©a_upd©e_suc˚eded
.
d©a_id
 = 
p_pdb_evt
->data_id;

151 
pm_evt
.
∑øms
.
≥î_d©a_upd©e_suc˚eded
.
a˘i⁄
 = 
PM_PEER_DATA_OP_DELETE
;

152 
pm_evt
.
∑øms
.
≥î_d©a_upd©e_suc˚eded
.
tokí
 = 
PM_STORE_TOKEN_INVALID
;

155 
PDB_EVT_CLEAR_FAILED
:

156 
pm_evt
.
evt_id
 = 
PM_EVT_PEER_DATA_UPDATE_FAILED
;

157 
pm_evt
.
∑øms
.
≥î_d©a_upd©e_Áûed
.
d©a_id
 = 
p_pdb_evt
->data_id;

158 
pm_evt
.
∑øms
.
≥î_d©a_upd©e_Áûed
.
a˘i⁄
 = 
PM_PEER_DATA_OP_DELETE
;

159 
pm_evt
.
∑øms
.
≥î_d©a_upd©e_Áûed
.
îr‹


160 
p_pdb_evt
->
∑øms
.
˛ór_Áûed_evt
.
îr_code
;

163 
PDB_EVT_PEER_FREED
:

164 
pm_evt
.
evt_id
 = 
PM_EVT_PEER_DELETE_SUCCEEDED
;

166 i‡(
m_dñëög_Æl


167 && (
	`pdb_√xt_≥î_id_gë
(
PM_PEER_ID_INVALID
) == PM_PEER_ID_INVALID)

168 && (
	`pdb_√xt_dñëed_≥î_id_gë
(
PM_PEER_ID_INVALID
) == PM_PEER_ID_INVALID))

171 
m_dñëög_Æl
 = 
Ál£
;

173 
pm_evt_t
 
pm_dñëe_Æl_evt
;

174 
	`mem£t
(&
pm_dñëe_Æl_evt
, 0, (
pm_evt_t
));

175 
pm_dñëe_Æl_evt
.
evt_id
 = 
PM_EVT_PEERS_DELETE_SUCCEEDED
;

176 
pm_dñëe_Æl_evt
.
≥î_id
 = 
PM_PEER_ID_INVALID
;

177 
pm_dñëe_Æl_evt
.
c⁄n_h™dÀ
 = 
BLE_CONN_HANDLE_INVALID
;

179 
	`evt_£nd
(&
pm_dñëe_Æl_evt
);

183 
PDB_EVT_PEER_FREE_FAILED
:

184 
pm_evt
.
evt_id
 = 
PM_EVT_PEER_DELETE_FAILED
;

185 
pm_evt
.
∑øms
.
≥î_dñëe_Áûed
.
îr‹


186 
p_pdb_evt
->
∑øms
.
≥î_‰ì_Áûed_evt
.
îr_code
;

187 i‡(
m_dñëög_Æl
)

191 
m_dñëög_Æl
 = 
Ál£
;

193 
pm_evt_t
 
pm_dñëe_Æl_evt
;

194 
	`mem£t
(&
pm_dñëe_Æl_evt
, 0, (
pm_evt_t
));

195 
pm_dñëe_Æl_evt
.
evt_id
 = 
PM_EVT_PEERS_DELETE_FAILED
;

196 
pm_dñëe_Æl_evt
.
≥î_id
 = 
PM_PEER_ID_INVALID
;

197 
pm_dñëe_Æl_evt
.
c⁄n_h™dÀ
 = 
BLE_CONN_HANDLE_INVALID
;

198 
pm_dñëe_Æl_evt
.
∑øms
.
≥îs_dñëe_Áûed_evt
.
îr‹


199 
p_pdb_evt
->
∑øms
.
≥î_‰ì_Áûed_evt
.
îr_code
;

201 
	`evt_£nd
(&
pm_dñëe_Æl_evt
);

205 
PDB_EVT_COMPRESSED
:

206 
£nd_evt
 = 
Ál£
;

210 
PDB_EVT_ERROR_NO_MEM
:

211 
pm_evt
.
evt_id
 = 
PM_EVT_STORAGE_FULL
;

214 
PDB_EVT_ERROR_UNEXPECTED
:

215 
pm_evt
.
evt_id
 = 
PM_EVT_ERROR_UNEXPECTED
;

219 
£nd_evt
 = 
Ál£
;

223 i‡(
£nd_evt
)

225 
	`evt_£nd
(&
pm_evt
);

227 
	}
}

235 
	$pm_sm_evt_h™dÀr
(
sm_evt_t
 c⁄° * 
p_sm_evt
)

237 
boﬁ
 
föd_≥î_id
 = 
åue
;

238 
boﬁ
 
£nd_evt
 = 
åue
;

239 
pm_evt_t
 
pm_evt
;

240 
	`mem£t
(&
pm_evt
, 0, (
pm_evt_t
));

241 
pm_evt
.
c⁄n_h™dÀ
 = 
p_sm_evt
->conn_handle;

243 
p_sm_evt
->
evt_id
)

245 
SM_EVT_SLAVE_SECURITY_REQ
:

246 
föd_≥î_id
 = 
Ál£
;

247 
£nd_evt
 = 
Ál£
;

250 
SM_EVT_SEC_PROCEDURE_START
:

252 
pm_evt
.
evt_id
 = 
PM_EVT_CONN_SEC_START
;

253 
boﬁ
 
∑úög
 = 
p_sm_evt
->
∑øms
.
£c_¥o˚duª_°¨t
.
¥o˚duª


254 !
PM_LINK_SECURED_PROCEDURE_ENCRYPTION
;

255 
boﬁ
 
b⁄dög
 = 
p_sm_evt
->
∑øms
.
£c_¥o˚duª_°¨t
.
¥o˚duª


256 =
PM_LINK_SECURED_PROCEDURE_BONDING
;

257 
	`bÀ_c⁄n_°©e_u£r_Êag_£t
(
p_sm_evt
->
c⁄n_h™dÀ
, 
m_∑úög_Êag_id
, 
∑úög
);

258 
	`bÀ_c⁄n_°©e_u£r_Êag_£t
(
p_sm_evt
->
c⁄n_h™dÀ
, 
m_b⁄dög_Êag_id
, 
b⁄dög
);

262 
SM_EVT_PAIRING_SUCCESS
:

263 
pm_evt
.
evt_id
 = 
PM_EVT_CONN_SEC_SUCCEEDED
;

264 
pm_evt
.
∑øms
.
c⁄n_£c_suc˚eded
.
¥o˚duª
 =

265 
p_sm_evt
->
∑øms
.
∑úög_suc˚ss
.
b⁄ded


266 ? 
PM_LINK_SECURED_PROCEDURE_BONDING


267 : 
PM_LINK_SECURED_PROCEDURE_PAIRING
;

268 
	`bÀ_c⁄n_°©e_u£r_Êag_£t
(
p_sm_evt
->
c⁄n_h™dÀ
, 
m_∑úög_Êag_id
, 
åue
);

269 
	`bÀ_c⁄n_°©e_u£r_Êag_£t
(
p_sm_evt
->
c⁄n_h™dÀ
,

270 
m_b⁄dög_Êag_id
,

271 
p_sm_evt
->
∑øms
.
∑úög_suc˚ss
.
b⁄ded


275 
SM_EVT_PAIRING_FAIL
:

276 
pm_evt
.
evt_id
 = 
PM_EVT_CONN_SEC_FAILED
;

277 
pm_evt
.
∑øms
.
c⁄n_£c_Áûed
.
¥o˚duª
 =

278 
	`bÀ_c⁄n_°©e_u£r_Êag_gë
(
p_sm_evt
->
c⁄n_h™dÀ
, 
m_b⁄dög_Êag_id
)

279 ? 
PM_LINK_SECURED_PROCEDURE_BONDING


280 : 
PM_LINK_SECURED_PROCEDURE_PAIRING
;

281 
pm_evt
.
∑øms
.
c⁄n_£c_Áûed
.
îr‹_§c


282 
p_sm_evt
->
∑øms
.
∑úög_Áûed
.
îr‹_§c
;

283 
pm_evt
.
∑øms
.
c⁄n_£c_Áûed
.
îr‹


284 
p_sm_evt
->
∑øms
.
∑úög_Áûed
.
îr‹
;

287 
SM_EVT_LINK_ENCRYPTION_UPDATE
:

288 i‡(!
	`bÀ_c⁄n_°©e_u£r_Êag_gë
(
p_sm_evt
->
c⁄n_h™dÀ
, 
m_∑úög_Êag_id
))

290 
pm_evt
.
evt_id
 = 
PM_EVT_CONN_SEC_SUCCEEDED
;

291 
pm_evt
.
∑øms
.
c⁄n_£c_suc˚eded
.
¥o˚duª
 = 
PM_LINK_SECURED_PROCEDURE_ENCRYPTION
;

295 
föd_≥î_id
 = 
Ál£
;

296 
£nd_evt
 = 
Ál£
;

300 
SM_EVT_LINK_ENCRYPTION_FAILED
:

301 
pm_evt
.
evt_id
 = 
PM_EVT_CONN_SEC_FAILED
;

302 
pm_evt
.
∑øms
.
c⁄n_£c_Áûed
.
¥o˚duª


303 
PM_LINK_SECURED_PROCEDURE_ENCRYPTION
;

304 
pm_evt
.
∑øms
.
c⁄n_£c_Áûed
.
îr‹_§c


305 
p_sm_evt
->
∑øms
.
lök_í¸y±i⁄_Áûed
.
îr‹_§c
;

306 
pm_evt
.
∑øms
.
c⁄n_£c_Áûed
.
îr‹


307 
p_sm_evt
->
∑øms
.
lök_í¸y±i⁄_Áûed
.
îr‹
;

310 
SM_EVT_BONDING_INFO_STORED
:

311 
pm_evt
.
evt_id
 = 
PM_EVT_PEER_DATA_UPDATE_SUCCEEDED
;

312 
pm_evt
.
≥î_id
 = 
p_sm_evt
->
∑øms
.
b⁄dög_öfo_°‹ed
.peer_id;

313 
pm_evt
.
∑øms
.
≥î_d©a_upd©e_suc˚eded
.
d©a_id
 = 
PM_PEER_DATA_ID_BONDING
;

314 
pm_evt
.
∑øms
.
≥î_d©a_upd©e_suc˚eded
.
a˘i⁄
 = 
PM_PEER_DATA_OP_UPDATE
;

315 
föd_≥î_id
 = 
Ál£
;

318 
SM_EVT_ERROR_BONDING_INFO
:

319 
pm_evt
.
evt_id
 = 
PM_EVT_PEER_DATA_UPDATE_FAILED
;

320 
pm_evt
.
≥î_id
 = 
p_sm_evt
->
∑øms
.
îr‹_b⁄dög_öfo
.peer_id;

321 
pm_evt
.
∑øms
.
≥î_d©a_upd©e_Áûed
.
d©a_id
 = 
PM_PEER_DATA_ID_BONDING
;

322 
pm_evt
.
∑øms
.
≥î_d©a_upd©e_Áûed
.
a˘i⁄
 = 
PM_PEER_DATA_OP_UPDATE
;

323 
pm_evt
.
∑øms
.
≥î_d©a_upd©e_Áûed
.
îr‹


324 
p_sm_evt
->
∑øms
.
îr‹_b⁄dög_öfo
.
îr‹
;

325 
föd_≥î_id
 = 
Ál£
;

328 
SM_EVT_ERROR_UNEXPECTED
:

329 
pm_evt
.
evt_id
 = 
PM_EVT_ERROR_UNEXPECTED
;

330 
pm_evt
.
∑øms
.
îr‹_u√x≥˘ed
.
îr‹
 = 
p_sm_evt
->params.error_unexpected.error;

333 
SM_EVT_ERROR_NO_MEM
:

334 
pm_evt
.
evt_id
 = 
PM_EVT_STORAGE_FULL
;

337 
SM_EVT_ERROR_SMP_TIMEOUT
:

338 
pm_evt
.
evt_id
 = 
PM_EVT_CONN_SEC_FAILED
;

339 
pm_evt
.
∑øms
.
c⁄n_£c_Áûed
.
¥o˚duª


340 
	`bÀ_c⁄n_°©e_u£r_Êag_gë
(
p_sm_evt
->
c⁄n_h™dÀ
, 
m_b⁄dög_Êag_id
)

341 ? 
PM_LINK_SECURED_PROCEDURE_BONDING


342 : 
PM_LINK_SECURED_PROCEDURE_PAIRING
;

343 
pm_evt
.
∑øms
.
c⁄n_£c_Áûed
.
îr‹_§c
 = 
BLE_GAP_SEC_STATUS_SOURCE_LOCAL
;

344 
pm_evt
.
∑øms
.
c⁄n_£c_Áûed
.
îr‹
 = 
PM_CONN_SEC_ERROR_SMP_TIMEOUT
;

347 
SM_EVT_CONN_SEC_CONFIG_REQ
:

348 
pm_evt
.
evt_id
 = 
PM_EVT_CONN_SEC_CONFIG_REQ
;

352 
£nd_evt
 = 
Ál£
;

356 i‡(
föd_≥î_id
)

358 
pm_evt
.
≥î_id
 = 
	`im_≥î_id_gë_by_c⁄n_h™dÀ
(
p_sm_evt
->
c⁄n_h™dÀ
);

361 i‡(
£nd_evt
)

363 
	`evt_£nd
(&
pm_evt
);

365 
	}
}

373 
	$pm_gcm_evt_h™dÀr
(
gcm_evt_t
 c⁄° * 
p_gcm_evt
)

375 
boﬁ
 
£nd_evt
 = 
åue
;

376 
pm_evt_t
 
pm_evt
;

378 
	`mem£t
(&
pm_evt
, 0, (
pm_evt_t
));

379 
pm_evt
.
≥î_id
 = 
p_gcm_evt
->peer_id;

380 
pm_evt
.
c⁄n_h™dÀ
 = 
	`im_c⁄n_h™dÀ_gë
’m_evt.
≥î_id
);

382 
p_gcm_evt
->
evt_id
)

384 
GCM_EVT_LOCAL_DB_CACHE_STORED
:

385 
pm_evt
.
evt_id
 = 
PM_EVT_PEER_DATA_UPDATE_SUCCEEDED
;

386 
pm_evt
.
∑øms
.
≥î_d©a_upd©e_suc˚eded
.
a˘i⁄
 = 
PM_PEER_DATA_OP_UPDATE
;

387 
pm_evt
.
∑øms
.
≥î_d©a_upd©e_suc˚eded
.
d©a_id
 = 
PM_PEER_DATA_ID_GATT_LOCAL
;

390 
GCM_EVT_LOCAL_DB_CACHE_UPDATED
:

391 
pm_evt
.
evt_id
 = 
PM_EVT_PEER_DATA_UPDATE_SUCCEEDED
;

392 
pm_evt
.
∑øms
.
≥î_d©a_upd©e_suc˚eded
.
a˘i⁄
 = 
PM_PEER_DATA_OP_UPDATE
;

393 
pm_evt
.
∑øms
.
≥î_d©a_upd©e_suc˚eded
.
d©a_id
 = 
PM_PEER_DATA_ID_GATT_LOCAL
;

396 
GCM_EVT_LOCAL_DB_CACHE_APPLIED
:

397 
pm_evt
.
evt_id
 = 
PM_EVT_LOCAL_DB_CACHE_APPLIED
;

400 
GCM_EVT_ERROR_LOCAL_DB_CACHE_APPLY
:

401 
pm_evt
.
evt_id
 = 
PM_EVT_LOCAL_DB_CACHE_APPLY_FAILED
;

404 
GCM_EVT_REMOTE_DB_CACHE_UPDATED
:

405 
pm_evt
.
evt_id
 = 
PM_EVT_PEER_DATA_UPDATE_SUCCEEDED
;

406 
pm_evt
.
∑øms
.
≥î_d©a_upd©e_suc˚eded
.
a˘i⁄
 = 
PM_PEER_DATA_OP_UPDATE
;

407 
pm_evt
.
∑øms
.
≥î_d©a_upd©e_suc˚eded
.
d©a_id
 = 
PM_PEER_DATA_ID_GATT_REMOTE
;

410 
GCM_EVT_SERVICE_CHANGED_IND_SENT
:

411 
pm_evt
.
evt_id
 = 
PM_EVT_SERVICE_CHANGED_IND_SENT
;

414 
GCM_EVT_SERVICE_CHANGED_IND_CONFIRMED
:

415 
pm_evt
.
evt_id
 = 
PM_EVT_SERVICE_CHANGED_IND_CONFIRMED
;

418 
GCM_EVT_ERROR_DATA_SIZE
:

419 
£nd_evt
 = 
Ál£
;

422 
GCM_EVT_ERROR_STORAGE_FULL
:

423 
pm_evt
.
evt_id
 = 
PM_EVT_STORAGE_FULL
;

426 
GCM_EVT_ERROR_UNEXPECTED
:

427 
pm_evt
.
evt_id
 = 
PM_EVT_ERROR_UNEXPECTED
;

428 
pm_evt
.
∑øms
.
îr‹_u√x≥˘ed
.
îr‹
 = 
p_gcm_evt
->params.error_unexpected.error;

429 
pm_evt
.
c⁄n_h™dÀ
 = 
p_gcm_evt
->
∑øms
.
îr‹_u√x≥˘ed
.conn_handle;

433 i‡(
£nd_evt
)

435 
	`evt_£nd
(&
pm_evt
);

437 
	}
}

445 
	$pm_im_evt_h™dÀr
(
im_evt_t
 c⁄° * 
p_im_evt
)

447 
pm_evt_t
 
pm_evt
;

448 
ªt_code_t
 
îr_code
;

450 
p_im_evt
->
evt_id
)

452 
IM_EVT_DUPLICATE_ID
:

455 
îr_code
 = 
	`pm_≥î_dñëe
(
p_im_evt
->
∑øms
.
du∂iˇã_id
.
≥î_id_2
);

456 
	`UNUSED_VARIABLE
(
îr_code
);

459 
IM_EVT_BONDED_PEER_CONNECTED
:

460 
	`bÀ_c⁄n_°©e_u£r_Êag_£t
(
p_im_evt
->
c⁄n_h™dÀ
, 
m_b⁄dög_Êag_id
, 
åue
);

461 
	`mem£t
(&
pm_evt
, 0, (
pm_evt_t
));

462 
pm_evt
.
c⁄n_h™dÀ
 = 
p_im_evt
->conn_handle;

463 
pm_evt
.
≥î_id
 = 
	`im_≥î_id_gë_by_c⁄n_h™dÀ
(
p_im_evt
->
c⁄n_h™dÀ
);

464 
pm_evt
.
evt_id
 = 
PM_EVT_BONDED_PEER_CONNECTED
;

465 
	`evt_£nd
(&
pm_evt
);

468 
	}
}

471 
	$pm_⁄_bÀ_evt
(
bÀ_evt_t
 * 
p_bÀ_evt
)

473 
	`VERIFY_MODULE_INITIALIZED_VOID
();

475 
	`im_bÀ_evt_h™dÀr
(
p_bÀ_evt
);

476 
	`sm_bÀ_evt_h™dÀr
(
p_bÀ_evt
);

477 
	`gcm_bÀ_evt_h™dÀr
(
p_bÀ_evt
);

478 
	}
}

483 
	$öã∫Æ_°©e_ª£t
()

485 
m_highe°_ønked_≥î
 = 
PM_PEER_ID_INVALID
;

486 
m_≥î_ønk_tokí
 = 
PM_STORE_TOKEN_INVALID
;

487 
m_∑úög_Êag_id
 = 
BLE_CONN_STATE_USER_FLAG_INVALID
;

488 
m_b⁄dög_Êag_id
 = 
BLE_CONN_STATE_USER_FLAG_INVALID
;

489 
	}
}

492 
ªt_code_t
 
	$pm_öô
()

494 
ªt_code_t
 
îr_code
;

496 
îr_code
 = 
	`pds_öô
();

497 i‡(
îr_code
 !
NRF_SUCCESS
)

499  
NRF_ERROR_INTERNAL
;

502 
îr_code
 = 
	`pdb_öô
();

503 i‡(
îr_code
 !
NRF_SUCCESS
)

505  
NRF_ERROR_INTERNAL
;

508 
îr_code
 = 
	`sm_öô
();

509 i‡(
îr_code
 !
NRF_SUCCESS
)

511  
NRF_ERROR_INTERNAL
;

514 
îr_code
 = 
	`smd_öô
();

515 i‡(
îr_code
 !
NRF_SUCCESS
)

517  
NRF_ERROR_INTERNAL
;

520 
îr_code
 = 
	`gcm_öô
();

521 i‡(
îr_code
 !
NRF_SUCCESS
)

523  
NRF_ERROR_INTERNAL
;

526 
îr_code
 = 
	`gscm_öô
();

527 i‡(
îr_code
 !
NRF_SUCCESS
)

529  
NRF_ERROR_INTERNAL
;

532 
îr_code
 = 
	`im_öô
();

533 i‡(
îr_code
 !
NRF_SUCCESS
)

535  
NRF_ERROR_INTERNAL
;

538 
	`öã∫Æ_°©e_ª£t
();

540 
m_∑úög_Êag_id
 = 
	`bÀ_c⁄n_°©e_u£r_Êag_acquúe
();

541 i‡(
m_∑úög_Êag_id
 =
BLE_CONN_STATE_USER_FLAG_INVALID
)

543  
NRF_ERROR_INTERNAL
;

546 
m_b⁄dög_Êag_id
 = 
	`bÀ_c⁄n_°©e_u£r_Êag_acquúe
();

547 i‡(
m_b⁄dög_Êag_id
 =
BLE_CONN_STATE_USER_FLAG_INVALID
)

549  
NRF_ERROR_INTERNAL
;

552 
m_≥î_ønk_öôülized
 = 
Ál£
;

553 
m_moduÀ_öôülized
 = 
åue
;

555  
NRF_SUCCESS
;

556 
	}
}

559 
ªt_code_t
 
	$pm_ªgi°î
(
pm_evt_h™dÀr_t
 
evít_h™dÀr
)

561 
	`VERIFY_MODULE_INITIALIZED
();

563 i‡(
m_n_ªgi°ø¡s
 >
MAX_REGISTRANTS
)

565  
NRF_ERROR_NO_MEM
;

568 
m_evt_h™dÀrs
[
m_n_ªgi°ø¡s
] = 
evít_h™dÀr
;

569 
m_n_ªgi°ø¡s
 += 1;

571  
NRF_SUCCESS
;

572 
	}
}

575 
ªt_code_t
 
	$pm_£c_∑øms_£t
(
bÀ_g≠_£c_∑øms_t
 * 
p_£c_∑øms
)

577 
	`VERIFY_MODULE_INITIALIZED
();

579 
ªt_code_t
 
îr_code
;

581 
îr_code
 = 
	`sm_£c_∑øms_£t
(
p_£c_∑øms
);

585  
îr_code
;

586 
	}
}

589 
ªt_code_t
 
	$pm_c⁄n_£cuª
(
uöt16_t
 
c⁄n_h™dÀ
, 
boﬁ
 
f‹˚_ª∑úög
)

591 
	`VERIFY_MODULE_INITIALIZED
();

593 
ªt_code_t
 
îr_code
;

595 
îr_code
 = 
	`sm_lök_£cuª
(
c⁄n_h™dÀ
, 
f‹˚_ª∑úög
);

597  
îr_code
;

598 
	}
}

601 
	$pm_c⁄n_£c_c⁄fig_ª∂y
(
uöt16_t
 
c⁄n_h™dÀ
, 
pm_c⁄n_£c_c⁄fig_t
 * 
p_c⁄n_£c_c⁄fig
)

603 
	`sm_c⁄n_£c_c⁄fig_ª∂y
(
c⁄n_h™dÀ
, 
p_c⁄n_£c_c⁄fig
);

604 
	}
}

607 
ªt_code_t
 
	$pm_£c_∑øms_ª∂y
(
uöt16_t
 
c⁄n_h™dÀ
, 
bÀ_g≠_£c_∑øms_t
 * 
p_£c_∑øms
)

609 
	`VERIFY_MODULE_INITIALIZED
();

610  
NRF_SUCCESS
;

611 
	}
}

614 
	$pm_loˇl_d©aba£_has_ch™ged
()

616 
	`VERIFY_MODULE_INITIALIZED_VOID
();

617 
	`gcm_loˇl_d©aba£_has_ch™ged
();

618 
	}
}

621 
ªt_code_t
 
	$pm_id_addr_£t
(
bÀ_g≠_addr_t
 c⁄° * 
p_addr
)

623 
	`VERIFY_MODULE_INITIALIZED
();

624  
	`im_id_addr_£t
(
p_addr
);

625 
	}
}

628 
ªt_code_t
 
	$pm_id_addr_gë
(
bÀ_g≠_addr_t
 * 
p_addr
)

630 
	`VERIFY_MODULE_INITIALIZED
();

631 
	`VERIFY_PARAM_NOT_NULL
(
p_addr
);

632  
	`im_id_addr_gë
(
p_addr
);

633 
	}
}

636 
ªt_code_t
 
	$pm_¥ivacy_£t
(
pm_¥ivacy_∑øms_t
 c⁄° * 
p_¥ivacy_∑øms
)

638 
	`VERIFY_MODULE_INITIALIZED
();

639 
	`VERIFY_PARAM_NOT_NULL
(
p_¥ivacy_∑øms
);

640  
	`im_¥ivacy_£t
(
p_¥ivacy_∑øms
);

641 
	}
}

644 
ªt_code_t
 
	$pm_¥ivacy_gë
(
pm_¥ivacy_∑øms_t
 * 
p_¥ivacy_∑øms
)

646 
	`VERIFY_MODULE_INITIALIZED
();

647 
	`VERIFY_PARAM_NOT_NULL
(
p_¥ivacy_∑øms
);

648 
	`VERIFY_PARAM_NOT_NULL
(
p_¥ivacy_∑øms
->
p_devi˚_úk
);

649  
	`im_¥ivacy_gë
(
p_¥ivacy_∑øms
);

650 
	}
}

653 
ªt_code_t
 
	$pm_whôñi°_£t
(
pm_≥î_id_t
 c⁄° * 
p_≥îs
,

654 
uöt32_t
 
≥î_˙t
)

656 
	`VERIFY_MODULE_INITIALIZED
();

657  
	`im_whôñi°_£t
(
p_≥îs
, 
≥î_˙t
);

658 
	}
}

661 
ªt_code_t
 
	$pm_whôñi°_gë
(
bÀ_g≠_addr_t
 * 
p_addrs
,

662 
uöt32_t
 * 
p_addr_˙t
,

663 
bÀ_g≠_úk_t
 * 
p_úks
,

664 
uöt32_t
 * 
p_úk_˙t
)

666 
	`VERIFY_MODULE_INITIALIZED
();

668 i‡(((
p_addrs
 =
NULL
Ë&& (
p_úks
 == NULL)) ||

669 ((
p_addrs
 !
NULL
Ë&& (
p_addr_˙t
 == NULL)) ||

670 ((
p_úks
 !
NULL
Ë&& (
p_úk_˙t
 == NULL)))

673  
NRF_ERROR_NULL
;

676  
	`im_whôñi°_gë
(
p_addrs
, 
p_addr_˙t
, 
p_úks
, 
p_úk_˙t
);

677 
	}
}

680 
ªt_code_t
 
	$pm_devi˚_idítôõs_li°_£t
(
pm_≥î_id_t
 c⁄° * 
p_≥îs
,

681 
uöt32_t
 
≥î_˙t
)

683 
	`VERIFY_MODULE_INITIALIZED
();

684  
	`im_devi˚_idítôõs_li°_£t
(
p_≥îs
, 
≥î_˙t
);

685 
	}
}

688 
ªt_code_t
 
	$pm_c⁄n_£c_°©us_gë
(
uöt16_t
 
c⁄n_h™dÀ
, 
pm_c⁄n_£c_°©us_t
 * 
p_c⁄n_£c_°©us
)

690 
	`VERIFY_MODULE_INITIALIZED
();

691 
	`VERIFY_PARAM_NOT_NULL
(
p_c⁄n_£c_°©us
);

693 
bÀ_c⁄n_°©e_°©us_t
 
°©us
 = 
	`bÀ_c⁄n_°©e_°©us
(
c⁄n_h™dÀ
);

695 i‡(
°©us
 =
BLE_CONN_STATUS_INVALID
)

697  
BLE_ERROR_INVALID_CONN_HANDLE
;

700 
p_c⁄n_£c_°©us
->
c⁄√˘ed
 = (
°©us
 =
BLE_CONN_STATUS_CONNECTED
);

701 
p_c⁄n_£c_°©us
->
b⁄ded
 = 
	`bÀ_c⁄n_°©e_u£r_Êag_gë
(
c⁄n_h™dÀ
, 
m_b⁄dög_Êag_id
);

702 
p_c⁄n_£c_°©us
->
í¸y±ed
 = 
	`bÀ_c⁄n_°©e_í¸y±ed
(
c⁄n_h™dÀ
);

703 
p_c⁄n_£c_°©us
->
môm_¥Ÿe˘ed
 = 
	`bÀ_c⁄n_°©e_môm_¥Ÿe˘ed
(
c⁄n_h™dÀ
);

704  
NRF_SUCCESS
;

705 
	}
}

708 
ªt_code_t
 
	$pm_Àsc_public_key_£t
(
bÀ_g≠_Àsc_p256_pk_t
 * 
p_public_key
)

710 
	`VERIFY_MODULE_INITIALIZED
();

711  
	`sm_Àsc_public_key_£t
(
p_public_key
);

712 
	}
}

715 
ªt_code_t
 
	$pm_c⁄n_h™dÀ_gë
(
pm_≥î_id_t
 
≥î_id
, 
uöt16_t
 * 
p_c⁄n_h™dÀ
)

717 
	`VERIFY_MODULE_INITIALIZED
();

718 
	`VERIFY_PARAM_NOT_NULL
(
p_c⁄n_h™dÀ
);

719 *
p_c⁄n_h™dÀ
 = 
	`im_c⁄n_h™dÀ_gë
(
≥î_id
);

720  
NRF_SUCCESS
;

721 
	}
}

724 
ªt_code_t
 
	$pm_≥î_id_gë
(
uöt16_t
 
c⁄n_h™dÀ
, 
pm_≥î_id_t
 * 
p_≥î_id
)

726 
	`VERIFY_MODULE_INITIALIZED
();

727 
	`VERIFY_PARAM_NOT_NULL
(
p_≥î_id
);

728 *
p_≥î_id
 = 
	`im_≥î_id_gë_by_c⁄n_h™dÀ
(
c⁄n_h™dÀ
);

729  
NRF_SUCCESS
;

730 
	}
}

733 
uöt32_t
 
	$pm_≥î_cou¡
()

735 i‡(!
MODULE_INITIALIZED
)

739  
	`pdb_n_≥îs
();

740 
	}
}

743 
pm_≥î_id_t
 
	$pm_√xt_≥î_id_gë
(
pm_≥î_id_t
 
¥ev_≥î_id
)

745 i‡(!
MODULE_INITIALIZED
)

747  
PM_PEER_ID_INVALID
;

749  
	`pdb_√xt_≥î_id_gë
(
¥ev_≥î_id
);

750 
	}
}

753 
ªt_code_t
 
	$pm_≥î_d©a_lﬂd
(
pm_≥î_id_t
 
≥î_id
,

754 
pm_≥î_d©a_id_t
 
d©a_id
,

755 * 
p_d©a
,

756 
uöt16_t
 * 
p_Àngth
)

758 
	`VERIFY_MODULE_INITIALIZED
();

759 
	`VERIFY_PARAM_NOT_NULL
(
p_d©a
);

760 
	`VERIFY_PARAM_NOT_NULL
(
p_Àngth
);

761 i‡(
	`ALIGN_NUM
(4, *
p_Àngth
) != *p_length)

763  
NRF_ERROR_INVALID_PARAM
;

766 
pm_≥î_d©a_t
 
≥î_d©a
;

767 
	`mem£t
(&
≥î_d©a
, 0, (peer_data));

768 
≥î_d©a
.
Àngth_w‹ds
 = 
	`BYTES_TO_WORDS
(*
p_Àngth
);

769 
≥î_d©a
.
d©a_id
 = data_id;

770 
≥î_d©a
.
p_Æl_d©a
 = 
p_d©a
;

772 
ªt_code_t
 
îr_code
 = 
	`pdb_≥î_d©a_lﬂd
(
≥î_id
, 
d©a_id
, &
≥î_d©a
);

774 *
p_Àngth
 = 
≥î_d©a
.
Àngth_w‹ds
 * 
BYTES_PER_WORD
;

776  
îr_code
;

777 
	}
}

780 
ªt_code_t
 
	$pm_≥î_d©a_b⁄dög_lﬂd
(
pm_≥î_id_t
 
≥î_id
,

781 
pm_≥î_d©a_b⁄dög_t
 * 
p_d©a
)

783 
uöt16_t
 
Àngth
 = (
pm_≥î_d©a_b⁄dög_t
);

784  
	`pm_≥î_d©a_lﬂd
(
≥î_id
,

785 
PM_PEER_DATA_ID_BONDING
,

786 
p_d©a
,

787 &
Àngth
);

788 
	}
}

791 
ªt_code_t
 
	$pm_≥î_d©a_ªmŸe_db_lﬂd
(
pm_≥î_id_t
 
≥î_id
,

792 
bÀ_g©t_db_§v_t
 * 
p_d©a
,

793 
uöt16_t
 * 
p_Àngth
)

795  
	`pm_≥î_d©a_lﬂd
(
≥î_id
,

796 
PM_PEER_DATA_ID_GATT_REMOTE
,

797 
p_d©a
,

798 
p_Àngth
);

799 
	}
}

802 
ªt_code_t
 
	$pm_≥î_d©a_≠p_d©a_lﬂd
(
pm_≥î_id_t
 
≥î_id
,

803 
uöt8_t
 * 
p_d©a
,

804 
uöt16_t
 * 
p_Àngth
)

806  
	`pm_≥î_d©a_lﬂd
(
≥î_id
,

807 
PM_PEER_DATA_ID_APPLICATION
,

808 
p_d©a
,

809 
p_Àngth
);

810 
	}
}

813 
ªt_code_t
 
	$pm_≥î_d©a_°‹e
(
pm_≥î_id_t
 
≥î_id
,

814 
pm_≥î_d©a_id_t
 
d©a_id
,

815 c⁄° * 
p_d©a
,

816 
uöt16_t
 
Àngth
,

817 
pm_°‹e_tokí_t
 * 
p_tokí
)

819 
	`VERIFY_MODULE_INITIALIZED
();

820 
	`VERIFY_PARAM_NOT_NULL
(
p_d©a
);

821 i‡(
	`ALIGN_NUM
(4, 
Àngth
) !=Üength)

823  
NRF_ERROR_INVALID_PARAM
;

826 
pm_≥î_d©a_Êash_t
 
≥î_d©a
;

827 
	`mem£t
(&
≥î_d©a
, 0, (peer_data));

828 
≥î_d©a
.
Àngth_w‹ds
 = 
	`BYTES_TO_WORDS
(
Àngth
);

829 
≥î_d©a
.
d©a_id
 = data_id;

830 
≥î_d©a
.
p_Æl_d©a
 = 
p_d©a
;

832  
	`pdb_øw_°‹e
(
≥î_id
, &
≥î_d©a
, 
p_tokí
);

833 
	}
}

836 
ªt_code_t
 
	$pm_≥î_d©a_b⁄dög_°‹e
(
pm_≥î_id_t
 
≥î_id
,

837 
pm_≥î_d©a_b⁄dög_t
 c⁄° * 
p_d©a
,

838 
pm_°‹e_tokí_t
 * 
p_tokí
)

840  
	`pm_≥î_d©a_°‹e
(
≥î_id
,

841 
PM_PEER_DATA_ID_BONDING
,

842 
p_d©a
,

843 
	`ALIGN_NUM
(4, (
pm_≥î_d©a_b⁄dög_t
)),

844 
p_tokí
);

845 
	}
}

848 
ªt_code_t
 
	$pm_≥î_d©a_ªmŸe_db_°‹e
(
pm_≥î_id_t
 
≥î_id
,

849 
bÀ_g©t_db_§v_t
 c⁄° * 
p_d©a
,

850 
uöt16_t
 
Àngth
,

851 
pm_°‹e_tokí_t
 * 
p_tokí
)

853  
	`pm_≥î_d©a_°‹e
(
≥î_id
,

854 
PM_PEER_DATA_ID_GATT_REMOTE
,

855 
p_d©a
,

856 
Àngth
,

857 
p_tokí
);

858 
	}
}

861 
ªt_code_t
 
	$pm_≥î_d©a_≠p_d©a_°‹e
(
pm_≥î_id_t
 
≥î_id
,

862 
uöt8_t
 c⁄° * 
p_d©a
,

863 
uöt16_t
 
Àngth
,

864 
pm_°‹e_tokí_t
 * 
p_tokí
)

866  
	`pm_≥î_d©a_°‹e
(
≥î_id
,

867 
PM_PEER_DATA_ID_APPLICATION
,

868 
p_d©a
,

869 
Àngth
,

870 
p_tokí
);

871 
	}
}

874 
ªt_code_t
 
	$pm_≥î_d©a_dñëe
(
pm_≥î_id_t
 
≥î_id
, 
pm_≥î_d©a_id_t
 
d©a_id
)

876 
	`VERIFY_MODULE_INITIALIZED
();

878 i‡(
d©a_id
 =
PM_PEER_DATA_ID_BONDING
)

880  
NRF_ERROR_INVALID_PARAM
;

883  
	`pdb_˛ór
(
≥î_id
, 
d©a_id
);

884 
	}
}

887 
ªt_code_t
 
	$pm_≥î_√w
(
pm_≥î_id_t
 * 
p_√w_≥î_id
,

888 
pm_≥î_d©a_b⁄dög_t
 * 
p_b⁄dög_d©a
,

889 
pm_°‹e_tokí_t
 * 
p_tokí
)

891 
ªt_code_t
 
îr_code
;

892 
pm_≥î_id_t
 
≥î_id
;

893 
pm_≥î_d©a_Êash_t
 
≥î_d©a
;

895 
	`VERIFY_MODULE_INITIALIZED
();

896 
	`VERIFY_PARAM_NOT_NULL
(
p_b⁄dög_d©a
);

897 
	`VERIFY_PARAM_NOT_NULL
(
p_√w_≥î_id
);

899 
	`mem£t
(&
≥î_d©a
, 0, (
pm_≥î_d©a_Êash_t
));

902 
	`pds_≥î_d©a_ôî©e_¥ï¨e
();

905 
	`pds_≥î_d©a_ôî©e
(
PM_PEER_DATA_ID_BONDING
, &
≥î_id
, &
≥î_d©a
))

907 i‡(
	`im_is_du∂iˇã_b⁄dög_d©a
(
p_b⁄dög_d©a
, 
≥î_d©a
.p_bonding_data))

909 *
p_√w_≥î_id
 = 
≥î_id
;

910  
NRF_SUCCESS
;

916 *
p_√w_≥î_id
 = 
	`pdb_≥î_Æloˇã
();

918 i‡(*
p_√w_≥î_id
 =
PM_PEER_ID_INVALID
)

920  
NRF_ERROR_NO_MEM
;

923 
	`mem£t
(&
≥î_d©a
, 0, (
pm_≥î_d©a_Êash_t
));

925 
≥î_d©a
.
d©a_id
 = 
PM_PEER_DATA_ID_BONDING
;

926 
≥î_d©a
.
p_b⁄dög_d©a
 =Ö_bonding_data;

927 
≥î_d©a
.
Àngth_w‹ds
 = 
	`BYTES_TO_WORDS
((
pm_≥î_d©a_b⁄dög_t
));

929 
îr_code
 = 
	`pdb_øw_°‹e
(*
p_√w_≥î_id
, &
≥î_d©a
, 
p_tokí
);

931 i‡(
îr_code
 !
NRF_SUCCESS
)

933 i‡(
	`im_≥î_‰ì
(*
p_√w_≥î_id
Ë!
NRF_SUCCESS
)

935  
NRF_ERROR_INTERNAL
;

941  
îr_code
;

944  
NRF_SUCCESS
;

945 
	}
}

948 
ªt_code_t
 
	$pm_≥î_dñëe
(
pm_≥î_id_t
 
≥î_id
)

950 
	`VERIFY_MODULE_INITIALIZED
();

952  
	`im_≥î_‰ì
(
≥î_id
);

953 
	}
}

956 
ªt_code_t
 
	$pm_≥îs_dñëe
()

958 
	`VERIFY_MODULE_INITIALIZED
();

960 
m_dñëög_Æl
 = 
åue
;

962 
pm_≥î_id_t
 
cuºít_≥î_id
 = 
	`pdb_√xt_≥î_id_gë
(
PM_PEER_ID_INVALID
);

963 
cuºít_≥î_id
 !
PM_PEER_ID_INVALID
)

965 
ªt_code_t
 
îr_code
 = 
	`pm_≥î_dñëe
(
cuºít_≥î_id
);

966 i‡(
îr_code
 !
NRF_SUCCESS
)

968  
NRF_ERROR_INTERNAL
;

971 
cuºít_≥î_id
 = 
	`pdb_√xt_≥î_id_gë
(current_peer_id);

974  
NRF_SUCCESS
;

975 
	}
}

978 
ªt_code_t
 
	$pm_≥î_ønks_gë
(
pm_≥î_id_t
 * 
p_highe°_ønked_≥î
,

979 
uöt32_t
 * 
p_highe°_ønk
,

980 
pm_≥î_id_t
 * 
p_lowe°_ønked_≥î
,

981 
uöt32_t
 * 
p_lowe°_ønk
)

983 
	`VERIFY_MODULE_INITIALIZED
();

985 
pm_≥î_id_t
 
≥î_id
 = 
	`pdb_√xt_≥î_id_gë
(
PM_PEER_ID_INVALID
);

986 
uöt32_t
 
≥î_ønk
 = 0;

988 
pm_≥î_d©a_t
 
≥î_d©a
 = {.
Àngth_w‹ds
 = 
	`BYTES_TO_WORDS
((
≥î_ønk
)),

989 .
p_≥î_ønk
 = &
≥î_ønk
};

991 
ªt_code_t
 
îr_code
 = 
	`pdb_≥î_d©a_lﬂd
(
≥î_id
, 
PM_PEER_DATA_ID_PEER_RANK
, &
≥î_d©a
);

992 
uöt32_t
 
highe°_ønk
 = 0;

993 
uöt32_t
 
lowe°_ønk
 = 0xFFFFFFFF;

994 
pm_≥î_id_t
 
highe°_ønked_≥î
 = 
PM_PEER_ID_INVALID
;

995 
pm_≥î_id_t
 
lowe°_ønked_≥î
 = 
PM_PEER_ID_INVALID
;

997 i‡(
îr_code
 =
NRF_ERROR_INVALID_PARAM
)

1000  
NRF_ERROR_NOT_FOUND
;

1003 (
îr_code
 =
NRF_SUCCESS
Ë|| (îr_codê=
NRF_ERROR_NOT_FOUND
))

1005 i‡(
îr_code
 =
NRF_ERROR_NOT_FOUND
)

1007 
≥î_ønk
 = 0;

1009 i‡(
≥î_ønk
 >
highe°_ønk
)

1011 
highe°_ønk
 = 
≥î_ønk
;

1012 
highe°_ønked_≥î
 = 
≥î_id
;

1014 i‡(
≥î_ønk
 < 
lowe°_ønk
)

1016 
lowe°_ønk
 = 
≥î_ønk
;

1017 
lowe°_ønked_≥î
 = 
≥î_id
;

1019 
≥î_id
 = 
	`pdb_√xt_≥î_id_gë
(peer_id);

1020 
îr_code
 = 
	`pdb_≥î_d©a_lﬂd
(
≥î_id
, 
PM_PEER_DATA_ID_PEER_RANK
, &
≥î_d©a
);

1022 i‡(
≥î_id
 =
PM_PEER_ID_INVALID
)

1024 
îr_code
 = 
NRF_SUCCESS
;

1025 i‡(
p_highe°_ønked_≥î
 !
NULL
)

1027 *
p_highe°_ønked_≥î
 = 
highe°_ønked_≥î
;

1029 i‡(
p_highe°_ønk
 !
NULL
)

1031 *
p_highe°_ønk
 = 
highe°_ønk
;

1033 i‡(
p_lowe°_ønked_≥î
 !
NULL
)

1035 *
p_lowe°_ønked_≥î
 = 
lowe°_ønked_≥î
;

1037 i‡(
p_lowe°_ønk
 !
NULL
)

1039 *
p_lowe°_ønk
 = 
lowe°_ønk
;

1044 
îr_code
 = 
NRF_ERROR_INTERNAL
;

1046  
îr_code
;

1047 
	}
}

1052 
	$ønk_öô
()

1054 
ªt_code_t
 
îr_code
 = 
	`pm_≥î_ønks_gë
(&
m_highe°_ønked_≥î
,

1055 &
m_cuºít_highe°_≥î_ønk
,

1056 
NULL
,

1057 
NULL
);

1058 i‡((
îr_code
 =
NRF_SUCCESS
Ë|| (îr_codê=
NRF_ERROR_NOT_FOUND
))

1060 
m_≥î_ønk_öôülized
 = 
åue
;

1062 
	}
}

1065 
ªt_code_t
 
	$pm_≥î_ønk_highe°
(
pm_≥î_id_t
 
≥î_id
)

1067 
	`VERIFY_MODULE_INITIALIZED
();

1069 
ªt_code_t
 
îr_code
;

1071 
pm_≥î_d©a_Êash_t
 
≥î_d©a
 = {.
Àngth_w‹ds
 = 
	`BYTES_TO_WORDS
((
m_cuºít_highe°_≥î_ønk
)),

1072 .
d©a_id
 = 
PM_PEER_DATA_ID_PEER_RANK
,

1073 .
p_≥î_ønk
 = &
m_cuºít_highe°_≥î_ønk
};

1077 i‡(!
m_≥î_ønk_öôülized
)

1079 
	`ønk_öô
();

1082 i‡(!
m_≥î_ønk_öôülized
 || (
m_≥î_ønk_tokí
 !
PM_STORE_TOKEN_INVALID
))

1084 
îr_code
 = 
NRF_ERROR_BUSY
;

1088 i‡((
≥î_id
 =
m_highe°_ønked_≥î
Ë&& (
m_cuºít_highe°_≥î_ønk
 > 0))

1090 
pm_evt_t
 
pm_evt
;

1093 
îr_code
 = 
NRF_SUCCESS
;

1095 
	`mem£t
(&
pm_evt
, 0, (pm_evt));

1096 
pm_evt
.
evt_id
 = 
PM_EVT_PEER_DATA_UPDATE_SUCCEEDED
;

1097 
pm_evt
.
c⁄n_h™dÀ
 = 
	`im_c⁄n_h™dÀ_gë
(
≥î_id
);

1098 
pm_evt
.
≥î_id
 =Öeer_id;

1099 
pm_evt
.
∑øms
.
≥î_d©a_upd©e_suc˚eded
.
d©a_id
 = 
PM_PEER_DATA_ID_PEER_RANK
;

1100 
pm_evt
.
∑øms
.
≥î_d©a_upd©e_suc˚eded
.
a˘i⁄
 = 
PM_PEER_DATA_OP_UPDATE
;

1101 
pm_evt
.
∑øms
.
≥î_d©a_upd©e_suc˚eded
.
tokí
 = 
PM_STORE_TOKEN_INVALID
;

1102 
pm_evt
.
∑øms
.
≥î_d©a_upd©e_suc˚eded
.
Êash_ch™ged
 = 
Ál£
;

1104 
	`evt_£nd
(&
pm_evt
);

1108 
m_cuºít_highe°_≥î_ønk
 += 1;

1109 
îr_code
 = 
	`pdb_øw_°‹e
(
≥î_id
, &
≥î_d©a
, &
m_≥î_ønk_tokí
);

1110 i‡(
îr_code
 !
NRF_SUCCESS
)

1112 
m_≥î_ønk_tokí
 = 
PM_STORE_TOKEN_INVALID
;

1113 
m_cuºít_highe°_≥î_ønk
 -= 1;

1115 i‡((
îr_code
 !
NRF_ERROR_BUSY
Ë&& (îr_codê!
NRF_ERROR_STORAGE_FULL
))

1116 
îr_code
 = 
NRF_ERROR_INTERNAL
;

1121  
îr_code
;

1122 
	}
}

	@D:\Private\Programing\MCU\Nordic\ble_app_template\nRF5_SDK_12.3.0_d7731ad\components\ble\peer_manager\pm_buffer.c

41 
	~"sdk_comm⁄.h
"

42 #i‡
NRF_MODULE_ENABLED
(
PEER_MANAGER
)

43 
	~"pm_buf„r.h
"

45 
	~<°dboﬁ.h
>

46 
	~<°rög.h
>

47 
	~"ƒf_îr‹.h
"

48 
	~"pm_muãx.h
"

51 
	#BUFFER_IS_VALID
(
p_buf„r
Ë(’_buf„∏!
NULL
) \

52 && (
p_buf„r
->
p_mem‹y
 !
NULL
) \

53 && (
p_buf„r
->
p_muãx
 !
NULL
))

	)

57 
ªt_code_t
 
	$pm_buf„r_öô
(
pm_buf„r_t
 * 
p_buf„r
,

58 
uöt8_t
 * 
p_buf„r_mem‹y
,

59 
uöt32_t
 
buf„r_mem‹y_size
,

60 
uöt8_t
 * 
p_muãx_mem‹y
,

61 
uöt32_t
 
muãx_mem‹y_size
,

62 
uöt32_t
 
n_blocks
,

63 
uöt32_t
 
block_size
)

65 i‡–(
p_buf„r
 !
NULL
)

66 && (
p_buf„r_mem‹y
 !
NULL
)

67 && (
p_muãx_mem‹y
 !
NULL
)

68 && (
buf„r_mem‹y_size
 >(
n_blocks
 * 
block_size
))

69 && (
muãx_mem‹y_size
 >
	`MUTEX_STORAGE_SIZE
(
n_blocks
))

70 && (
n_blocks
 != 0)

71 && (
block_size
 != 0))

73 
p_buf„r
->
p_mem‹y
 = 
p_buf„r_mem‹y
;

74 
p_buf„r
->
p_muãx
 = 
p_muãx_mem‹y
;

75 
p_buf„r
->
n_blocks
 =Ç_blocks;

76 
p_buf„r
->
block_size
 = block_size;

77 
	`pm_muãx_öô
(
p_buf„r
->
p_muãx
, 
n_blocks
);

79  
NRF_SUCCESS
;

83  
NRF_ERROR_INVALID_PARAM
;

85 
	}
}

88 
uöt8_t
 
	$pm_buf„r_block_acquúe
(
pm_buf„r_t
 * 
p_buf„r
, 
uöt32_t
 
n_blocks
)

90 i‡(!
	`BUFFER_IS_VALID
(
p_buf„r
))

92  ( 
PM_BUFFER_INVALID_ID
 );

95 
uöt8_t
 
fú°_locked_muãx
 = 
PM_BUFFER_INVALID_ID
;

97 
uöt8_t
 
i
 = 0; i < 
p_buf„r
->
n_blocks
; i++)

99 i‡(
	`pm_muãx_lock
(
p_buf„r
->
p_muãx
, 
i
))

101 i‡(
fú°_locked_muãx
 =
PM_BUFFER_INVALID_ID
)

103 
fú°_locked_muãx
 = 
i
;

105 i‡((
i
 - 
fú°_locked_muãx
 + 1Ë=
n_blocks
)

107  
fú°_locked_muãx
;

110 i‡(
fú°_locked_muãx
 !
PM_BUFFER_INVALID_ID
)

112 
uöt8_t
 
j
 = 
fú°_locked_muãx
; j < 
i
; j++)

114 
	`pm_buf„r_ªÀa£
(
p_buf„r
, 
j
);

116 
fú°_locked_muãx
 = 
PM_BUFFER_INVALID_ID
;

120  ( 
PM_BUFFER_INVALID_ID
 );

121 
	}
}

124 
uöt8_t
 * 
	$pm_buf„r_±r_gë
(
pm_buf„r_t
 * 
p_buf„r
, 
uöt8_t
 
id
)

126 i‡(!
	`BUFFER_IS_VALID
(
p_buf„r
))

128  ( 
NULL
 );

131 i‡–(
id
 !
PM_BUFFER_INVALID_ID
)

132 && 
	`pm_muãx_lock_°©us_gë
(
p_buf„r
->
p_muãx
, 
id
) )

134  ( &
p_buf„r
->
p_mem‹y
[
id
 *Ö_buf„r->
block_size
] );

138  ( 
NULL
 );

140 
	}
}

143 
	$pm_buf„r_ªÀa£
(
pm_buf„r_t
 * 
p_buf„r
, 
uöt8_t
 
id
)

145 i‡–
	`BUFFER_IS_VALID
(
p_buf„r
)

146 && (
id
 !
PM_BUFFER_INVALID_ID
)

147 && 
	`pm_muãx_lock_°©us_gë
(
p_buf„r
->
p_muãx
, 
id
))

149 
	`pm_muãx_u∆ock
(
p_buf„r
->
p_muãx
, 
id
);

151 
	}
}

	@D:\Private\Programing\MCU\Nordic\ble_app_template\nRF5_SDK_12.3.0_d7731ad\components\ble\peer_manager\pm_mutex.c

41 
	~"sdk_comm⁄.h
"

42 #i‡
NRF_MODULE_ENABLED
(
PEER_MANAGER
)

43 
	~"pm_muãx.h
"

45 
	~<°dboﬁ.h
>

46 
	~<°rög.h
>

47 
	~"ƒf_îr‹.h
"

48 
	~"≠p_utû_∂©f‹m.h
"

60 
boﬁ
 
	$lock_by_mask
(
uöt8_t
 * 
p_muãx
, uöt8_à
muãx_mask
)

62 
boﬁ
 
suc˚ss
 = 
Ál£
;

64 i‡–(*
p_muãx
 & 
muãx_mask
) == 0 )

66 
	`CRITICAL_REGION_ENTER
();

67 i‡–(*
p_muãx
 & 
muãx_mask
) == 0 )

69 *
p_muãx
 |
muãx_mask
;

71 
suc˚ss
 = 
åue
;

73 
	`CRITICAL_REGION_EXIT
();

76  ( 
suc˚ss
 );

77 
	}
}

80 
	$pm_muãx_öô
(
uöt8_t
 * 
p_muãx
, 
uöt16_t
 
muãx_size
)

82 i‡(
p_muãx
 !
NULL
)

84 
	`mem£t
(&
p_muãx
[0], 0, 
	`MUTEX_STORAGE_SIZE
(
muãx_size
));

86 
	}
}

89 
boﬁ
 
	$pm_muãx_lock
(
uöt8_t
 * 
p_muãx
, 
uöt16_t
 
muãx_id
)

91 i‡(
p_muãx
 !
NULL
)

93  ( 
	`lock_by_mask
(&(
p_muãx
[
muãx_id
 >> 3]), (1 << (mutex_id & 0x07))) );

97  
Ál£
;

99 
	}
}

102 
	$pm_muãx_u∆ock
(
uöt8_t
 * 
p_muãx
, 
uöt16_t
 
muãx_id
)

104 
uöt8_t
 
muãx_ba£
 = 
muãx_id
 >> 3;

105 
uöt8_t
 
muãx_mask
 = (1 << (
muãx_id
 & 0x07));

107 i‡((
p_muãx
 !
NULL
)

108 && (
p_muãx
[
muãx_ba£
] & 
muãx_mask
))

110 
	`CRITICAL_REGION_ENTER
();

111 
p_muãx
[
muãx_ba£
] &~
muãx_mask
;

112 
	`CRITICAL_REGION_EXIT
();

114 
	}
}

117 
uöt16_t
 
	$pm_muãx_lock_fú°_avaûabÀ
(
uöt8_t
 * 
p_muãx
, 
uöt16_t
 
muãx_size
)

119 i‡(
p_muãx
 !
NULL
)

121  
uöt16_t
 
i
 = 0; i < 
muãx_size
; i++ )

123 i‡–
	`lock_by_mask
(&(
p_muãx
[
i
 >> 3]), 1 << (i & 0x07)) )

125  ( 
i
 );

130  ( 
muãx_size
 );

131 
	}
}

134 
boﬁ
 
	$pm_muãx_lock_°©us_gë
(
uöt8_t
 * 
p_muãx
, 
uöt16_t
 
muãx_id
)

136 i‡(
p_muãx
 !
NULL
)

138  ( (
p_muãx
[
muãx_id
 >> 3] & (1 << (mutex_id & 0x07))) );

142  
åue
;

144 
	}
}

	@D:\Private\Programing\MCU\Nordic\ble_app_template\nRF5_SDK_12.3.0_d7731ad\components\ble\peer_manager\security_dispatcher.c

41 
	~"sdk_comm⁄.h
"

42 #i‡
NRF_MODULE_ENABLED
(
PEER_MANAGER
)

43 
	~"£curôy_di•©chî.h
"

45 
	~<°rög.h
>

46 
	~"bÀ.h
"

47 
	~"bÀ_g≠.h
"

48 
	~"bÀ_c⁄n_°©e.h
"

49 
	~"≥î_m™agî_ty≥s.h
"

50 
	~"≥î_d©aba£.h
"

51 
	~"id_m™agî.h
"

55 
	#SMD_EVENT_HANDLERS_CNT
 ((
m_evt_h™dÀrs
Ë/ (m_evt_h™dÀrs[0]))

	)

59 
sm_smd_evt_h™dÀr
(
smd_evt_t
 c⁄° * 
p_evít
);

60 
gcm_smd_evt_h™dÀr
(
smd_evt_t
 c⁄° * 
p_evít
);

64 
smd_evt_h™dÀr_t
 c⁄° 
	gm_evt_h™dÀrs
[] =

66 
sm_smd_evt_h™dÀr
,

67 
gcm_smd_evt_h™dÀr


70 
boﬁ
 
	gm_moduÀ_öôülized
;

72 
bÀ_c⁄n_°©e_u£r_Êag_id_t
 
	gm_Êag_£c_¥oc
 = 
BLE_CONN_STATE_USER_FLAG_INVALID
;

73 
bÀ_c⁄n_°©e_u£r_Êag_id_t
 
	gm_Êag_£c_¥oc_∑úög
 = 
BLE_CONN_STATE_USER_FLAG_INVALID
;

74 
bÀ_c⁄n_°©e_u£r_Êag_id_t
 
	gm_Êag_£c_¥oc_√w_≥î
 = 
BLE_CONN_STATE_USER_FLAG_INVALID
;

76 
bÀ_g≠_Àsc_p256_pk_t
 
	gm_≥î_pk
;

79 
	$evt_£nd
(
smd_evt_t
 * 
p_evít
)

81 
uöt32_t
 
i
 = 0; i < 
SMD_EVENT_HANDLERS_CNT
; i++)

83 
m_evt_h™dÀrs
[
i
](
p_evít
);

85 
	}
}

88 
	$£c_°¨t_£nd
(
uöt16_t
 
c⁄n_h™dÀ
, 
pm_c⁄n_£c_¥o˚duª_t
 
¥o˚duª
)

90 
smd_evt_t
 
evt
 =

92 .
evt_id
 = 
SMD_EVT_SEC_PROCEDURE_START
,

93 .
c⁄n_h™dÀ
 = conn_handle,

94 .
∑øms
 = {.
£c_¥o˚duª_°¨t
 = {.
¥o˚duª
 =Örocedure}}

96 
	`evt_£nd
(&
evt
);

97 
	}
}

105 
	$smd_pdb_evt_h™dÀr
(
pdb_evt_t
 c⁄° * 
p_evít
)

107 i‡((
p_evít
->
evt_id
 =
PDB_EVT_WRITE_BUF_STORED
Ë&& (p_evít->
d©a_id
 =
PM_PEER_DATA_ID_BONDING
))

109 
smd_evt_t
 
evt
 =

111 .
evt_id
 = 
SMD_EVT_BONDING_INFO_STORED
,

112 .
c⁄n_h™dÀ
 = 
	`im_c⁄n_h™dÀ_gë
(
p_evít
->
≥î_id
),

113 .
∑øms
 = {.
b⁄dög_öfo_°‹ed
 = {.
≥î_id
 = 
p_evít
->peer_id}}

115 
	`evt_£nd
(&
evt
);

117 
	}
}

124 
	$£c_∑øms_ªque°_¥o˚ss
(
bÀ_g≠_evt_t
 * 
p_g≠_evt
)

126 
smd_evt_t
 
evt
 =

128 .
evt_id
 = 
SMD_EVT_PARAMS_REQ
,

129 .
c⁄n_h™dÀ
 = 
p_g≠_evt
->conn_handle

131 
	`evt_£nd
(&
evt
);

133 
	}
}

144 
	$£c_¥oc_°¨t
(
uöt16_t
 
c⁄n_h™dÀ
,

145 
pm_≥î_id_t
 
≥î_id
,

146 
boﬁ
 
suc˚ss
,

147 
boﬁ
 
∑úög
,

148 
boﬁ
 
√w_≥î_¸óãd
)

150 
	`bÀ_c⁄n_°©e_u£r_Êag_£t
(
c⁄n_h™dÀ
, 
m_Êag_£c_¥oc
, 
suc˚ss
);

152 i‡(
suc˚ss
)

154 
	`bÀ_c⁄n_°©e_u£r_Êag_£t
(
c⁄n_h™dÀ
, 
m_Êag_£c_¥oc_∑úög
, 
∑úög
);

155 
	`bÀ_c⁄n_°©e_u£r_Êag_£t
(
c⁄n_h™dÀ
, 
m_Êag_£c_¥oc_√w_≥î
, 
√w_≥î_¸óãd
);

157 i‡(
√w_≥î_¸óãd
)

159 
	`im_√w_≥î_id
(
c⁄n_h™dÀ
, 
≥î_id
);

164 i‡(
√w_≥î_¸óãd
)

166 
ªt_code_t
 
îr_code
 = 
	`im_≥î_‰ì
(
≥î_id
);

167 
	`UNUSED_VARIABLE
(
îr_code
);

170 
	}
}

178 
	$£c_öfo_ªque°_¥o˚ss
(
bÀ_g≠_evt_t
 * 
p_g≠_evt
)

180 
ªt_code_t
 
îr_code
;

181 
bÀ_g≠_íc_öfo_t
 c⁄° * 
p_íc_öfo
 = 
NULL
;

182 
pm_≥î_d©a_Êash_t
 
≥î_d©a
;

183 
pm_≥î_id_t
 
≥î_id
 = 
	`im_≥î_id_gë_by_ma°î_id
(&
p_g≠_evt
->
∑øms
.
£c_öfo_ªque°
.
ma°î_id
);

184 
smd_evt_t
 
evt
;

186 
evt
.
c⁄n_h™dÀ
 = 
p_g≠_evt
->conn_handle;

188 i‡(
≥î_id
 =
PM_PEER_ID_INVALID
)

190 
≥î_id
 = 
	`im_≥î_id_gë_by_c⁄n_h™dÀ
(
p_g≠_evt
->
c⁄n_h™dÀ
);

193 i‡(
≥î_id
 !
PM_PEER_ID_INVALID
)

195 
îr_code
 = 
	`pdb_≥î_d©a_±r_gë
(
≥î_id
, 
PM_PEER_DATA_ID_BONDING
, &
≥î_d©a
);

197 i‡(
îr_code
 =
NRF_SUCCESS
)

200 
bÀ_g≠_íc_key_t
 c⁄° * 
p_exi°ög_key
 = &
≥î_d©a
.
p_b⁄dög_d©a
->
own_…k
;

202 i‡–
p_exi°ög_key
->
íc_öfo
.
Àsc


203 || (
	`im_ma°î_ids_com∑ª
(&
p_exi°ög_key
->
ma°î_id
,

204 &
p_g≠_evt
->
∑øms
.
£c_öfo_ªque°
.
ma°î_id
)))

206 
p_íc_öfo
 = &
p_exi°ög_key
->
íc_öfo
;

212 
îr_code
 = 
	`sd_bÀ_g≠_£c_öfo_ª∂y
(
p_g≠_evt
->
c⁄n_h™dÀ
, 
p_íc_öfo
, 
NULL
, NULL);

214 i‡(
îr_code
 !
NRF_SUCCESS
)

216 
evt
.
evt_id
 = 
SMD_EVT_ERROR_UNEXPECTED
;

217 
evt
.
∑øms
.
îr‹_u√x≥˘ed
.
îr‹
 = 
îr_code
;

219 
	`evt_£nd
(&
evt
);

221 i‡(
p_íc_öfo
 =
NULL
)

223 
evt
.
evt_id
 = 
SMD_EVT_LINK_ENCRYPTION_FAILED
;

224 
evt
.
∑øms
.
lök_í¸y±i⁄_Áûed
.
îr‹
 = 
PM_CONN_SEC_ERROR_PIN_OR_KEY_MISSING
;

225 
evt
.
∑øms
.
lök_í¸y±i⁄_Áûed
.
îr‹_§c
 = 
BLE_GAP_SEC_STATUS_SOURCE_LOCAL
;

227 
	`evt_£nd
(&
evt
);

229 
	`£c_¥oc_°¨t
(
p_g≠_evt
->
c⁄n_h™dÀ
, 
≥î_id
, 
Ál£
, false, false);

233 
	`£c_°¨t_£nd
(
p_g≠_evt
->
c⁄n_h™dÀ
, 
PM_LINK_SECURED_PROCEDURE_ENCRYPTION
);

235 
	`£c_¥oc_°¨t
(
p_g≠_evt
->
c⁄n_h™dÀ
, 
≥î_id
, 
îr_code
 =
NRF_SUCCESS
, 
Ál£
, false);

240 
	}
}

247 
	$£c_ªque°_¥o˚ss
(
bÀ_g≠_evt_t
 * 
p_g≠_evt
)

249 
smd_evt_t
 
evt
 =

251 .
evt_id
 = 
SMD_EVT_SLAVE_SECURITY_REQ
,

252 .
c⁄n_h™dÀ
 = 
p_g≠_evt
->conn_handle,

253 .
∑øms
 =

255 .
¶ave_£curôy_ªq
 =

257 .
b⁄d
 = 
p_g≠_evt
->
∑øms
.
£c_ªque°
.bond,

258 .
môm
 = 
p_g≠_evt
->
∑øms
.
£c_ªque°
.mitm,

262 
	`evt_£nd
(&
evt
);

264 
	}
}

272 
	$auth_°©us_suc˚ss_¥o˚ss
(
bÀ_g≠_evt_t
 * 
p_g≠_evt
)

274 
ªt_code_t
 
îr_code
 = 
NRF_SUCCESS
;

275 
uöt8_t
 
rﬁe
 = 
	`bÀ_c⁄n_°©e_rﬁe
(
p_g≠_evt
->
c⁄n_h™dÀ
);

276 
pm_≥î_id_t
 
≥î_id
 = 
	`im_≥î_id_gë_by_c⁄n_h™dÀ
(
p_g≠_evt
->
c⁄n_h™dÀ
);

277 
bÀ_g≠_£c_kdi°_t
 
kdi°_own
 = 
p_g≠_evt
->
∑øms
.
auth_°©us
.kdist_own;

278 
bÀ_g≠_£c_kdi°_t
 
kdi°_≥î
 = 
p_g≠_evt
->
∑øms
.
auth_°©us
.kdist_peer;

280 
	`bÀ_c⁄n_°©e_u£r_Êag_£t
(
p_g≠_evt
->
c⁄n_h™dÀ
, 
m_Êag_£c_¥oc
, 
Ál£
);

282 i‡(
rﬁe
 =
BLE_GAP_ROLE_INVALID
)

288 i‡(
p_g≠_evt
->
∑øms
.
auth_°©us
.
b⁄ded
)

291 
îr_code
 = 
	`pdb_wrôe_buf_°‹e
(
≥î_id
, 
PM_PEER_DATA_ID_BONDING
);

292 i‡(
îr_code
 !
NRF_SUCCESS
)

295 
smd_evt_t
 
îr‹_evt
;

297 
îr‹_evt
.
evt_id
 = 
SMD_EVT_ERROR_BONDING_INFO
;

298 
îr‹_evt
.
c⁄n_h™dÀ
 = 
p_g≠_evt
->conn_handle;

299 
îr‹_evt
.
∑øms
.
îr‹_b⁄dög_öfo
.
≥î_id
 =Öeer_id;

300 
îr‹_evt
.
∑øms
.
îr‹_b⁄dög_öfo
.
îr‹
 = 
îr_code
;

302 
	`evt_£nd
(&
îr‹_evt
);

306 i‡(
	`bÀ_c⁄n_°©e_u£r_Êag_gë
(
p_g≠_evt
->
c⁄n_h™dÀ
, 
m_Êag_£c_¥oc_√w_≥î
))

308 
ªt_code_t
 
îr_code_‰ì
 = 
	`im_≥î_‰ì
(
≥î_id
);

309 
	`UNUSED_VARIABLE
(
îr_code_‰ì
);

312 
smd_evt_t
 
∑úög_suc˚ss_evt
;

314 
∑úög_suc˚ss_evt
.
evt_id
 = 
SMD_EVT_PAIRING_SUCCESS
;

315 
∑úög_suc˚ss_evt
.
c⁄n_h™dÀ
 = 
p_g≠_evt
->conn_handle;

316 
∑úög_suc˚ss_evt
.
∑øms
.
∑úög_suc˚ss
.
b⁄ded
 = 
p_g≠_evt
->∑øms.
auth_°©us
.bonded;

317 
∑úög_suc˚ss_evt
.
∑øms
.
∑úög_suc˚ss
.
môm
 = 
p_g≠_evt
->∑øms.
auth_°©us
.
sm1_Àvñs
.
lv3
;

318 
∑úög_suc˚ss_evt
.
∑øms
.
∑úög_suc˚ss
.
kdi°_own
 = kdist_own;

319 
∑úög_suc˚ss_evt
.
∑øms
.
∑úög_suc˚ss
.
kdi°_≥î
 = kdist_peer;

321 
	`evt_£nd
(&
∑úög_suc˚ss_evt
);

323 
	}
}

333 
	$∑úög_Áûuª
(
uöt16_t
 
c⁄n_h™dÀ
,

334 
pm_≥î_id_t
 
≥î_id
,

335 
pm_£c_îr‹_code_t
 
îr‹
,

336 
uöt8_t
 
îr‹_§c
)

338 
ªt_code_t
 
îr_code
 = 
NRF_SUCCESS
;

340 
smd_evt_t
 
evt
 =

342 .
evt_id
 = 
SMD_EVT_PAIRING_FAIL
,

343 .
c⁄n_h™dÀ
 = conn_handle,

344 .
∑øms
 =

346 .
∑úög_Áûed
 =

348 .
îr‹
 =Érror,

349 .
îr‹_§c
 =Érror_src,

354 i‡(
	`bÀ_c⁄n_°©e_u£r_Êag_gë
(
c⁄n_h™dÀ
, 
m_Êag_£c_¥oc_√w_≥î
))

358 
îr_code
 = 
	`im_≥î_‰ì
(
≥î_id
);

359 
	`UNUSED_VARIABLE
(
îr_code
);

363 
îr_code
 = 
	`pdb_wrôe_buf_ªÀa£
(
≥î_id
, 
PM_PEER_DATA_ID_BONDING
);

364 i‡((
îr_code
 !
NRF_SUCCESS
Ë&& (îr_codê=
NRF_ERROR_NOT_FOUND
 ))

366 
smd_evt_t
 
îr‹_evt
;

367 
îr‹_evt
.
evt_id
 = 
SMD_EVT_ERROR_UNEXPECTED
;

368 
îr‹_evt
.
c⁄n_h™dÀ
 = conn_handle;

369 
îr‹_evt
.
∑øms
.
îr‹_u√x≥˘ed
.
îr‹
 = 
îr_code
;

370 
	`evt_£nd
(&
îr‹_evt
);

374 
	`bÀ_c⁄n_°©e_u£r_Êag_£t
(
c⁄n_h™dÀ
, 
m_Êag_£c_¥oc
, 
Ál£
);

376 
	`evt_£nd
(&
evt
);

378 
	}
}

387 
	$í¸y±i⁄_Áûuª
(
uöt16_t
 
c⁄n_h™dÀ
,

388 
pm_£c_îr‹_code_t
 
îr‹
,

389 
uöt8_t
 
îr‹_§c
)

391 
smd_evt_t
 
evt
 =

393 .
evt_id
 = 
SMD_EVT_LINK_ENCRYPTION_FAILED
,

394 .
c⁄n_h™dÀ
 = conn_handle,

395 .
∑øms
 =

397 .
lök_í¸y±i⁄_Áûed
 =

399 .
îr‹
 =Érror,

400 .
îr‹_§c
 =Érror_src,

405 
	`bÀ_c⁄n_°©e_u£r_Êag_£t
(
c⁄n_h™dÀ
, 
m_Êag_£c_¥oc
, 
Ál£
);

407 
	`evt_£nd
(&
evt
);

409 
	}
}

419 
	$lök_£cuª_Áûuª
(
uöt16_t
 
c⁄n_h™dÀ
,

420 
pm_£c_îr‹_code_t
 
îr‹
,

421 
uöt8_t
 
îr‹_§c
)

423 i‡(
	`bÀ_c⁄n_°©e_u£r_Êag_gë
(
c⁄n_h™dÀ
, 
m_Êag_£c_¥oc
))

425 
pm_≥î_id_t
 
≥î_id
 = 
	`im_≥î_id_gë_by_c⁄n_h™dÀ
(
c⁄n_h™dÀ
);

427 i‡(
≥î_id
 !
PM_PEER_ID_INVALID
)

429 i‡(
	`bÀ_c⁄n_°©e_u£r_Êag_gë
(
c⁄n_h™dÀ
, 
m_Êag_£c_¥oc_∑úög
))

431 
	`∑úög_Áûuª
(
c⁄n_h™dÀ
, 
≥î_id
, 
îr‹
, 
îr‹_§c
);

435 
	`í¸y±i⁄_Áûuª
(
c⁄n_h™dÀ
, 
îr‹
, 
îr‹_§c
);

439 
	}
}

446 
	$disc⁄√˘_¥o˚ss
(
bÀ_g≠_evt_t
 * 
p_g≠_evt
)

448 
pm_£c_îr‹_code_t
 
îr‹
 = (
p_g≠_evt
->
∑øms
.
disc⁄√˘ed
.
ªas⁄


449 =
BLE_HCI_CONN_TERMINATED_DUE_TO_MIC_FAILURE
)

450 ? 
PM_CONN_SEC_ERROR_MIC_FAILURE
 : 
PM_CONN_SEC_ERROR_DISCONNECT
;

452 
	`lök_£cuª_Áûuª
(
p_g≠_evt
->
c⁄n_h™dÀ
, 
îr‹
, 
BLE_GAP_SEC_STATUS_SOURCE_LOCAL
);

453 
	}
}

461 
	$auth_°©us_Áûuª_¥o˚ss
(
bÀ_g≠_evt_t
 * 
p_g≠_evt
)

463 
	`lök_£cuª_Áûuª
(
p_g≠_evt
->
c⁄n_h™dÀ
,

464 
p_g≠_evt
->
∑øms
.
auth_°©us
.auth_status,

465 
p_g≠_evt
->
∑øms
.
auth_°©us
.
îr‹_§c
);

466 
	}
}

473 
	$auth_°©us_¥o˚ss
(
bÀ_g≠_evt_t
 * 
p_g≠_evt
)

475 
p_g≠_evt
->
∑øms
.
auth_°©us
.auth_status)

477 
BLE_GAP_SEC_STATUS_SUCCESS
:

478 
	`auth_°©us_suc˚ss_¥o˚ss
(
p_g≠_evt
);

482 
	`auth_°©us_Áûuª_¥o˚ss
(
p_g≠_evt
);

485 
	}
}

492 
	$c⁄n_£c_upd©e_¥o˚ss
(
bÀ_g≠_evt_t
 * 
p_g≠_evt
)

494 i‡(
	`bÀ_c⁄n_°©e_í¸y±ed
(
p_g≠_evt
->
c⁄n_h™dÀ
))

496 i‡(!
	`bÀ_c⁄n_°©e_u£r_Êag_gë
(
p_g≠_evt
->
c⁄n_h™dÀ
, 
m_Êag_£c_¥oc_∑úög
))

498 
	`bÀ_c⁄n_°©e_u£r_Êag_£t
(
p_g≠_evt
->
c⁄n_h™dÀ
, 
m_Êag_£c_¥oc
, 
Ál£
);

501 
smd_evt_t
 
evt
;

503 
evt
.
c⁄n_h™dÀ
 = 
p_g≠_evt
->conn_handle;

504 
evt
.
evt_id
 = 
SMD_EVT_LINK_ENCRYPTION_UPDATE
;

505 
evt
.
∑øms
.
lök_í¸y±i⁄_upd©e
.
môm_¥Ÿe˘ed


506 
	`bÀ_c⁄n_°©e_môm_¥Ÿe˘ed
(
p_g≠_evt
->
c⁄n_h™dÀ
);

507 
	`evt_£nd
(&
evt
);

511 
	`í¸y±i⁄_Áûuª
(
p_g≠_evt
->
c⁄n_h™dÀ
,

512 
PM_CONN_SEC_ERROR_PIN_OR_KEY_MISSING
,

513 
BLE_GAP_SEC_STATUS_SOURCE_REMOTE
);

515 
	}
}

522 
	$Êag_id_öô
(
bÀ_c⁄n_°©e_u£r_Êag_id_t
 * 
p_Êag_id
)

524 i‡(*
p_Êag_id
 =
BLE_CONN_STATE_USER_FLAG_INVALID
)

526 *
p_Êag_id
 = 
	`bÀ_c⁄n_°©e_u£r_Êag_acquúe
();

528 
	}
}

531 
ªt_code_t
 
	$smd_öô
()

533 
	`NRF_PM_DEBUG_CHECK
(!
m_moduÀ_öôülized
);

535 
	`Êag_id_öô
(&
m_Êag_£c_¥oc
);

536 
	`Êag_id_öô
(&
m_Êag_£c_¥oc_∑úög
);

537 
	`Êag_id_öô
(&
m_Êag_£c_¥oc_√w_≥î
);

539 i‡((
m_Êag_£c_¥oc
 =
BLE_CONN_STATE_USER_FLAG_INVALID
) ||

540 (
m_Êag_£c_¥oc_∑úög
 =
BLE_CONN_STATE_USER_FLAG_INVALID
) ||

541 (
m_Êag_£c_¥oc_√w_≥î
 =
BLE_CONN_STATE_USER_FLAG_INVALID
))

543  
NRF_ERROR_INTERNAL
;

546 
m_moduÀ_öôülized
 = 
åue
;

548  
NRF_SUCCESS
;

549 
	}
}

552 
ªt_code_t
 
	$smd_∑øms_ª∂y
(
uöt16_t
 
c⁄n_h™dÀ
,

553 
bÀ_g≠_£c_∑øms_t
 * 
p_£c_∑øms
,

554 
bÀ_g≠_Àsc_p256_pk_t
 * 
p_public_key
)

556 
	`NRF_PM_DEBUG_CHECK
(
m_moduÀ_öôülized
);

558 
uöt8_t
 
rﬁe
 = 
	`bÀ_c⁄n_°©e_rﬁe
(
c⁄n_h™dÀ
);

559 
pm_≥î_id_t
 
≥î_id
 = 
PM_PEER_ID_INVALID
;

560 
ªt_code_t
 
îr_code
 = 
NRF_SUCCESS
;

561 
uöt8_t
 
£c_°©us
 = 
BLE_GAP_SEC_STATUS_SUCCESS
;

562 
bÀ_g≠_£c_key£t_t
 
£c_key£t
;

563 
boﬁ
 
√w_≥î_¸óãd
 = 
Ál£
;

565 
	`mem£t
(&
£c_key£t
, 0, (
bÀ_g≠_£c_key£t_t
));

567 i‡(
rﬁe
 =
BLE_GAP_ROLE_INVALID
)

569  
BLE_ERROR_INVALID_CONN_HANDLE
;

572 i‡(
p_£c_∑øms
 =
NULL
)

575 
£c_°©us
 = 
BLE_GAP_SEC_STATUS_PAIRING_NOT_SUPP
;

577 i‡(
p_£c_∑øms
->
b⁄d
)

580 
pm_≥î_d©a_t
 
≥î_d©a
;

582 
≥î_id
 = 
	`im_≥î_id_gë_by_c⁄n_h™dÀ
(
c⁄n_h™dÀ
);

584 i‡(
≥î_id
 =
PM_PEER_ID_INVALID
)

587 
≥î_id
 = 
	`pdb_≥î_Æloˇã
();

588 i‡(
≥î_id
 !
PM_PEER_ID_INVALID
)

590 
√w_≥î_¸óãd
 = 
åue
;

594 
îr_code
 = 
NRF_ERROR_INTERNAL
;

598 i‡(
îr_code
 =
NRF_SUCCESS
)

601 
îr_code
 = 
	`pdb_wrôe_buf_gë
(
≥î_id
, 
PM_PEER_DATA_ID_BONDING
, 1, &
≥î_d©a
);

602 i‡(
îr_code
 =
NRF_SUCCESS
)

604 
	`mem£t
(
≥î_d©a
.
p_b⁄dög_d©a
, 0, (
pm_≥î_d©a_b⁄dög_t
));

606 
≥î_d©a
.
p_b⁄dög_d©a
->
own_rﬁe
 = 
rﬁe
;

608 
£c_key£t
.
keys_own
.
p_íc_key
 = &
≥î_d©a
.
p_b⁄dög_d©a
->
own_…k
;

609 
£c_key£t
.
keys_own
.
p_pk
 = 
p_public_key
;

610 
£c_key£t
.
keys_≥î
.
p_íc_key
 = &
≥î_d©a
.
p_b⁄dög_d©a
->
≥î_…k
;

611 
£c_key£t
.
keys_≥î
.
p_id_key
 = &
≥î_d©a
.
p_b⁄dög_d©a
->
≥î_bÀ_id
;

612 
£c_key£t
.
keys_≥î
.
p_pk
 = &
m_≥î_pk
;

616 
ªt_code_t
 
îr_code_addr
 = 
	`im_bÀ_addr_gë
(
c⁄n_h™dÀ
,

617 &
≥î_d©a
.
p_b⁄dög_d©a
->
≥î_bÀ_id
.
id_addr_öfo
);

618 
	`UNUSED_VARIABLE
(
îr_code_addr
);

621 
îr_code
 = 
	`pdb_wrôe_buf_°‹e_¥ï¨e
(
≥î_id
, 
PM_PEER_DATA_ID_BONDING
);

630 i‡(
îr_code
 =
NRF_SUCCESS
)

634 i‡(
rﬁe
 =
BLE_GAP_ROLE_CENTRAL
)

636 
îr_code
 = 
	`sd_bÀ_g≠_£c_∑øms_ª∂y
(
c⁄n_h™dÀ
, 
£c_°©us
, 
NULL
, &
£c_key£t
);

640 
îr_code
 = 
	`sd_bÀ_g≠_£c_∑øms_ª∂y
(
c⁄n_h™dÀ
, 
£c_°©us
, 
p_£c_∑øms
, &
£c_key£t
);

642 i‡((
p_£c_∑øms
 !
NULL
Ë&& (
îr_code
 =
NRF_SUCCESS
))

644 
pm_c⁄n_£c_¥o˚duª_t
 
¥o˚duª
 = 
p_£c_∑øms
->
b⁄d


645 ? 
PM_LINK_SECURED_PROCEDURE_BONDING


646 : 
PM_LINK_SECURED_PROCEDURE_PAIRING
;

647 
	`£c_°¨t_£nd
(
c⁄n_h™dÀ
, 
¥o˚duª
);

652 
	`£c_¥oc_°¨t
(
c⁄n_h™dÀ
,

653 
≥î_id
,

654 (
îr_code
 =
NRF_SUCCESS
Ë&& (
£c_°©us
 !
BLE_GAP_SEC_STATUS_PAIRING_NOT_SUPP
),

655 
åue
,

656 
√w_≥î_¸óãd
);

658  
îr_code
;

659 
	}
}

662 
ªt_code_t
 
	$lök_£cuª_˚¡øl_exi°ög_≥î
(
uöt16_t
 
c⁄n_h™dÀ
,

663 
bÀ_g≠_£c_∑øms_t
 * 
p_£c_∑øms
,

664 
boﬁ
 
f‹˚_ª∑úög
,

665 
pm_≥î_id_t
 
≥î_id
,

666 
pm_c⁄n_£c_¥o˚duª_t
 * 
¥o˚duª
)

668 
pm_≥î_d©a_Êash_t
 
≥î_d©a
;

669 
pm_≥î_d©a_t
 
dummy_≥î_d©a
;

670 
ªt_code_t
 
îr_code
;

671 
bÀ_g≠_íc_key_t
 c⁄° * 
p_exi°ög_key
 = 
NULL
;

672 
boﬁ
 
Àsc
 = 
Ál£
;

674 
îr_code
 = 
	`pdb_≥î_d©a_±r_gë
(
≥î_id
, 
PM_PEER_DATA_ID_BONDING
, &
≥î_d©a
);

676 i‡(
îr_code
 =
NRF_SUCCESS
)

679 
p_exi°ög_key
 = &(
≥î_d©a
.
p_b⁄dög_d©a
->
≥î_…k
);

681 
Àsc
 = 
≥î_d©a
.
p_b⁄dög_d©a
->
own_…k
.
íc_öfo
.lesc;

682 i‡(
Àsc
)

685 
p_exi°ög_key
 = &(
≥î_d©a
.
p_b⁄dög_d©a
->
own_…k
);

689 i‡(!
f‹˚_ª∑úög


690 && (
îr_code
 =
NRF_SUCCESS
)

691 && (
p_exi°ög_key
 !
NULL
)

692 && (
Àsc
 || 
	`im_ma°î_id_is_vÆid
(&(
p_exi°ög_key
->
ma°î_id
))))

696 
îr_code
 = 
	`sd_bÀ_g≠_í¸y±
(
c⁄n_h™dÀ
, &(
p_exi°ög_key
->
ma°î_id
), &’_exi°ög_key->
íc_öfo
));

698 *
¥o˚duª
 = 
PM_LINK_SECURED_PROCEDURE_ENCRYPTION
;

700 i‡((
îr_code
 =
NRF_SUCCESS
Ë|| (îr_codê=
NRF_ERROR_NOT_FOUND
))

704 
îr_code
 = 
NRF_SUCCESS
;

706 i‡(
p_£c_∑øms
->
b⁄d
)

708 
îr_code
 = 
	`pdb_wrôe_buf_gë
(
≥î_id
, 
PM_PEER_DATA_ID_BONDING
, 1, &
dummy_≥î_d©a
);

709 i‡(
îr_code
 =
NRF_SUCCESS
)

711 
îr_code
 = 
	`pdb_wrôe_buf_°‹e_¥ï¨e
(
≥î_id
, 
PM_PEER_DATA_ID_BONDING
);

715 i‡(
îr_code
 =
NRF_SUCCESS
)

717 
îr_code
 = 
	`sd_bÀ_g≠_authítiˇã
(
c⁄n_h™dÀ
, 
p_£c_∑øms
);

720 i‡(
îr_code
 !
NRF_SUCCESS
)

722 
ªt_code_t
 
îr_code_ªÀa£
 = 
	`pdb_wrôe_buf_ªÀa£
(
≥î_id
, 
PM_PEER_DATA_ID_BONDING
);

723 i‡((
îr_code_ªÀa£
 !
NRF_SUCCESS
Ë&& (îr_code_ªÀa£ !
NRF_ERROR_NOT_FOUND
))

725 
îr_code
 = 
NRF_ERROR_INTERNAL
;

730 
	`£c_¥oc_°¨t
(
c⁄n_h™dÀ
,

731 
≥î_id
,

732 
îr_code
 =
NRF_SUCCESS
,

733 *
¥o˚duª
 !
PM_LINK_SECURED_PROCEDURE_ENCRYPTION
,

734 
Ál£
);

736  
îr_code
;

737 
	}
}

740 
ªt_code_t
 
	$lök_£cuª_˚¡øl_√w_≥î
(
uöt16_t
 
c⁄n_h™dÀ
,

741 
bÀ_g≠_£c_∑øms_t
 * 
p_£c_∑øms
)

743 
pm_≥î_id_t
 
≥î_id
 = 
	`pdb_≥î_Æloˇã
();

744 
pm_≥î_d©a_t
 
dummy_≥î_d©a
;

745 
ªt_code_t
 
îr_code
;

747 i‡(
≥î_id
 !
PM_PEER_ID_INVALID
)

749 
îr_code
 = 
	`pdb_wrôe_buf_gë
(
≥î_id
, 
PM_PEER_DATA_ID_BONDING
, 1, &
dummy_≥î_d©a
);

750 i‡(
îr_code
 =
NRF_SUCCESS
)

752 
îr_code
 = 
	`pdb_wrôe_buf_°‹e_¥ï¨e
(
≥î_id
, 
PM_PEER_DATA_ID_BONDING
);

755 i‡(
îr_code
 =
NRF_SUCCESS
)

757 
îr_code
 = 
	`sd_bÀ_g≠_authítiˇã
(
c⁄n_h™dÀ
, 
p_£c_∑øms
);

760 i‡(
îr_code
 !
NRF_SUCCESS
)

762 
ªt_code_t
 
îr_code_‰ì
 = 
	`pdb_wrôe_buf_ªÀa£
(
≥î_id
, 
PM_PEER_DATA_ID_BONDING
);

763 i‡((
îr_code_‰ì
 !
NRF_SUCCESS
Ë&& (îr_code_‰ì !
NRF_ERROR_NOT_FOUND
))

765 
îr_code
 = 
NRF_ERROR_INTERNAL
;

771 
îr_code
 = 
NRF_ERROR_INTERNAL
;

774 
	`£c_¥oc_°¨t
(
c⁄n_h™dÀ
,

775 
≥î_id
,

776 
îr_code
 =
NRF_SUCCESS
,

777 
åue
,

778 
≥î_id
 !
PM_PEER_ID_INVALID
);

780  
îr_code
;

781 
	}
}

784 
ªt_code_t
 
	$lök_£cuª_˚¡øl
(
uöt16_t
 
c⁄n_h™dÀ
,

785 
bÀ_g≠_£c_∑øms_t
 * 
p_£c_∑øms
,

786 
boﬁ
 
f‹˚_ª∑úög
)

788 
ªt_code_t
 
îr_code
;

789 
pm_≥î_id_t
 
≥î_id
;

791 i‡(
p_£c_∑øms
 =
NULL
)

793  
	`sd_bÀ_g≠_authítiˇã
(
c⁄n_h™dÀ
, 
NULL
);

796 
pm_c⁄n_£c_¥o˚duª_t
 
¥o˚duª
 = 
p_£c_∑øms
->
b⁄d
 ? 
PM_LINK_SECURED_PROCEDURE_BONDING


797 : 
PM_LINK_SECURED_PROCEDURE_PAIRING
;

799 
≥î_id
 = 
	`im_≥î_id_gë_by_c⁄n_h™dÀ
(
c⁄n_h™dÀ
);

801 i‡(
≥î_id
 !
PM_PEER_ID_INVALID
)

804 
îr_code
 = 
	`lök_£cuª_˚¡øl_exi°ög_≥î
(
c⁄n_h™dÀ
,

805 
p_£c_∑øms
,

806 
f‹˚_ª∑úög
,

807 
≥î_id
,

808 &
¥o˚duª
);

810 i‡(
p_£c_∑øms
->
b⁄d
)

813 
îr_code
 = 
	`lök_£cuª_˚¡øl_√w_≥î
(
c⁄n_h™dÀ
, 
p_£c_∑øms
);

818 
îr_code
 = 
	`sd_bÀ_g≠_authítiˇã
(
c⁄n_h™dÀ
, 
p_£c_∑øms
);

820 
	`£c_¥oc_°¨t
(
c⁄n_h™dÀ
, 
≥î_id
, 
îr_code
 =
NRF_SUCCESS
, 
åue
, 
Ál£
);

823 i‡(
îr_code
 =
NRF_SUCCESS
)

825 
	`£c_°¨t_£nd
(
c⁄n_h™dÀ
, 
¥o˚duª
);

828  
îr_code
;

829 
	}
}

832 
ªt_code_t
 
	$lök_£cuª_≥rùhîÆ
(
uöt16_t
 
c⁄n_h™dÀ
, 
bÀ_g≠_£c_∑øms_t
 * 
p_£c_∑øms
)

835 
	`NRF_PM_DEBUG_CHECK
(
p_£c_∑øms
 !
NULL
);

839 
ªt_code_t
 
îr_code
 = 
	`sd_bÀ_g≠_authítiˇã
(
c⁄n_h™dÀ
, 
p_£c_∑øms
);

841  
îr_code
;

842 
	}
}

845 
ªt_code_t
 
	$smd_lök_£cuª
(
uöt16_t
 
c⁄n_h™dÀ
,

846 
bÀ_g≠_£c_∑øms_t
 * 
p_£c_∑øms
,

847 
boﬁ
 
f‹˚_ª∑úög
)

849 
	`NRF_PM_DEBUG_CHECK
(
m_moduÀ_öôülized
);

851 
uöt8_t
 
rﬁe
 = 
	`bÀ_c⁄n_°©e_rﬁe
(
c⁄n_h™dÀ
);

853 
rﬁe
)

855 
BLE_GAP_ROLE_CENTRAL
:

856  
	`lök_£cuª_˚¡øl
(
c⁄n_h™dÀ
, 
p_£c_∑øms
, 
f‹˚_ª∑úög
);

858 
BLE_GAP_ROLE_PERIPH
:

859  
	`lök_£cuª_≥rùhîÆ
(
c⁄n_h™dÀ
, 
p_£c_∑øms
);

862  
BLE_ERROR_INVALID_CONN_HANDLE
;

864 
	}
}

867 
	$smd_bÀ_evt_h™dÀr
(
bÀ_evt_t
 * 
p_bÀ_evt
)

869 
p_bÀ_evt
->
hódî
.
evt_id
)

871 
BLE_GAP_EVT_DISCONNECTED
:

872 
	`disc⁄√˘_¥o˚ss
(&(
p_bÀ_evt
->
evt
.
g≠_evt
));

875 
BLE_GAP_EVT_SEC_PARAMS_REQUEST
:

876 
	`£c_∑øms_ªque°_¥o˚ss
(&(
p_bÀ_evt
->
evt
.
g≠_evt
));

879 
BLE_GAP_EVT_SEC_INFO_REQUEST
:

880 
	`£c_öfo_ªque°_¥o˚ss
(&(
p_bÀ_evt
->
evt
.
g≠_evt
));

883 
BLE_GAP_EVT_SEC_REQUEST
:

884 
	`£c_ªque°_¥o˚ss
(&(
p_bÀ_evt
->
evt
.
g≠_evt
));

887 
BLE_GAP_EVT_AUTH_STATUS
:

888 
	`auth_°©us_¥o˚ss
(&(
p_bÀ_evt
->
evt
.
g≠_evt
));

891 
BLE_GAP_EVT_CONN_SEC_UPDATE
:

892 
	`c⁄n_£c_upd©e_¥o˚ss
(&(
p_bÀ_evt
->
evt
.
g≠_evt
));

895 
	}
}

	@D:\Private\Programing\MCU\Nordic\ble_app_template\nRF5_SDK_12.3.0_d7731ad\components\ble\peer_manager\security_manager.c

41 
	~"sdk_comm⁄.h
"

42 #i‡
NRF_MODULE_ENABLED
(
PEER_MANAGER
)

43 
	~"£curôy_m™agî.h
"

45 
	~<°rög.h
>

46 
	~"£curôy_di•©chî.h
"

47 
	~"≥î_d©aba£.h
"

48 
	~"bÀ_c⁄n_°©e.h
"

49 
	~"id_m™agî.h
"

53 
	#SM_EVENT_HANDLERS_CNT
 ((
m_evt_h™dÀrs
Ë/ (m_evt_h™dÀrs[0]))

	)

57 
pm_sm_evt_h™dÀr
(
sm_evt_t
 c⁄° * 
p_sm_evt
);

61 
sm_evt_h™dÀr_t
 c⁄° 
	gm_evt_h™dÀrs
[] =

63 
pm_sm_evt_h™dÀr


66 
boﬁ
 
	gm_moduÀ_öôülized
;

68 
bÀ_g≠_£c_∑øms_t
 
	gm_£c_∑øms
;

69 
boﬁ
 
	gm_£c_∑øms_vÆid
;

71 
bÀ_g≠_Àsc_p256_pk_t
 * 
	gm_p_public_key
;

72 
bÀ_c⁄n_°©e_u£r_Êag_id_t
 
	gm_Êag_lök_£cuª_≥ndög_busy
 = 
BLE_CONN_STATE_USER_FLAG_INVALID
;

73 
bÀ_c⁄n_°©e_u£r_Êag_id_t
 
	gm_Êag_lök_£cuª_≥ndög_Êash_fuŒ
 = 
BLE_CONN_STATE_USER_FLAG_INVALID
;

74 
bÀ_c⁄n_°©e_u£r_Êag_id_t
 
	gm_Êag_lök_£cuª_f‹˚_ª∑úög
 = 
BLE_CONN_STATE_USER_FLAG_INVALID
;

75 
bÀ_c⁄n_°©e_u£r_Êag_id_t
 
	gm_Êag_lök_£cuª_nuŒ_∑øms
 = 
BLE_CONN_STATE_USER_FLAG_INVALID
;

76 
bÀ_c⁄n_°©e_u£r_Êag_id_t
 
	gm_Êag_∑øms_ª∂y_≥ndög_busy
 = 
BLE_CONN_STATE_USER_FLAG_INVALID
;

77 
bÀ_c⁄n_°©e_u£r_Êag_id_t
 
	gm_Êag_∑øms_ª∂y_≥ndög_Êash_fuŒ
 = 
BLE_CONN_STATE_USER_FLAG_INVALID
;

78 
bÀ_c⁄n_°©e_u£r_Êag_id_t
 
	gm_Êag_ªje˘_∑úög
 = 
BLE_CONN_STATE_USER_FLAG_INVALID
;

81 
	$evt_£nd
(
sm_evt_t
 * 
p_evít
)

83 
uöt32_t
 
i
 = 0; i < 
SM_EVENT_HANDLERS_CNT
; i++)

85 
m_evt_h™dÀrs
[
i
](
p_evít
);

87 
	}
}

90 
	$Êags_£t_‰om_îr_code
(
uöt16_t
 
c⁄n_h™dÀ
, 
ªt_code_t
 
îr_code
, 
boﬁ
 
∑øms_ª∂y
)

92 
boﬁ
 
Êag_vÆue_Êash_fuŒ
 = 
Ál£
;

93 
boﬁ
 
Êag_vÆue_busy
 = 
Ál£
;

95 i‡–(
îr_code
 =
NRF_ERROR_STORAGE_FULL
)

96 || (
îr_code
 =
NRF_ERROR_BUSY
)

97 || (
îr_code
 =
NRF_SUCCESS
))

99 i‡((
îr_code
 =
NRF_ERROR_STORAGE_FULL
))

101 
Êag_vÆue_busy
 = 
Ál£
;

102 
Êag_vÆue_Êash_fuŒ
 = 
åue
;

104 i‡(
îr_code
 =
NRF_ERROR_BUSY
)

106 
Êag_vÆue_busy
 = 
åue
;

107 
Êag_vÆue_Êash_fuŒ
 = 
Ál£
;

109 i‡(
îr_code
 =
NRF_SUCCESS
)

111 
Êag_vÆue_busy
 = 
Ál£
;

112 
Êag_vÆue_Êash_fuŒ
 = 
Ál£
;

115 i‡(
∑øms_ª∂y
)

117 
	`bÀ_c⁄n_°©e_u£r_Êag_£t
(
c⁄n_h™dÀ
,

118 
m_Êag_∑øms_ª∂y_≥ndög_Êash_fuŒ
,

119 
Êag_vÆue_Êash_fuŒ
);

120 
	`bÀ_c⁄n_°©e_u£r_Êag_£t
(
c⁄n_h™dÀ
,

121 
m_Êag_∑øms_ª∂y_≥ndög_busy
,

122 
Êag_vÆue_busy
);

123 
	`bÀ_c⁄n_°©e_u£r_Êag_£t
(
c⁄n_h™dÀ
,

124 
m_Êag_lök_£cuª_≥ndög_Êash_fuŒ
,

125 
Ál£
);

126 
	`bÀ_c⁄n_°©e_u£r_Êag_£t
(
c⁄n_h™dÀ
,

127 
m_Êag_lök_£cuª_≥ndög_busy
,

128 
Ál£
);

132 
	`bÀ_c⁄n_°©e_u£r_Êag_£t
(
c⁄n_h™dÀ
,

133 
m_Êag_lök_£cuª_≥ndög_Êash_fuŒ
,

134 
Êag_vÆue_Êash_fuŒ
);

135 
	`bÀ_c⁄n_°©e_u£r_Êag_£t
(
c⁄n_h™dÀ
,

136 
m_Êag_lök_£cuª_≥ndög_busy
,

137 
Êag_vÆue_busy
);

140 
	}
}

143 
	$evíts_£nd_‰om_îr_code
(
uöt16_t
 
c⁄n_h™dÀ
, 
ªt_code_t
 
îr_code
)

145 i‡((
îr_code
 !
NRF_SUCCESS
Ë&& (îr_codê!
NRF_ERROR_BUSY
))

147 
sm_evt_t
 
evt
 =

149 .
c⁄n_h™dÀ
 = conn_handle,

150 .
∑øms
 = {.
îr‹_u√x≥˘ed
 = {

151 .
îr‹
 = 
îr_code


154 i‡(
îr_code
 =
NRF_ERROR_TIMEOUT
)

156 
evt
.
evt_id
 = 
SM_EVT_ERROR_SMP_TIMEOUT
;

158 i‡(
îr_code
 =
NRF_ERROR_STORAGE_FULL
)

160 
evt
.
evt_id
 = 
SM_EVT_ERROR_NO_MEM
;

164 
evt
.
evt_id
 = 
SM_EVT_ERROR_UNEXPECTED
;

166 
	`evt_£nd
(&
evt
);

168 
	}
}

171 
ªt_code_t
 
	$lök_£cuª
(
uöt16_t
 
c⁄n_h™dÀ
, 
boﬁ
 
nuŒ_∑øms
, boﬁ 
f‹˚_ª∑úög
, boﬁ 
£nd_evíts
)

173 
ªt_code_t
 
îr_code
;

175 i‡(!
nuŒ_∑øms
 && !
m_£c_∑øms_vÆid
)

177  
NRF_ERROR_NOT_FOUND
;

180 i‡(
nuŒ_∑øms
)

182 
îr_code
 = 
	`smd_lök_£cuª
(
c⁄n_h™dÀ
, 
NULL
, 
f‹˚_ª∑úög
);

186 
îr_code
 = 
	`smd_lök_£cuª
(
c⁄n_h™dÀ
, &
m_£c_∑øms
, 
f‹˚_ª∑úög
);

189 
	`Êags_£t_‰om_îr_code
(
c⁄n_h™dÀ
, 
îr_code
, 
Ál£
);

191 i‡(
£nd_evíts
)

193 
	`evíts_£nd_‰om_îr_code
(
c⁄n_h™dÀ
, 
îr_code
);

196 
îr_code
)

198 
NRF_ERROR_BUSY
:

199 
	`bÀ_c⁄n_°©e_u£r_Êag_£t
(
c⁄n_h™dÀ
, 
m_Êag_lök_£cuª_nuŒ_∑øms
, 
nuŒ_∑øms
);

200 
	`bÀ_c⁄n_°©e_u£r_Êag_£t
(
c⁄n_h™dÀ
, 
m_Êag_lök_£cuª_f‹˚_ª∑úög
, 
f‹˚_ª∑úög
);

201 
îr_code
 = 
NRF_SUCCESS
;

203 
NRF_ERROR_STORAGE_FULL
:

204 
	`bÀ_c⁄n_°©e_u£r_Êag_£t
(
c⁄n_h™dÀ
, 
m_Êag_lök_£cuª_nuŒ_∑øms
, 
nuŒ_∑øms
);

205 
	`bÀ_c⁄n_°©e_u£r_Êag_£t
(
c⁄n_h™dÀ
, 
m_Êag_lök_£cuª_f‹˚_ª∑úög
, 
f‹˚_ª∑úög
);

207 
NRF_SUCCESS
:

208 
NRF_ERROR_TIMEOUT
:

209 
BLE_ERROR_INVALID_CONN_HANDLE
:

210 
NRF_ERROR_INVALID_STATE
:

214 
îr_code
 = 
NRF_ERROR_INTERNAL
;

218  
îr_code
;

219 
	}
}

222 
	$£nd_c⁄fig_ªq
(
uöt16_t
 
c⁄n_h™dÀ
)

224 
sm_evt_t
 
sm_evt
;

225 
	`mem£t
(&
sm_evt
, 0, (sm_evt));

227 
sm_evt
.
evt_id
 = 
SM_EVT_CONN_SEC_CONFIG_REQ
;

228 
sm_evt
.
c⁄n_h™dÀ
 = conn_handle;

230 
	`evt_£nd
(&
sm_evt
);

231 
	}
}

234 
	$smd_∑øms_ª∂y_≥rf‹m
(
uöt16_t
 
c⁄n_h™dÀ
)

236 
ªt_code_t
 
îr_code
;

238 i‡–(
	`bÀ_c⁄n_°©e_rﬁe
(
c⁄n_h™dÀ
Ë=
BLE_GAP_ROLE_PERIPH
)

239 && 
	`im_≥î_id_gë_by_c⁄n_h™dÀ
(
c⁄n_h™dÀ
Ë!
PM_PEER_ID_INVALID
)

242 
	`bÀ_c⁄n_°©e_u£r_Êag_£t
(
c⁄n_h™dÀ
, 
m_Êag_ªje˘_∑úög
, 
åue
);

243 
	`£nd_c⁄fig_ªq
(
c⁄n_h™dÀ
);

247 
	`bÀ_c⁄n_°©e_u£r_Êag_£t
(
c⁄n_h™dÀ
, 
m_Êag_ªje˘_∑úög
, 
Ál£
);

250 i‡–
m_£c_∑øms_vÆid


251 && !
	`bÀ_c⁄n_°©e_u£r_Êag_gë
(
c⁄n_h™dÀ
, 
m_Êag_ªje˘_∑úög
))

253 
îr_code
 = 
	`smd_∑øms_ª∂y
(
c⁄n_h™dÀ
, &
m_£c_∑øms
, 
m_p_public_key
);

257 
îr_code
 = 
	`smd_∑øms_ª∂y
(
c⁄n_h™dÀ
, 
NULL
, NULL);

260 
	`Êags_£t_‰om_îr_code
(
c⁄n_h™dÀ
, 
îr_code
, 
åue
);

261 
	`evíts_£nd_‰om_îr_code
(
c⁄n_h™dÀ
, 
îr_code
);

262 
	}
}

270 
	$sm_smd_evt_h™dÀr
(
smd_evt_t
 c⁄° * 
p_evít
)

272 
p_evít
->
evt_id
)

274 
SMD_EVT_PARAMS_REQ
:

275 
	`smd_∑øms_ª∂y_≥rf‹m
(
p_evít
->
c⁄n_h™dÀ
);

277 
SMD_EVT_SLAVE_SECURITY_REQ
:

279 
boﬁ
 
nuŒ_∑øms
 = 
Ál£
;

280 i‡(!
m_£c_∑øms_vÆid
)

282 
nuŒ_∑øms
 = 
åue
;

284 i‡((
boﬁ
)
m_£c_∑øms
.
b⁄d
 < (boﬁ)
p_evít
->
∑øms
.
¶ave_£curôy_ªq
.bond)

286 
nuŒ_∑øms
 = 
åue
;

288 i‡((
boﬁ
)
m_£c_∑øms
.
môm
 < (boﬁ)
p_evít
->
∑øms
.
¶ave_£curôy_ªq
.mitm)

290 
nuŒ_∑øms
 = 
åue
;

292 
ªt_code_t
 
îr_code
 = 
	`lök_£cuª
(
p_evít
->
c⁄n_h™dÀ
, 
nuŒ_∑øms
, 
Ál£
, 
åue
);

293 
	`UNUSED_VARIABLE
(
îr_code
);

297 
SMD_EVT_PAIRING_SUCCESS
:

298 
SMD_EVT_PAIRING_FAIL
:

299 
SMD_EVT_LINK_ENCRYPTION_UPDATE
:

300 
SMD_EVT_LINK_ENCRYPTION_FAILED
:

301 
SMD_EVT_BONDING_INFO_STORED
:

302 
SMD_EVT_ERROR_BONDING_INFO
:

303 
SMD_EVT_ERROR_UNEXPECTED
:

304 
SMD_EVT_SEC_PROCEDURE_START
:

306 
sm_evt_t
 
evt
;

307 
evt
.
evt_id
 = (
sm_evt_id_t
)
p_evít
->evt_id;

308 
evt
.
c⁄n_h™dÀ
 = 
p_evít
->conn_handle;

309 
evt
.
∑øms
 = 
p_evít
->params;

311 
	`evt_£nd
(&
evt
);

315 
	}
}

318 
	$lök_£cuª_≥ndög_¥o˚ss
(
bÀ_c⁄n_°©e_u£r_Êag_id_t
 
Êag_id
)

320 
sdk_m≠≥d_Êags_t
 
Êag_cﬁÀ˘i⁄
 = 
	`bÀ_c⁄n_°©e_u£r_Êag_cﬁÀ˘i⁄
(
Êag_id
);

321 i‡(
	`sdk_m≠≥d_Êags_™y_£t
(
Êag_cﬁÀ˘i⁄
))

323 
sdk_m≠≥d_Êags_key_li°_t
 
c⁄n_h™dÀ_li°
 = 
	`bÀ_c⁄n_°©e_c⁄n_h™dÀs
();

325 
uöt32_t
 
i
 = 0; i < 
c⁄n_h™dÀ_li°
.
Àn
; i++)

327 
boﬁ
 
≥ndög
 = 
	`bÀ_c⁄n_°©e_u£r_Êag_gë
(
c⁄n_h™dÀ_li°
.
Êag_keys
[
i
], 
Êag_id
);

328 i‡(
≥ndög
)

330 
boﬁ
 
f‹˚_ª∑úög
 = 
	`bÀ_c⁄n_°©e_u£r_Êag_gë
(
c⁄n_h™dÀ_li°
.
Êag_keys
[
i
], 
m_Êag_lök_£cuª_f‹˚_ª∑úög
);

331 
boﬁ
 
nuŒ_∑øms
 = 
	`bÀ_c⁄n_°©e_u£r_Êag_gë
(
c⁄n_h™dÀ_li°
.
Êag_keys
[
i
], 
m_Êag_lök_£cuª_nuŒ_∑øms
);

333 
ªt_code_t
 
îr_code
 = 
	`lök_£cuª
(
c⁄n_h™dÀ_li°
.
Êag_keys
[
i
], 
nuŒ_∑øms
, 
f‹˚_ª∑úög
, 
åue
);

334 
	`UNUSED_VARIABLE
(
îr_code
);

338 
	}
}

341 
	$∑øms_ª∂y_≥ndög_¥o˚ss
(
bÀ_c⁄n_°©e_u£r_Êag_id_t
 
Êag_id
)

343 
sdk_m≠≥d_Êags_t
 
Êag_cﬁÀ˘i⁄
 = 
	`bÀ_c⁄n_°©e_u£r_Êag_cﬁÀ˘i⁄
(
Êag_id
);

344 i‡(
	`sdk_m≠≥d_Êags_™y_£t
(
Êag_cﬁÀ˘i⁄
))

346 
sdk_m≠≥d_Êags_key_li°_t
 
c⁄n_h™dÀ_li°
 = 
	`bÀ_c⁄n_°©e_c⁄n_h™dÀs
();

348 
uöt32_t
 
i
 = 0; i < 
c⁄n_h™dÀ_li°
.
Àn
; i++)

350 
boﬁ
 
≥ndög
 = 
	`bÀ_c⁄n_°©e_u£r_Êag_gë
(
c⁄n_h™dÀ_li°
.
Êag_keys
[
i
], 
Êag_id
);

351 i‡(
≥ndög
)

353 
	`smd_∑øms_ª∂y_≥rf‹m
(
c⁄n_h™dÀ_li°
.
Êag_keys
[
i
]);

357 
	}
}

365 
	$sm_pdb_evt_h™dÀr
(
pdb_evt_t
 c⁄° * 
p_evít
)

367 
p_evít
->
evt_id
)

369 
PDB_EVT_COMPRESSED
:

370 
	`∑øms_ª∂y_≥ndög_¥o˚ss
(
m_Êag_∑øms_ª∂y_≥ndög_Êash_fuŒ
);

371 
	`lök_£cuª_≥ndög_¥o˚ss
(
m_Êag_lök_£cuª_≥ndög_Êash_fuŒ
);

373 
PDB_EVT_WRITE_BUF_STORED
:

374 
PDB_EVT_RAW_STORED
:

375 
PDB_EVT_RAW_STORE_FAILED
:

376 
PDB_EVT_CLEARED
:

377 
PDB_EVT_CLEAR_FAILED
:

378 
PDB_EVT_PEER_FREED
:

379 
PDB_EVT_PEER_FREE_FAILED
:

380 
	`∑øms_ª∂y_≥ndög_¥o˚ss
(
m_Êag_∑øms_ª∂y_≥ndög_busy
);

381 
	`lök_£cuª_≥ndög_¥o˚ss
(
m_Êag_lök_£cuª_≥ndög_busy
);

383 
PDB_EVT_ERROR_NO_MEM
:

384 
PDB_EVT_ERROR_UNEXPECTED
:

387 
	}
}

394 
	$Êag_id_öô
(
bÀ_c⁄n_°©e_u£r_Êag_id_t
 * 
p_Êag_id
)

396 i‡(*
p_Êag_id
 =
BLE_CONN_STATE_USER_FLAG_INVALID
)

398 *
p_Êag_id
 = 
	`bÀ_c⁄n_°©e_u£r_Êag_acquúe
();

400 
	}
}

403 
ªt_code_t
 
	$sm_öô
()

405 
	`NRF_PM_DEBUG_CHECK
(!
m_moduÀ_öôülized
);

407 
	`Êag_id_öô
(&
m_Êag_lök_£cuª_≥ndög_busy
);

408 
	`Êag_id_öô
(&
m_Êag_lök_£cuª_≥ndög_Êash_fuŒ
);

409 
	`Êag_id_öô
(&
m_Êag_lök_£cuª_f‹˚_ª∑úög
);

410 
	`Êag_id_öô
(&
m_Êag_lök_£cuª_nuŒ_∑øms
);

411 
	`Êag_id_öô
(&
m_Êag_∑øms_ª∂y_≥ndög_busy
);

412 
	`Êag_id_öô
(&
m_Êag_∑øms_ª∂y_≥ndög_Êash_fuŒ
);

413 
	`Êag_id_öô
(&
m_Êag_ªje˘_∑úög
);

415 i‡(
m_Êag_ªje˘_∑úög
 =
BLE_CONN_STATE_USER_FLAG_INVALID
)

417  
NRF_ERROR_INTERNAL
;

420 
m_moduÀ_öôülized
 = 
åue
;

422  
NRF_SUCCESS
;

423 
	}
}

426 
	$sm_bÀ_evt_h™dÀr
(
bÀ_evt_t
 * 
p_bÀ_evt
)

428 
	`NRF_PM_DEBUG_CHECK
(
p_bÀ_evt
 !
NULL
);

430 
	`smd_bÀ_evt_h™dÀr
(
p_bÀ_evt
);

431 
	`lök_£cuª_≥ndög_¥o˚ss
(
m_Êag_lök_£cuª_≥ndög_busy
);

432 
	}
}

435 
boﬁ
 
	$£c_∑øms_vîify
(
bÀ_g≠_£c_∑øms_t
 * 
p_£c_∑øms
)

438 i‡(
p_£c_∑øms
 =
NULL
)

440  
Ál£
;

444 i‡(!
p_£c_∑øms
->
môm
 &&Ö_£c_∑øms->
oob
)

446  
Ál£
;

450 i‡(
p_£c_∑øms
->
io_ˇps
 > 
BLE_GAP_IO_CAPS_KEYBOARD_DISPLAY
)

452  
Ál£
;

456 i‡(
p_£c_∑øms
->
môm
 && (p_£c_∑øms->
io_ˇps
 =
BLE_GAP_IO_CAPS_NONE
Ë&& !p_£c_∑øms->
oob
)

458  
Ál£
;

462 i‡(
p_£c_∑øms
->
mö_key_size
 >Ö_£c_∑øms->
max_key_size
)

464  
Ál£
;

468 i‡(
p_£c_∑øms
->
mö_key_size
 < 7)

470  
Ál£
;

474 i‡(
p_£c_∑øms
->
max_key_size
 > 16)

476  
Ál£
;

480 i‡(
p_£c_∑øms
->
kdi°_own
.
sign
 ||Ö_£c_∑øms->
kdi°_≥î
.sign)

482  
Ál£
;

486 i‡(
p_£c_∑øms
->
kdi°_own
.
lök
 ||Ö_£c_∑øms->
kdi°_≥î
.link)

488  
Ál£
;

492 i‡(!
p_£c_∑øms
->
b⁄d
 && (Ö_£c_∑øms->
kdi°_own
.
íc


493 || 
p_£c_∑øms
->
kdi°_own
.
id


494 || 
p_£c_∑øms
->
kdi°_≥î
.
íc


495 || 
p_£c_∑øms
->
kdi°_≥î
.
id
))

497  
Ál£
;

501 i‡–
p_£c_∑øms
->
b⁄d


502 && !
p_£c_∑øms
->
kdi°_own
.
íc


503 && !
p_£c_∑øms
->
kdi°_own
.
id


504 && !
p_£c_∑øms
->
kdi°_≥î
.
íc


505 && !
p_£c_∑øms
->
kdi°_≥î
.
id
)

507  
Ál£
;

510  
åue
;

511 
	}
}

514 
ªt_code_t
 
	$sm_£c_∑øms_£t
(
bÀ_g≠_£c_∑øms_t
 * 
p_£c_∑øms
)

516 
	`NRF_PM_DEBUG_CHECK
(
m_moduÀ_öôülized
);

518 i‡(
p_£c_∑øms
 =
NULL
)

520 
m_£c_∑øms_vÆid
 = 
Ál£
;

521  
NRF_SUCCESS
;

523 i‡(
	`£c_∑øms_vîify
(
p_£c_∑øms
))

525 
m_£c_∑øms
 = *
p_£c_∑øms
;

526 
m_£c_∑øms_vÆid
 = 
åue
;

527  
NRF_SUCCESS
;

531  
NRF_ERROR_INVALID_PARAM
;

533 
	}
}

536 
	$sm_c⁄n_£c_c⁄fig_ª∂y
(
uöt16_t
 
c⁄n_h™dÀ
, 
pm_c⁄n_£c_c⁄fig_t
 * 
p_c⁄n_£c_c⁄fig
)

538 
	`NRF_PM_DEBUG_CHECK
(
m_moduÀ_öôülized
);

539 
	`NRF_PM_DEBUG_CHECK
(
p_c⁄n_£c_c⁄fig
 !
NULL
);

541 
	`bÀ_c⁄n_°©e_u£r_Êag_£t
(
c⁄n_h™dÀ
, 
m_Êag_ªje˘_∑úög
, !
p_c⁄n_£c_c⁄fig
->
Ælow_ª∑úög
);

542 
	}
}

545 
ªt_code_t
 
	$sm_Àsc_public_key_£t
(
bÀ_g≠_Àsc_p256_pk_t
 * 
p_public_key
)

547 
	`NRF_PM_DEBUG_CHECK
(
m_moduÀ_öôülized
);

549 
m_p_public_key
 = 
p_public_key
;

551  
NRF_SUCCESS
;

552 
	}
}

555 
ªt_code_t
 
	$sm_£c_∑øms_ª∂y
(
uöt16_t
 
c⁄n_h™dÀ
, 
bÀ_g≠_£c_∑øms_t
 * 
p_£c_∑øms
)

557 
	`NRF_PM_DEBUG_CHECK
(
m_moduÀ_öôülized
);

558  
NRF_SUCCESS
;

559 
	}
}

562 
ªt_code_t
 
	$sm_lök_£cuª
(
uöt16_t
 
c⁄n_h™dÀ
, 
boﬁ
 
f‹˚_ª∑úög
)

564 
ªt_code_t
 
ªt
;

566 
	`NRF_PM_DEBUG_CHECK
(
m_moduÀ_öôülized
);

568 
ªt
 = 
	`lök_£cuª
(
c⁄n_h™dÀ
, 
Ál£
, 
f‹˚_ª∑úög
, false);

569  
ªt
;

570 
	}
}

	@D:\Private\Programing\MCU\Nordic\ble_app_template\nRF5_SDK_12.3.0_d7731ad\components\boards\boards.c

40 
	~"bﬂrds.h
"

41 
	~<°döt.h
>

42 
	~<°dboﬁ.h
>

44 #i‡
LEDS_NUMBER
 > 0

45 c⁄° 
uöt8_t
 
	gm_bﬂrd_Àd_li°
[
LEDS_NUMBER
] = 
LEDS_LIST
;

48 #i‡
BUTTONS_NUMBER
 > 0

49 c⁄° 
uöt8_t
 
	gm_bﬂrd_bä_li°
[
BUTTONS_NUMBER
] = 
BUTTONS_LIST
;

52 #i‡
LEDS_NUMBER
 > 0

53 
boﬁ
 
	$b•_bﬂrd_Àd_°©e_gë
(
uöt32_t
 
Àd_idx
)

55 
	`ASSERT
(
Àd_idx
 < 
LEDS_NUMBER
);

56 
boﬁ
 
pö_£t
 = 
	`ƒf_gpio_pö_out_ªad
(
m_bﬂrd_Àd_li°
[
Àd_idx
]Ë? 
åue
 : 
Ál£
;

57  (
pö_£t
 =(
LEDS_ACTIVE_STATE
 ? 
åue
 : 
Ál£
));

58 
	}
}

60 
	$b•_bﬂrd_Àd_⁄
(
uöt32_t
 
Àd_idx
)

62 
	`ASSERT
(
Àd_idx
 < 
LEDS_NUMBER
);

63 
	`ƒf_gpio_pö_wrôe
(
m_bﬂrd_Àd_li°
[
Àd_idx
], 
LEDS_ACTIVE_STATE
 ? 1 : 0);

64 
	}
}

66 
	$b•_bﬂrd_Àd_off
(
uöt32_t
 
Àd_idx
)

68 
	`ASSERT
(
Àd_idx
 < 
LEDS_NUMBER
);

69 
	`ƒf_gpio_pö_wrôe
(
m_bﬂrd_Àd_li°
[
Àd_idx
], 
LEDS_ACTIVE_STATE
 ? 0 : 1);

70 
	}
}

72 
	$b•_bﬂrd_Àds_off
()

74 
uöt32_t
 
i
;

75 
i
 = 0; i < 
LEDS_NUMBER
; ++i)

77 
	`b•_bﬂrd_Àd_off
(
i
);

79 
	}
}

81 
	$b•_bﬂrd_Àds_⁄
()

83 
uöt32_t
 
i
;

84 
i
 = 0; i < 
LEDS_NUMBER
; ++i)

86 
	`b•_bﬂrd_Àd_⁄
(
i
);

88 
	}
}

90 
	$b•_bﬂrd_Àd_övît
(
uöt32_t
 
Àd_idx
)

92 
	`ASSERT
(
Àd_idx
 < 
LEDS_NUMBER
);

93 
	`ƒf_gpio_pö_toggÀ
(
m_bﬂrd_Àd_li°
[
Àd_idx
]);

94 
	}
}

96 
	$b•_bﬂrd_Àds_öô
()

98 
uöt32_t
 
i
;

99 
i
 = 0; i < 
LEDS_NUMBER
; ++i)

101 
	`ƒf_gpio_cfg_ouçut
(
m_bﬂrd_Àd_li°
[
i
]);

103 
	`b•_bﬂrd_Àds_off
();

104 
	}
}

106 
uöt32_t
 
	$b•_bﬂrd_Àd_idx_to_pö
(
uöt32_t
 
Àd_idx
)

108 
	`ASSERT
(
Àd_idx
 < 
LEDS_NUMBER
);

109  
m_bﬂrd_Àd_li°
[
Àd_idx
];

110 
	}
}

112 
uöt32_t
 
	$b•_bﬂrd_pö_to_Àd_idx
(
uöt32_t
 
pö_numbî
)

114 
uöt32_t
 
ªt
 = 0xFFFFFFFF;

115 
uöt32_t
 
i
;

116 
i
 = 0; i < 
LEDS_NUMBER
; ++i)

118 i‡(
m_bﬂrd_Àd_li°
[
i
] =
pö_numbî
)

120 
ªt
 = 
i
;

124  
ªt
;

125 
	}
}

128 #i‡
BUTTONS_NUMBER
 > 0

129 
boﬁ
 
	$b•_bﬂrd_buâ⁄_°©e_gë
(
uöt32_t
 
buâ⁄_idx
)

131 
	`ASSERT
(
buâ⁄_idx
 < 
BUTTONS_NUMBER
);

132 
boﬁ
 
pö_£t
 = 
	`ƒf_gpio_pö_ªad
(
m_bﬂrd_bä_li°
[
buâ⁄_idx
]Ë? 
åue
 : 
Ál£
;

133  (
pö_£t
 =(
BUTTONS_ACTIVE_STATE
 ? 
åue
 : 
Ál£
));

134 
	}
}

136 
	$b•_bﬂrd_buâ⁄s_öô
()

138 
uöt32_t
 
i
;

139 
i
 = 0; i < 
BUTTONS_NUMBER
; ++i)

141 
	`ƒf_gpio_cfg_öput
(
m_bﬂrd_bä_li°
[
i
], 
BUTTON_PULL
);

143 
	}
}

145 
uöt32_t
 
	$b•_bﬂrd_pö_to_buâ⁄_idx
(
uöt32_t
 
pö_numbî
)

147 
uöt32_t
 
i
;

148 
uöt32_t
 
ªt
 = 0xFFFFFFFF;

149 
i
 = 0; i < 
BUTTONS_NUMBER
; ++i)

151 i‡(
m_bﬂrd_bä_li°
[
i
] =
pö_numbî
)

153 
ªt
 = 
i
;

157  
ªt
;

158 
	}
}

160 
uöt32_t
 
	$b•_bﬂrd_buâ⁄_idx_to_pö
(
uöt32_t
 
buâ⁄_idx
)

162 
	`ASSERT
(
buâ⁄_idx
 < 
BUTTONS_NUMBER
);

163  
m_bﬂrd_bä_li°
[
buâ⁄_idx
];

164 
	}
}

	@D:\Private\Programing\MCU\Nordic\ble_app_template\nRF5_SDK_12.3.0_d7731ad\components\drivers_nrf\clock\nrf_drv_clock.c

40 
	~"sdk_comm⁄.h
"

41 #i‡
NRF_MODULE_ENABLED
(
CLOCK
)

43 
	~"ƒf_drv_˛ock.h
"

44 
	~"ƒf_îr‹.h
"

45 
	~"≠p_utû_∂©f‹m.h
"

46 #ifde‡
SOFTDEVICE_PRESENT


47 
	~"so·devi˚_h™dÀr.h
"

48 
	~"ƒf_sdm.h
"

49 
	~"ƒf_soc.h
"

52 
	#NRF_LOG_MODULE_NAME
 "CLOCK"

	)

54 #i‡
CLOCK_CONFIG_LOG_ENABLED


55 
	#NRF_LOG_LEVEL
 
CLOCK_CONFIG_LOG_LEVEL


	)

56 
	#NRF_LOG_INFO_COLOR
 
CLOCK_CONFIG_INFO_COLOR


	)

57 
	#NRF_LOG_DEBUG_COLOR
 
CLOCK_CONFIG_DEBUG_COLOR


	)

58 
	#EVT_TO_STR
(
evít
Ë”víà=
NRF_CLOCK_EVENT_HFCLKSTARTED
 ? "NRF_CLOCK_EVENT_HFCLKSTARTED" : \

59 (
evít
 =
NRF_CLOCK_EVENT_LFCLKSTARTED
 ? "NRF_CLOCK_EVENT_LFCLKSTARTED" : \

60 (
evít
 =
NRF_CLOCK_EVENT_DONE
 ? "NRF_CLOCK_EVENT_DONE" : \

61 (
evít
 =
NRF_CLOCK_EVENT_CTTO
 ? "NRF_CLOCK_EVENT_CTTO" : "UNKNOWN EVENT"))))

	)

63 
	#EVT_TO_STR
(
evít
Ë""

	)

64 
	#NRF_LOG_LEVEL
 0

	)

66 
	~"ƒf_log.h
"

67 
	~"ƒf_log_˘æ.h
"

71 
INTERRUPT_PRIORITY_VALIDATION
(
CLOCK_CONFIG_IRQ_PRIORITY
);

74 
	#NRF_CLOCK_LFCLK_RC
 
CLOCK_LFCLKSRC_SRC_RC


	)

75 
	#NRF_CLOCK_LFCLK_Xèl
 
CLOCK_LFCLKSRC_SRC_Xèl


	)

76 
	#NRF_CLOCK_LFCLK_Sy¡h
 
CLOCK_LFCLKSRC_SRC_Sy¡h


	)

79 #i‡(
CLOCK_CONFIG_LF_SRC
 =
NRF_CLOCK_LFCLK_RC
Ë&& !
deföed
(
SOFTDEVICE_PRESENT
)

80 
	#CALIBRATION_SUPPORT
 1

	)

82 
	#CALIBRATION_SUPPORT
 0

	)

86 
	mCAL_STATE_IDLE
,

87 
	mCAL_STATE_CT
,

88 
	mCAL_STATE_HFCLK_REQ
,

89 
	mCAL_STATE_CAL
,

90 
	mCAL_STATE_ABORT
,

91 } 
	tƒf_drv_˛ock_ˇl_°©e_t
;

96 
boﬁ
 
	mmoduÀ_öôülized
;

97 vﬁ©ûê
boﬁ
 
	mhf˛k_⁄
;

98 vﬁ©ûê
boﬁ
 
	mlf˛k_⁄
;

99 vﬁ©ûê
uöt32_t
 
	mhf˛k_ªque°s
;

100 vﬁ©ûê
ƒf_drv_˛ock_h™dÀr_ôem_t
 * 
	mp_hf_hód
;

101 vﬁ©ûê
uöt32_t
 
	mlf˛k_ªque°s
;

102 vﬁ©ûê
ƒf_drv_˛ock_h™dÀr_ôem_t
 * 
	mp_lf_hód
;

103 #i‡
CALIBRATION_SUPPORT


104 
ƒf_drv_˛ock_h™dÀr_ôem_t
 
	mˇl_hf˛k_°¨ãd_h™dÀr_ôem
;

105 
ƒf_drv_˛ock_evít_h™dÀr_t
 
	mˇl_d⁄e_h™dÀr
;

106 vﬁ©ûê
ƒf_drv_˛ock_ˇl_°©e_t
 
	mˇl_°©e
;

108 } 
	tƒf_drv_˛ock_cb_t
;

110 
ƒf_drv_˛ock_cb_t
 
	gm_˛ock_cb
;

115 
	$lf˛k_°¨t
()

117 
	`ƒf_˛ock_evít_˛ór
(
NRF_CLOCK_EVENT_LFCLKSTARTED
);

118 
	`ƒf_˛ock_öt_íabÀ
(
NRF_CLOCK_INT_LF_STARTED_MASK
);

119 
	`ƒf_˛ock_èsk_åiggî
(
NRF_CLOCK_TASK_LFCLKSTART
);

120 
	}
}

124 
	$lf˛k_°›
()

126 #i‡
CALIBRATION_SUPPORT


127 ()
	`ƒf_drv_˛ock_ˇlibøti⁄_ab‹t
();

130 #ifde‡
SOFTDEVICE_PRESENT


134 
	`ASSERT
(!
	`so·devi˚_h™dÀr_is_íabÀd
());

137 
	`ƒf_˛ock_èsk_åiggî
(
NRF_CLOCK_TASK_LFCLKSTOP
);

138 
	`ƒf_˛ock_lf_is_ru¬ög
())

140 
m_˛ock_cb
.
lf˛k_⁄
 = 
Ál£
;

141 
	}
}

143 
	$hf˛k_°¨t
()

145 #ifde‡
SOFTDEVICE_PRESENT


146 i‡(
	`so·devi˚_h™dÀr_is_íabÀd
())

148 ()
	`sd_˛ock_hf˛k_ªque°
();

153 
	`ƒf_˛ock_evít_˛ór
(
NRF_CLOCK_EVENT_HFCLKSTARTED
);

154 
	`ƒf_˛ock_öt_íabÀ
(
NRF_CLOCK_INT_HF_STARTED_MASK
);

155 
	`ƒf_˛ock_èsk_åiggî
(
NRF_CLOCK_TASK_HFCLKSTART
);

156 
	}
}

158 
	$hf˛k_°›
()

160 #ifde‡
SOFTDEVICE_PRESENT


161 i‡(
	`so·devi˚_h™dÀr_is_íabÀd
())

163 ()
	`sd_˛ock_hf˛k_ªÀa£
();

168 
	`ƒf_˛ock_èsk_åiggî
(
NRF_CLOCK_TASK_HFCLKSTOP
);

169 
	`ƒf_˛ock_hf_is_ru¬ög
(
NRF_CLOCK_HFCLK_HIGH_ACCURACY
))

171 
m_˛ock_cb
.
hf˛k_⁄
 = 
Ál£
;

172 
	}
}

174 
boﬁ
 
	$ƒf_drv_˛ock_öô_check
()

176  
m_˛ock_cb
.
moduÀ_öôülized
;

177 
	}
}

179 
ªt_code_t
 
	$ƒf_drv_˛ock_öô
()

181 
ªt_code_t
 
îr_code
 = 
NRF_SUCCESS
;

182 i‡(
m_˛ock_cb
.
moduÀ_öôülized
)

184 
îr_code
 = 
NRF_ERROR_MODULE_ALREADY_INITIALIZED
;

188 
m_˛ock_cb
.
p_hf_hód
 = 
NULL
;

189 
m_˛ock_cb
.
hf˛k_ªque°s
 = 0;

190 
m_˛ock_cb
.
p_lf_hód
 = 
NULL
;

191 
m_˛ock_cb
.
lf˛k_ªque°s
 = 0;

192 
	`ƒf_drv_comm⁄_powî_˛ock_úq_öô
();

193 #ifde‡
SOFTDEVICE_PRESENT


194 i‡(!
	`so·devi˚_h™dÀr_is_íabÀd
())

197 
	`ƒf_˛ock_lf_§c_£t
((
ƒf_˛ock_lf˛k_t
)
CLOCK_CONFIG_LF_SRC
);

200 #i‡
CALIBRATION_SUPPORT


201 
m_˛ock_cb
.
ˇl_°©e
 = 
CAL_STATE_IDLE
;

204 
m_˛ock_cb
.
moduÀ_öôülized
 = 
åue
;

207 
	`NRF_LOG_INFO
("Function: %s,Érror code: %s.\r\n",

208 (
uöt32_t
)
__func__
, (uöt32_t)
	`ERR_TO_STR
(
îr_code
));

209  
îr_code
;

210 
	}
}

212 
	$ƒf_drv_˛ock_unöô
()

214 
	`ASSERT
(
m_˛ock_cb
.
moduÀ_öôülized
);

215 
	`ƒf_drv_comm⁄_˛ock_úq_dißbÀ
();

216 
	`ƒf_˛ock_öt_dißbÀ
(0xFFFFFFFF);

218 
	`lf˛k_°›
();

219 
	`hf˛k_°›
();

220 
m_˛ock_cb
.
moduÀ_öôülized
 = 
Ál£
;

221 
	`NRF_LOG_INFO
("Uninitialized.\r\n");

222 
	}
}

224 
	$ôem_íqueue
(
ƒf_drv_˛ock_h™dÀr_ôem_t
 ** 
p_hód
,

225 
ƒf_drv_˛ock_h™dÀr_ôem_t
 * 
p_ôem
)

227 
ƒf_drv_˛ock_h™dÀr_ôem_t
 * 
p_√xt
 = *
p_hód
;

228 
p_√xt
)

230 if(
p_√xt
 =
p_ôem
)

234 
p_√xt
 =Ö_next->p_next;

237 
p_ôem
->
p_√xt
 = (*
p_hód
 ? *p_hód : 
NULL
);

238 *
p_hód
 = 
p_ôem
;

239 
	}
}

241 
ƒf_drv_˛ock_h™dÀr_ôem_t
 * 
	$ôem_dequeue
(
ƒf_drv_˛ock_h™dÀr_ôem_t
 ** 
p_hód
)

243 
ƒf_drv_˛ock_h™dÀr_ôem_t
 * 
p_ôem
 = *
p_hód
;

244 i‡(
p_ôem
)

246 *
p_hód
 = 
p_ôem
->
p_√xt
;

248  
p_ôem
;

249 
	}
}

251 
	$ƒf_drv_˛ock_lf˛k_ªque°
(
ƒf_drv_˛ock_h™dÀr_ôem_t
 * 
p_h™dÀr_ôem
)

253 
	`ASSERT
(
m_˛ock_cb
.
moduÀ_öôülized
);

255 i‡(
m_˛ock_cb
.
lf˛k_⁄
)

257 i‡(
p_h™dÀr_ôem
)

259 
p_h™dÀr_ôem
->
	`evít_h™dÀr
(
NRF_DRV_CLOCK_EVT_LFCLK_STARTED
);

261 
	`CRITICAL_REGION_ENTER
();

262 ++(
m_˛ock_cb
.
lf˛k_ªque°s
);

263 
	`CRITICAL_REGION_EXIT
();

267 
	`CRITICAL_REGION_ENTER
();

268 i‡(
p_h™dÀr_ôem
)

270 
	`ôem_íqueue
((
ƒf_drv_˛ock_h™dÀr_ôem_t
 **)&
m_˛ock_cb
.
p_lf_hód
,

271 
p_h™dÀr_ôem
);

273 i‡(
m_˛ock_cb
.
lf˛k_ªque°s
 == 0)

275 
	`lf˛k_°¨t
();

277 ++(
m_˛ock_cb
.
lf˛k_ªque°s
);

278 
	`CRITICAL_REGION_EXIT
();

281 
	`ASSERT
(
m_˛ock_cb
.
lf˛k_ªque°s
 > 0);

282 
	}
}

284 
	$ƒf_drv_˛ock_lf˛k_ªÀa£
()

286 
	`ASSERT
(
m_˛ock_cb
.
moduÀ_öôülized
);

287 
	`ASSERT
(
m_˛ock_cb
.
lf˛k_ªque°s
 > 0);

289 
	`CRITICAL_REGION_ENTER
();

290 --(
m_˛ock_cb
.
lf˛k_ªque°s
);

291 i‡(
m_˛ock_cb
.
lf˛k_ªque°s
 == 0)

293 
	`lf˛k_°›
();

295 
	`CRITICAL_REGION_EXIT
();

296 
	}
}

298 
boﬁ
 
	$ƒf_drv_˛ock_lf˛k_is_ru¬ög
()

300 
	`ASSERT
(
m_˛ock_cb
.
moduÀ_öôülized
);

302 #ifde‡
SOFTDEVICE_PRESENT


303 i‡(
	`so·devi˚_h™dÀr_is_íabÀd
())

305  
åue
;

309  
	`ƒf_˛ock_lf_is_ru¬ög
();

310 
	}
}

312 
	$ƒf_drv_˛ock_hf˛k_ªque°
(
ƒf_drv_˛ock_h™dÀr_ôem_t
 * 
p_h™dÀr_ôem
)

314 
	`ASSERT
(
m_˛ock_cb
.
moduÀ_öôülized
);

316 i‡(
m_˛ock_cb
.
hf˛k_⁄
)

318 i‡(
p_h™dÀr_ôem
)

320 
p_h™dÀr_ôem
->
	`evít_h™dÀr
(
NRF_DRV_CLOCK_EVT_HFCLK_STARTED
);

322 
	`CRITICAL_REGION_ENTER
();

323 ++(
m_˛ock_cb
.
hf˛k_ªque°s
);

324 
	`CRITICAL_REGION_EXIT
();

328 
	`CRITICAL_REGION_ENTER
();

329 i‡(
p_h™dÀr_ôem
)

331 
	`ôem_íqueue
((
ƒf_drv_˛ock_h™dÀr_ôem_t
 **)&
m_˛ock_cb
.
p_hf_hód
,

332 
p_h™dÀr_ôem
);

334 i‡(
m_˛ock_cb
.
hf˛k_ªque°s
 == 0)

336 
	`hf˛k_°¨t
();

338 ++(
m_˛ock_cb
.
hf˛k_ªque°s
);

339 
	`CRITICAL_REGION_EXIT
();

342 
	`ASSERT
(
m_˛ock_cb
.
hf˛k_ªque°s
 > 0);

343 
	}
}

345 
	$ƒf_drv_˛ock_hf˛k_ªÀa£
()

347 
	`ASSERT
(
m_˛ock_cb
.
moduÀ_öôülized
);

348 
	`ASSERT
(
m_˛ock_cb
.
hf˛k_ªque°s
 > 0);

350 
	`CRITICAL_REGION_ENTER
();

351 --(
m_˛ock_cb
.
hf˛k_ªque°s
);

352 i‡(
m_˛ock_cb
.
hf˛k_ªque°s
 == 0)

354 
	`hf˛k_°›
();

356 
	`CRITICAL_REGION_EXIT
();

357 
	}
}

359 
boﬁ
 
	$ƒf_drv_˛ock_hf˛k_is_ru¬ög
()

361 
	`ASSERT
(
m_˛ock_cb
.
moduÀ_öôülized
);

363 #ifde‡
SOFTDEVICE_PRESENT


364 i‡(
	`so·devi˚_h™dÀr_is_íabÀd
())

366 
uöt32_t
 
is_ru¬ög
;

367 
	`UNUSED_VARIABLE
(
	`sd_˛ock_hf˛k_is_ru¬ög
(&
is_ru¬ög
));

368  (
is_ru¬ög
 ? 
åue
 : 
Ál£
);

372  
	`ƒf_˛ock_hf_is_ru¬ög
(
NRF_CLOCK_HFCLK_HIGH_ACCURACY
);

373 
	}
}

375 #i‡
CALIBRATION_SUPPORT


376 
	$˛ock_ˇlibøti⁄_hf_°¨ãd
(
ƒf_drv_˛ock_evt_ty≥_t
 
evít
)

378 i‡(
m_˛ock_cb
.
ˇl_°©e
 =
CAL_STATE_ABORT
)

380 
	`ƒf_drv_˛ock_hf˛k_ªÀa£
();

381 
m_˛ock_cb
.
ˇl_°©e
 = 
CAL_STATE_IDLE
;

382 i‡(
m_˛ock_cb
.
ˇl_d⁄e_h™dÀr
)

384 
m_˛ock_cb
.
	`ˇl_d⁄e_h™dÀr
(
NRF_DRV_CLOCK_EVT_CAL_ABORTED
);

389 
	`ƒf_˛ock_evít_˛ór
(
NRF_CLOCK_EVENT_DONE
);

390 
	`ƒf_˛ock_öt_íabÀ
(
NRF_CLOCK_INT_DONE_MASK
);

391 
m_˛ock_cb
.
ˇl_°©e
 = 
CAL_STATE_CAL
;

392 
	`ƒf_˛ock_èsk_åiggî
(
NRF_CLOCK_TASK_CAL
);

394 
	}
}

397 
ªt_code_t
 
	$ƒf_drv_˛ock_ˇlibøti⁄_°¨t
(
uöt8_t
 
öãrvÆ
, 
ƒf_drv_˛ock_evít_h™dÀr_t
 
h™dÀr
)

399 
ªt_code_t
 
îr_code
 = 
NRF_SUCCESS
;

400 #i‡
CALIBRATION_SUPPORT


401 
	`ASSERT
(
m_˛ock_cb
.
ˇl_°©e
 =
CAL_STATE_IDLE
);

402 i‡(
m_˛ock_cb
.
lf˛k_⁄
 =
Ál£
)

404 
îr_code
 = 
NRF_ERROR_INVALID_STATE
;

406 i‡(
m_˛ock_cb
.
ˇl_°©e
 =
CAL_STATE_IDLE
)

408 
m_˛ock_cb
.
ˇl_d⁄e_h™dÀr
 = 
h™dÀr
;

409 
m_˛ock_cb
.
ˇl_hf˛k_°¨ãd_h™dÀr_ôem
.
evít_h™dÀr
 = 
˛ock_ˇlibøti⁄_hf_°¨ãd
;

410 i‡(
öãrvÆ
 == 0)

412 
m_˛ock_cb
.
ˇl_°©e
 = 
CAL_STATE_HFCLK_REQ
;

413 
	`ƒf_drv_˛ock_hf˛k_ªque°
(&
m_˛ock_cb
.
ˇl_hf˛k_°¨ãd_h™dÀr_ôem
);

417 
m_˛ock_cb
.
ˇl_°©e
 = 
CAL_STATE_CT
;

418 
	`ƒf_˛ock_ˇl_timî_timeout_£t
(
öãrvÆ
);

419 
	`ƒf_˛ock_evít_˛ór
(
NRF_CLOCK_EVENT_CTTO
);

420 
	`ƒf_˛ock_öt_íabÀ
(
NRF_CLOCK_INT_CTTO_MASK
);

421 
	`ƒf_˛ock_èsk_åiggî
(
NRF_CLOCK_TASK_CTSTART
);

426 
îr_code
 = 
NRF_ERROR_BUSY
;

428 
	`NRF_LOG_WARNING
("Fun˘i⁄: %s,Éº‹ code: %s.\r\n", (
uöt32_t
)
__func__
, (uöt32_t)
	`ERR_TO_STR
(
îr_code
));

429  
îr_code
;

431 
îr_code
 = 
NRF_ERROR_FORBIDDEN
;

432 
	`NRF_LOG_WARNING
("Fun˘i⁄: %s,Éº‹ code: %s.\r\n", (
uöt32_t
)
__func__
, (uöt32_t)
	`ERR_TO_STR
(
îr_code
));

433  
îr_code
;

435 
	}
}

437 
ªt_code_t
 
	$ƒf_drv_˛ock_ˇlibøti⁄_ab‹t
()

439 
ªt_code_t
 
îr_code
 = 
NRF_SUCCESS
;

440 #i‡
CALIBRATION_SUPPORT


441 
	`CRITICAL_REGION_ENTER
();

442 
m_˛ock_cb
.
ˇl_°©e
)

444 
CAL_STATE_CT
:

445 
	`ƒf_˛ock_öt_dißbÀ
(
NRF_CLOCK_INT_CTTO_MASK
);

446 
	`ƒf_˛ock_èsk_åiggî
(
NRF_CLOCK_TASK_CTSTOP
);

447 
m_˛ock_cb
.
ˇl_°©e
 = 
CAL_STATE_IDLE
;

448 i‡(
m_˛ock_cb
.
ˇl_d⁄e_h™dÀr
)

450 
m_˛ock_cb
.
	`ˇl_d⁄e_h™dÀr
(
NRF_DRV_CLOCK_EVT_CAL_ABORTED
);

453 
CAL_STATE_HFCLK_REQ
:

455 
CAL_STATE_CAL
:

456 
m_˛ock_cb
.
ˇl_°©e
 = 
CAL_STATE_ABORT
;

461 
	`CRITICAL_REGION_EXIT
();

463 
	`NRF_LOG_INFO
("Fun˘i⁄: %s,Éº‹ code: %s.\r\n", (
uöt32_t
)
__func__
, (uöt32_t)
	`ERR_TO_STR
(
îr_code
));

464  
îr_code
;

466 
îr_code
 = 
NRF_ERROR_FORBIDDEN
;

467 
	`NRF_LOG_WARNING
("Fun˘i⁄: %s,Éº‹ code: %s.\r\n", (
uöt32_t
)
__func__
, (uöt32_t)
	`ERR_TO_STR
(
îr_code
));

468  
îr_code
;

470 
	}
}

472 
ªt_code_t
 
	$ƒf_drv_˛ock_is_ˇlibøtög
(
boﬁ
 * 
p_is_ˇlibøtög
)

474 
ªt_code_t
 
îr_code
 = 
NRF_SUCCESS
;

475 #i‡
CALIBRATION_SUPPORT


476 
	`ASSERT
(
m_˛ock_cb
.
moduÀ_öôülized
);

477 *
p_is_ˇlibøtög
 = (
m_˛ock_cb
.
ˇl_°©e
 !
CAL_STATE_IDLE
);

478 
	`NRF_LOG_INFO
("Fun˘i⁄: %s,Éº‹ code: %s.\r\n", (
uöt32_t
)
__func__
, (uöt32_t)
	`ERR_TO_STR
(
îr_code
));

479  
îr_code
;

481 
îr_code
 = 
NRF_ERROR_FORBIDDEN
;

482 
	`NRF_LOG_WARNING
("Fun˘i⁄: %s,Éº‹ code: %s.\r\n", (
uöt32_t
)
__func__
, (uöt32_t)
	`ERR_TO_STR
(
îr_code
));

483  
îr_code
;

485 
	}
}

487 
__STATIC_INLINE
 
	$˛ock_˛k_°¨ãd_nŸify
(
ƒf_drv_˛ock_evt_ty≥_t
 
evt_ty≥
)

489 
ƒf_drv_˛ock_h™dÀr_ôem_t
 **
p_hód
;

490 i‡(
evt_ty≥
 =
NRF_DRV_CLOCK_EVT_HFCLK_STARTED
)

492 
p_hód
 = (
ƒf_drv_˛ock_h™dÀr_ôem_t
 **)&
m_˛ock_cb
.
p_hf_hód
;

496 
p_hód
 = (
ƒf_drv_˛ock_h™dÀr_ôem_t
 **)&
m_˛ock_cb
.
p_lf_hód
;

501 
ƒf_drv_˛ock_h™dÀr_ôem_t
 * 
p_ôem
 = 
	`ôem_dequeue
(
p_hód
);

502 i‡(!
p_ôem
)

507 
p_ôem
->
	`evít_h™dÀr
(
evt_ty≥
);

509 
	}
}

511 #i‡
NRF_DRV_COMMON_POWER_CLOCK_ISR


512 
	$ƒf_drv_˛ock_⁄IRQ
()

514 
	$POWER_CLOCK_IRQH™dÀr
()

517 i‡(
	`ƒf_˛ock_evít_check
(
NRF_CLOCK_EVENT_HFCLKSTARTED
))

519 
	`ƒf_˛ock_evít_˛ór
(
NRF_CLOCK_EVENT_HFCLKSTARTED
);

520 
	`NRF_LOG_DEBUG
("Evít: %s.\r\n", (
uöt32_t
)
	`EVT_TO_STR
(
NRF_CLOCK_EVENT_HFCLKSTARTED
));

521 
	`ƒf_˛ock_öt_dißbÀ
(
NRF_CLOCK_INT_HF_STARTED_MASK
);

522 
m_˛ock_cb
.
hf˛k_⁄
 = 
åue
;

523 
	`˛ock_˛k_°¨ãd_nŸify
(
NRF_DRV_CLOCK_EVT_HFCLK_STARTED
);

525 i‡(
	`ƒf_˛ock_evít_check
(
NRF_CLOCK_EVENT_LFCLKSTARTED
))

527 
	`ƒf_˛ock_evít_˛ór
(
NRF_CLOCK_EVENT_LFCLKSTARTED
);

528 
	`NRF_LOG_DEBUG
("Evít: %s.\r\n", (
uöt32_t
)
	`EVT_TO_STR
(
NRF_CLOCK_EVENT_LFCLKSTARTED
));

529 
	`ƒf_˛ock_öt_dißbÀ
(
NRF_CLOCK_INT_LF_STARTED_MASK
);

530 
m_˛ock_cb
.
lf˛k_⁄
 = 
åue
;

531 
	`˛ock_˛k_°¨ãd_nŸify
(
NRF_DRV_CLOCK_EVT_LFCLK_STARTED
);

533 #i‡
CALIBRATION_SUPPORT


534 i‡(
	`ƒf_˛ock_evít_check
(
NRF_CLOCK_EVENT_CTTO
))

536 
	`ƒf_˛ock_evít_˛ór
(
NRF_CLOCK_EVENT_CTTO
);

537 
	`NRF_LOG_DEBUG
("Evít: %s.\r\n", (
uöt32_t
)
	`EVT_TO_STR
(
NRF_CLOCK_EVENT_CTTO
));

538 
	`ƒf_˛ock_öt_dißbÀ
(
NRF_CLOCK_INT_CTTO_MASK
);

539 
	`ƒf_drv_˛ock_hf˛k_ªque°
(&
m_˛ock_cb
.
ˇl_hf˛k_°¨ãd_h™dÀr_ôem
);

542 i‡(
	`ƒf_˛ock_evít_check
(
NRF_CLOCK_EVENT_DONE
))

544 
	`ƒf_˛ock_evít_˛ór
(
NRF_CLOCK_EVENT_DONE
);

545 
	`NRF_LOG_DEBUG
("Evít: %s.\r\n", (
uöt32_t
)
	`EVT_TO_STR
(
NRF_CLOCK_EVENT_DONE
));

546 
	`ƒf_˛ock_öt_dißbÀ
(
NRF_CLOCK_INT_DONE_MASK
);

547 
	`ƒf_drv_˛ock_hf˛k_ªÀa£
();

548 
boﬁ
 
ab‹ãd
 = (
m_˛ock_cb
.
ˇl_°©e
 =
CAL_STATE_ABORT
);

549 
m_˛ock_cb
.
ˇl_°©e
 = 
CAL_STATE_IDLE
;

550 i‡(
m_˛ock_cb
.
ˇl_d⁄e_h™dÀr
)

552 
m_˛ock_cb
.
	`ˇl_d⁄e_h™dÀr
(
ab‹ãd
 ?

553 
NRF_DRV_CLOCK_EVT_CAL_ABORTED
 : 
NRF_DRV_CLOCK_EVT_CAL_DONE
);

557 
	}
}

559 #ifde‡
SOFTDEVICE_PRESENT


561 
	$ƒf_drv_˛ock_⁄_soc_evít
(
uöt32_t
 
evt_id
)

563 i‡(
evt_id
 =
NRF_EVT_HFCLKSTARTED
)

565 
	`˛ock_˛k_°¨ãd_nŸify
(
NRF_DRV_CLOCK_EVT_HFCLK_STARTED
);

567 
	}
}

569 
	$ƒf_drv_˛ock_⁄_sd_íabÀ
()

571 
	`CRITICAL_REGION_ENTER
();

573 i‡(!
m_˛ock_cb
.
moduÀ_öôülized
)

575 ()
	`ƒf_drv_˛ock_öô
();

578 ++(
m_˛ock_cb
.
lf˛k_ªque°s
);

579 
m_˛ock_cb
.
lf˛k_⁄
 = 
åue
;

580 
	`CRITICAL_REGION_EXIT
();

581 
	}
}

583 
	$ƒf_drv_˛ock_⁄_sd_dißbÀ
()

586 
	`ASSERT
(
m_˛ock_cb
.
moduÀ_öôülized
);

587 
	`ƒf_drv_comm⁄_úq_íabÀ
(
POWER_CLOCK_IRQn
, 
CLOCK_CONFIG_IRQ_PRIORITY
);

590 
	`ƒf_drv_˛ock_lf˛k_ªÀa£
();

591 
	}
}

595 #unde‡
NRF_CLOCK_LFCLK_RC


596 #unde‡
NRF_CLOCK_LFCLK_Xèl


597 #unde‡
NRF_CLOCK_LFCLK_Sy¡h


	@D:\Private\Programing\MCU\Nordic\ble_app_template\nRF5_SDK_12.3.0_d7731ad\components\drivers_nrf\common\nrf_drv_common.c

41 
	~<°ddef.h
>

42 
	~"ƒf_drv_comm⁄.h
"

43 
	~"ƒf_as£π.h
"

44 
	~"≠p_utû_∂©f‹m.h
"

45 
	~"ƒf_≥rùhîÆs.h
"

47 #i‡
NRF_DRV_COMMON_POWER_CLOCK_ISR


48 
	~"ƒf_drv_powî.h
"

49 
	~"ƒf_drv_˛ock.h
"

51 #ifde‡
SOFTDEVICE_PRESENT


52 
	~"ƒf_soc.h
"

55 #i‡
NRF_MODULE_ENABLED
(
PERIPHERAL_RESOURCE_SHARING
)

57 
	#NRF_LOG_MODULE_NAME
 "COMMON"

	)

59 #i‡
COMMON_CONFIG_LOG_ENABLED


60 
	#NRF_LOG_LEVEL
 
COMMON_CONFIG_LOG_LEVEL


	)

61 
	#NRF_LOG_INFO_COLOR
 
COMMON_CONFIG_INFO_COLOR


	)

62 
	#NRF_LOG_DEBUG_COLOR
 
COMMON_CONFIG_DEBUG_COLOR


	)

64 
	#NRF_LOG_LEVEL
 0

	)

66 
	~"ƒf_log.h
"

67 
	~"ƒf_log_˘æ.h
"

70 
ƒf_drv_úq_h™dÀr_t
 
	mh™dÀr
;

71 
boﬁ
 
	macquúed
;

72 } 
	tsh¨ed_ªsour˚_t
;

75 #i‡(
NRF_MODULE_ENABLED
(
SPI0
Ë|| NRF_MODULE_ENABLED(
SPIS0
Ë|| NRF_MODULE_ENABLED(
TWI0
Ë|| NRF_MODULE_ENABLED(
TWIS0
))

76 
	#SERIAL_BOX_0_IN_USE


	)

78 #i‚de‡
IS_SERIAL_BOX_0


79 
	#IS_SERIAL_BOX_0
(
p_≥r_ba£
Ë’_≥r_ba£ =
NRF_SPI0
)

	)

82 
sh¨ed_ªsour˚_t
 
	gm_£rül_box_0
 = { .
acquúed
 = 
Ál£
 };

83 
	$SPI0_TWI0_IRQH™dÀr
()

85 
	`ASSERT
(
m_£rül_box_0
.
h™dÀr
);

86 
m_£rül_box_0
.
	`h™dÀr
();

87 
	}
}

91 #i‡(
NRF_MODULE_ENABLED
(
SPI1
Ë|| NRF_MODULE_ENABLED(
SPIS1
Ë|| NRF_MODULE_ENABLED(
TWI1
Ë|| NRF_MODULE_ENABLED(
TWIS1
))

92 
	#SERIAL_BOX_1_IN_USE


	)

94 #i‚de‡
IS_SERIAL_BOX_1


95 
	#IS_SERIAL_BOX_1
(
p_≥r_ba£
Ë’_≥r_ba£ =
NRF_SPI1
)

	)

98 
sh¨ed_ªsour˚_t
 
	gm_£rül_box_1
 = { .
acquúed
 = 
Ál£
 };

99 #ifde‡
TWIM_PRESENT


100 
	$SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQH™dÀr
()

102 
	$SPI1_TWI1_IRQH™dÀr
()

105 
	`ASSERT
(
m_£rül_box_1
.
h™dÀr
);

106 
m_£rül_box_1
.
	`h™dÀr
();

107 
	}
}

111 #i‡(
NRF_MODULE_ENABLED
(
SPI2
Ë|| NRF_MODULE_ENABLED(
SPIS2
))

112 
	#SERIAL_BOX_2_IN_USE


	)

114 #i‚de‡
IS_SERIAL_BOX_2


115 
	#IS_SERIAL_BOX_2
(
p_≥r_ba£
Ë’_≥r_ba£ =
NRF_SPI2
)

	)

118 
sh¨ed_ªsour˚_t
 
	gm_£rül_box_2
 = { .
acquúed
 = 
Ál£
 };

119 
	$SPIM2_SPIS2_SPI2_IRQH™dÀr
()

121 
	`ASSERT
(
m_£rül_box_2
.
h™dÀr
);

122 
m_£rül_box_2
.
	`h™dÀr
();

123 
	}
}

127 #i‡(
NRF_MODULE_ENABLED
(
COMP
Ë|| NRF_MODULE_ENABLED(
LPCOMP
))

128 
	#COMP_LPCOMP_IN_USE


	)

130 #i‚de‡
IS_COMP_LPCOMP


131 
	#IS_COMP_LPCOMP
(
p_≥r_ba£
Ë(’_≥r_ba£Ë=
NRF_LPCOMP
)

	)

134 
sh¨ed_ªsour˚_t
 
	gm_comp_Õcomp
 = { .
acquúed
 = 
Ál£
 };

135 
	$LPCOMP_IRQH™dÀr
()

137 
	`ASSERT
(
m_comp_Õcomp
.
h™dÀr
);

138 
m_comp_Õcomp
.
	`h™dÀr
();

139 
	}
}

142 #i‡
deföed
(
SERIAL_BOX_0_IN_USE
) || \

143 
deföed
(
SERIAL_BOX_1_IN_USE
) || \

144 
deföed
(
SERIAL_BOX_2_IN_USE
) || \

145 
	$deföed
(
COMP_LPCOMP_IN_USE
)

146 
ªt_code_t
 
	$acquúe_sh¨ed_ªsour˚
(
sh¨ed_ªsour˚_t
 * 
p_ªsour˚
,

147 
ƒf_drv_úq_h™dÀr_t
 
h™dÀr
)

149 
ªt_code_t
 
îr_code
;

151 
boﬁ
 
busy
 = 
Ál£
;

153 
	`CRITICAL_REGION_ENTER
();

154 i‡(
p_ªsour˚
->
acquúed
)

156 
busy
 = 
åue
;

160 
p_ªsour˚
->
acquúed
 = 
åue
;

162 
	`CRITICAL_REGION_EXIT
();

164 i‡(
busy
)

166 
îr_code
 = 
NRF_ERROR_BUSY
;

167 
	`NRF_LOG_WARNING
("Fun˘i⁄: %s,Éº‹ code: %s.\r\n", (
uöt32_t
)
__func__
, (uöt32_t)
	`ERR_TO_STR
(
îr_code
));

168  
îr_code
;

171 
p_ªsour˚
->
h™dÀr
 = handler;

172 
îr_code
 = 
NRF_SUCCESS
;

173 
	`NRF_LOG_INFO
("Fun˘i⁄: %s,Éº‹ code: %s.\r\n", (
uöt32_t
)
__func__
, (uöt32_t)
	`ERR_TO_STR
(
îr_code
));

174  
îr_code
;

175 
	}
}

178 
ªt_code_t
 
	$ƒf_drv_comm⁄_≥r_ªs_acquúe
(c⁄° * 
p_≥r_ba£
,

179 
ƒf_drv_úq_h™dÀr_t
 
h™dÀr
)

181 #ifde‡
SERIAL_BOX_0_IN_USE


182 i‡(
	`IS_SERIAL_BOX_0
(
p_≥r_ba£
))

184  
	`acquúe_sh¨ed_ªsour˚
(&
m_£rül_box_0
, 
h™dÀr
);

188 #ifde‡
SERIAL_BOX_1_IN_USE


189 i‡(
	`IS_SERIAL_BOX_1
(
p_≥r_ba£
))

191  
	`acquúe_sh¨ed_ªsour˚
(&
m_£rül_box_1
, 
h™dÀr
);

195 #ifde‡
SERIAL_BOX_2_IN_USE


196 i‡(
	`IS_SERIAL_BOX_2
(
p_≥r_ba£
))

198  
	`acquúe_sh¨ed_ªsour˚
(&
m_£rül_box_2
, 
h™dÀr
);

202 #ifde‡
COMP_LPCOMP_IN_USE


203 i‡(
	`IS_COMP_LPCOMP
(
p_≥r_ba£
))

205  
	`acquúe_sh¨ed_ªsour˚
(&
m_comp_Õcomp
, 
h™dÀr
);

208 
ªt_code_t
 
îr_code
;

210 
îr_code
 = 
NRF_ERROR_INVALID_PARAM
;

211 
	`NRF_LOG_WARNING
("Fun˘i⁄: %s,Éº‹ code: %s.\r\n", (
uöt32_t
)
__func__
, (uöt32_t)
	`ERR_TO_STR
(
îr_code
));

212  
îr_code
;

213 
	}
}

215 
	$ƒf_drv_comm⁄_≥r_ªs_ªÀa£
(c⁄° * 
p_≥r_ba£
)

217 #ifde‡
SERIAL_BOX_0_IN_USE


218 i‡(
	`IS_SERIAL_BOX_0
(
p_≥r_ba£
))

220 
m_£rül_box_0
.
acquúed
 = 
Ál£
;

225 #ifde‡
SERIAL_BOX_1_IN_USE


226 i‡(
	`IS_SERIAL_BOX_1
(
p_≥r_ba£
))

228 
m_£rül_box_1
.
acquúed
 = 
Ál£
;

233 #ifde‡
SERIAL_BOX_2_IN_USE


234 i‡(
	`IS_SERIAL_BOX_2
(
p_≥r_ba£
))

236 
m_£rül_box_2
.
acquúed
 = 
Ál£
;

241 #ifde‡
COMP_LPCOMP_IN_USE


242 i‡(
	`IS_COMP_LPCOMP
(
p_≥r_ba£
))

244 
m_comp_Õcomp
.
acquúed
 = 
Ál£
;

250 
	}
}

254 #i‡
NRF_MODULE_ENABLED
(
POWER
)

255 
	$ƒf_drv_comm⁄_powî_úq_dißbÀ
()

257 #i‡
NRF_DRV_COMMON_POWER_CLOCK_ISR


258 if(!
	`ƒf_drv_˛ock_öô_check
())

261 
	`ƒf_drv_comm⁄_úq_dißbÀ
(
POWER_CLOCK_IRQn
);

263 
	}
}

266 #i‡
NRF_MODULE_ENABLED
(
CLOCK
)

267 
	$ƒf_drv_comm⁄_˛ock_úq_dißbÀ
()

269 #i‡
NRF_DRV_COMMON_POWER_CLOCK_ISR


270 if(!
	`ƒf_drv_powî_öô_check
())

273 
	`ƒf_drv_comm⁄_úq_dißbÀ
(
POWER_CLOCK_IRQn
);

275 
	}
}

278 #i‡
NRF_DRV_COMMON_POWER_CLOCK_ISR


279 
	$POWER_CLOCK_IRQH™dÀr
()

281 
	`ƒf_drv_˛ock_⁄IRQ
();

282 
	`ƒf_drv_powî_⁄IRQ
();

284 
	`ƒf_drv_˛ock_⁄IRQ
();

285 
	`ƒf_drv_powî_⁄IRQ
();

286 
	}
}

290 
	$ƒf_drv_comm⁄_úq_íabÀ
(
IRQn_Ty≥
 
IRQn
, 
uöt8_t
 
¥i‹ôy
)

292 
	`INTERRUPT_PRIORITY_ASSERT
(
¥i‹ôy
);

294 
	`NVIC_SëPri‹ôy
(
IRQn
, 
¥i‹ôy
);

295 
	`NVIC_CÀ¨PídögIRQ
(
IRQn
);

296 
	`NVIC_E«bÀIRQ
(
IRQn
);

297 
	}
}

	@D:\Private\Programing\MCU\Nordic\ble_app_template\nRF5_SDK_12.3.0_d7731ad\components\drivers_nrf\gpiote\nrf_drv_gpiote.c

41 
	~"sdk_comm⁄.h
"

42 #i‡
NRF_MODULE_ENABLED
(
GPIOTE
)

43 
	~"ƒf_drv_gpiŸe.h
"

44 
	~"ƒf_drv_comm⁄.h
"

45 
	~"≠p_utû_∂©f‹m.h
"

46 
	~"ƒf_as£π.h
"

47 
	~"ƒf_bômask.h
"

48 
	~<°rög.h
>

50 
	#NRF_LOG_MODULE_NAME
 "GPIOTE"

	)

52 #i‡
GPIOTE_CONFIG_LOG_ENABLED


53 
	#NRF_LOG_LEVEL
 
GPIOTE_CONFIG_LOG_LEVEL


	)

54 
	#NRF_LOG_INFO_COLOR
 
GPIOTE_CONFIG_INFO_COLOR


	)

55 
	#NRF_LOG_DEBUG_COLOR
 
GPIOTE_CONFIG_DEBUG_COLOR


	)

57 
	#NRF_LOG_LEVEL
 0

	)

59 
	~"ƒf_log.h
"

60 
	~"ƒf_log_˘æ.h
"

63 
INTERRUPT_PRIORITY_VALIDATION
(
GPIOTE_CONFIG_IRQ_PRIORITY
);

65 
	#FORBIDDEN_HANDLER_ADDRESS
 ((
ƒf_drv_gpiŸe_evt_h™dÀr_t
)
UINT32_MAX
)

	)

66 
	#PIN_NOT_USED
 (-1)

	)

67 
	#PIN_USED
 (-2)

	)

68 
	#NO_CHANNELS
 (-1)

	)

69 
	#SENSE_FIELD_POS
 (6)

	)

70 
	#SENSE_FIELD_MASK
 (0xC0)

	)

77 
	#TE_IDX_TO_EVENT_ADDR
(
idx
Ë(
ƒf_gpiŸe_evíts_t
)((
uöt32_t
)
NRF_GPIOTE_EVENTS_IN_0
 + \

78 ((
uöt32_t
Ë* (
idx
)))

	)

85 
	#TE_OUT_IDX_TO_TASK_ADDR
(
idx
Ë(
ƒf_gpiŸe_èsks_t
)((
uöt32_t
)
NRF_GPIOTE_TASKS_OUT_0
 + \

86 ((
uöt32_t
Ë* (
idx
)))

	)

88 #i‡
deföed
(
GPIOTE_FEATURE_SET_PRESENT
Ë|| deföed(
__SDK_DOXYGEN__
)

94 
	#TE_SET_IDX_TO_TASK_ADDR
(
idx
Ë(
ƒf_gpiŸe_èsks_t
)((
uöt32_t
)
NRF_GPIOTE_TASKS_SET_0
 + \

95 ((
uöt32_t
Ë* (
idx
)))

	)

99 #i‡
deföed
(
GPIOTE_FEATURE_CLR_PRESENT
Ë|| deföed(
__SDK_DOXYGEN__
)

105 
	#TE_CLR_IDX_TO_TASK_ADDR
(
idx
Ë(
ƒf_gpiŸe_èsks_t
)((
uöt32_t
)
NRF_GPIOTE_TASKS_CLR_0
 + \

106 ((
uöt32_t
Ë* (
idx
)))

	)

113 
ƒf_drv_gpiŸe_evt_h™dÀr_t
 
	mh™dÀrs
[
GPIOTE_CH_NUM
 + 
GPIOTE_CONFIG_NUM_OF_LOW_POWER_EVENTS
];

114 
öt8_t
 
	mpö_assignmíts
[
NUMBER_OF_PINS
];

115 
öt8_t
 
	mp‹t_h™dÀrs_pös
[
GPIOTE_CONFIG_NUM_OF_LOW_POWER_EVENTS
];

116 
ƒf_drv_°©e_t
 
	m°©e
;

117 } 
	tgpiŸe_c⁄åﬁ_block_t
;

119 
gpiŸe_c⁄åﬁ_block_t
 
	gm_cb
;

121 
__STATIC_INLINE
 
boﬁ
 
	$pö_ö_u£
(
uöt32_t
 
pö
)

123  (
m_cb
.
pö_assignmíts
[
pö
] !
PIN_NOT_USED
);

124 
	}
}

127 
__STATIC_INLINE
 
boﬁ
 
	$pö_ö_u£_as_n⁄_èsk_out
(
uöt32_t
 
pö
)

129  (
m_cb
.
pö_assignmíts
[
pö
] =
PIN_USED
);

130 
	}
}

133 
__STATIC_INLINE
 
boﬁ
 
	$pö_ö_u£_by_ã
(
uöt32_t
 
pö
)

135  (
m_cb
.
pö_assignmíts
[
pö
] >= 0 && m_cb.pin_assignments[pin] <

136 
GPIOTE_CH_NUM
Ë? 
åue
 : 
Ál£
;

137 
	}
}

140 
__STATIC_INLINE
 
boﬁ
 
	$pö_ö_u£_by_p‹t
(
uöt32_t
 
pö
)

142  (
m_cb
.
pö_assignmíts
[
pö
] >
GPIOTE_CH_NUM
);

143 
	}
}

146 
__STATIC_INLINE
 
boﬁ
 
	$pö_ö_u£_by_gpiŸe
(
uöt32_t
 
pö
)

148  (
m_cb
.
pö_assignmíts
[
pö
] >= 0);

149 
	}
}

152 
__STATIC_INLINE
 
	$pö_ö_u£_by_ã_£t
(
uöt32_t
 
pö
,

153 
uöt32_t
 
ch™√l_id
,

154 
ƒf_drv_gpiŸe_evt_h™dÀr_t
 
h™dÀr
,

155 
boﬁ
 
is_ch™√l
)

157 
m_cb
.
pö_assignmíts
[
pö
] = 
ch™√l_id
;

158 
m_cb
.
h™dÀrs
[
ch™√l_id
] = 
h™dÀr
;

159 i‡(!
is_ch™√l
)

161 
m_cb
.
p‹t_h™dÀrs_pös
[
ch™√l_id
 - 
GPIOTE_CH_NUM
] = (
öt8_t
)
pö
;

163 
	}
}

166 
__STATIC_INLINE
 
	$pö_ö_u£_£t
(
uöt32_t
 
pö
)

168 
m_cb
.
pö_assignmíts
[
pö
] = 
PIN_USED
;

169 
	}
}

172 
__STATIC_INLINE
 
	$pö_ö_u£_˛ór
(
uöt32_t
 
pö
)

174 
m_cb
.
pö_assignmíts
[
pö
] = 
PIN_NOT_USED
;

175 
	}
}

178 
__STATIC_INLINE
 
öt8_t
 
	$ch™√l_p‹t_gë
(
uöt32_t
 
pö
)

180  
m_cb
.
pö_assignmíts
[
pö
];

181 
	}
}

184 
__STATIC_INLINE
 
ƒf_drv_gpiŸe_evt_h™dÀr_t
 
	$ch™√l_h™dÀr_gë
(
uöt32_t
 
ch™√l
)

186  
m_cb
.
h™dÀrs
[
ch™√l
];

187 
	}
}

190 
öt8_t
 
	$ch™√l_p‹t_Æloc
(
uöt32_t
 
pö
, 
ƒf_drv_gpiŸe_evt_h™dÀr_t
 
h™dÀr
, 
boﬁ
 
ch™√l
)

192 
öt8_t
 
ch™√l_id
 = 
NO_CHANNELS
;

193 
uöt32_t
 
i
;

195 
uöt32_t
 
°¨t_idx
 = 
ch™√l
 ? 0 : 
GPIOTE_CH_NUM
;

196 
uöt32_t
 
íd_idx
 =

197 
ch™√l
 ? 
GPIOTE_CH_NUM
 : (GPIOTE_CH_NUM + 
GPIOTE_CONFIG_NUM_OF_LOW_POWER_EVENTS
);

201 
i
 = 
°¨t_idx
; i < 
íd_idx
; i++)

203 i‡(
m_cb
.
h™dÀrs
[
i
] =
FORBIDDEN_HANDLER_ADDRESS
)

205 
	`pö_ö_u£_by_ã_£t
(
pö
, 
i
, 
h™dÀr
, 
ch™√l
);

206 
ch™√l_id
 = 
i
;

211  
ch™√l_id
;

212 
	}
}

215 
	$ch™√l_‰ì
(
uöt8_t
 
ch™√l_id
)

217 
m_cb
.
h™dÀrs
[
ch™√l_id
] = 
FORBIDDEN_HANDLER_ADDRESS
;

218 i‡(
ch™√l_id
 >
GPIOTE_CH_NUM
)

220 
m_cb
.
p‹t_h™dÀrs_pös
[
ch™√l_id
 - 
GPIOTE_CH_NUM
] = (
öt8_t
)
PIN_NOT_USED
;

222 
	}
}

225 
ªt_code_t
 
	$ƒf_drv_gpiŸe_öô
()

227 
ªt_code_t
 
îr_code
;

229 i‡(
m_cb
.
°©e
 !
NRF_DRV_STATE_UNINITIALIZED
)

231 
îr_code
 = 
NRF_ERROR_INVALID_STATE
;

232 
	`NRF_LOG_WARNING
("Function: %s,Érror code: %s.\r\n",

233 (
uöt32_t
)
__func__
,

234 (
uöt32_t
)
	`ERR_TO_STR
(
îr_code
));

235  
îr_code
;

238 
uöt8_t
 
i
;

240 
i
 = 0; i < 
NUMBER_OF_PINS
; i++)

242 
	`pö_ö_u£_˛ór
(
i
);

245 
i
 = 0; i < (
GPIOTE_CH_NUM
 + 
GPIOTE_CONFIG_NUM_OF_LOW_POWER_EVENTS
); i++)

247 
	`ch™√l_‰ì
(
i
);

250 
	`ƒf_drv_comm⁄_úq_íabÀ
(
GPIOTE_IRQn
, 
GPIOTE_CONFIG_IRQ_PRIORITY
);

251 
	`ƒf_gpiŸe_evít_˛ór
(
NRF_GPIOTE_EVENTS_PORT
);

252 
	`ƒf_gpiŸe_öt_íabÀ
(
GPIOTE_INTENSET_PORT_Msk
);

253 
m_cb
.
°©e
 = 
NRF_DRV_STATE_INITIALIZED
;

255 
îr_code
 = 
NRF_SUCCESS
;

256 
	`NRF_LOG_INFO
("Fun˘i⁄: %s,Éº‹ code: %s.\r\n", (
uöt32_t
)
__func__
,

257 (
uöt32_t
)
	`ERR_TO_STR
(
îr_code
));

258  
îr_code
;

259 
	}
}

262 
boﬁ
 
	$ƒf_drv_gpiŸe_is_öô
()

264  (
m_cb
.
°©e
 !
NRF_DRV_STATE_UNINITIALIZED
Ë? 
åue
 : 
Ál£
;

265 
	}
}

268 
	$ƒf_drv_gpiŸe_unöô
()

270 
	`ASSERT
(
m_cb
.
°©e
 !
NRF_DRV_STATE_UNINITIALIZED
);

272 
uöt32_t
 
i
;

274 
i
 = 0; i < 
NUMBER_OF_PINS
; i++)

276 i‡(
	`pö_ö_u£_as_n⁄_èsk_out
(
i
))

278 
	`ƒf_drv_gpiŸe_out_unöô
(
i
);

280 i‡–
	`pö_ö_u£_by_gpiŸe
(
i
))

285 
	`ƒf_drv_gpiŸe_ö_unöô
(
i
);

288 
m_cb
.
°©e
 = 
NRF_DRV_STATE_UNINITIALIZED
;

289 
	`NRF_LOG_INFO
("Uninitialized.\r\n");

290 
	}
}

293 
ªt_code_t
 
	$ƒf_drv_gpiŸe_out_öô
(
ƒf_drv_gpiŸe_pö_t
 
pö
,

294 
ƒf_drv_gpiŸe_out_c⁄fig_t
 c⁄° * 
p_c⁄fig
)

296 
	`ASSERT
(
pö
 < 
NUMBER_OF_PINS
);

297 
	`ASSERT
(
m_cb
.
°©e
 =
NRF_DRV_STATE_INITIALIZED
);

298 
	`ASSERT
(
p_c⁄fig
);

300 
ªt_code_t
 
îr_code
 = 
NRF_SUCCESS
;

302 i‡(
	`pö_ö_u£
(
pö
))

304 
îr_code
 = 
NRF_ERROR_INVALID_STATE
;

308 i‡(
p_c⁄fig
->
èsk_pö
)

310 
öt8_t
 
ch™√l
 = 
	`ch™√l_p‹t_Æloc
(
pö
, 
NULL
, 
åue
);

312 i‡(
ch™√l
 !
NO_CHANNELS
)

314 
	`ƒf_gpiŸe_èsk_c⁄figuª
(
ch™√l
, 
pö
, 
p_c⁄fig
->
a˘i⁄
,Ö_c⁄fig->
öô_°©e
);

318 
îr_code
 = 
NRF_ERROR_NO_MEM
;

323 
	`pö_ö_u£_£t
(
pö
);

326 i‡(
îr_code
 =
NRF_SUCCESS
)

328 i‡(
p_c⁄fig
->
öô_°©e
 =
NRF_GPIOTE_INITIAL_VALUE_HIGH
)

330 
	`ƒf_gpio_pö_£t
(
pö
);

334 
	`ƒf_gpio_pö_˛ór
(
pö
);

337 
	`ƒf_gpio_cfg_ouçut
(
pö
);

341 
	`NRF_LOG_INFO
("Fun˘i⁄: %s,Éº‹ code: %s.\r\n", (
uöt32_t
)
__func__
,

342 (
uöt32_t
)
	`ERR_TO_STR
(
îr_code
));

343  
îr_code
;

344 
	}
}

347 
	$ƒf_drv_gpiŸe_out_unöô
(
ƒf_drv_gpiŸe_pö_t
 
pö
)

349 
	`ASSERT
(
pö
 < 
NUMBER_OF_PINS
);

350 
	`ASSERT
(
	`pö_ö_u£
(
pö
));

352 i‡(
	`pö_ö_u£_by_ã
(
pö
))

354 
	`ch™√l_‰ì
((
uöt8_t
)
	`ch™√l_p‹t_gë
(
pö
));

355 
	`ƒf_gpiŸe_ã_deÁu…
(
	`ch™√l_p‹t_gë
(
pö
));

357 
	`pö_ö_u£_˛ór
(
pö
);

359 
	`ƒf_gpio_cfg_deÁu…
(
pö
);

360 
	}
}

363 
	$ƒf_drv_gpiŸe_out_£t
(
ƒf_drv_gpiŸe_pö_t
 
pö
)

365 
	`ASSERT
(
pö
 < 
NUMBER_OF_PINS
);

366 
	`ASSERT
(
	`pö_ö_u£
(
pö
));

367 
	`ASSERT
(!
	`pö_ö_u£_by_ã
(
pö
))

369 
	`ƒf_gpio_pö_£t
(
pö
);

370 
	}
}

373 
	$ƒf_drv_gpiŸe_out_˛ór
(
ƒf_drv_gpiŸe_pö_t
 
pö
)

375 
	`ASSERT
(
pö
 < 
NUMBER_OF_PINS
);

376 
	`ASSERT
(
	`pö_ö_u£
(
pö
));

377 
	`ASSERT
(!
	`pö_ö_u£_by_ã
(
pö
))

379 
	`ƒf_gpio_pö_˛ór
(
pö
);

380 
	}
}

383 
	$ƒf_drv_gpiŸe_out_toggÀ
(
ƒf_drv_gpiŸe_pö_t
 
pö
)

385 
	`ASSERT
(
pö
 < 
NUMBER_OF_PINS
);

386 
	`ASSERT
(
	`pö_ö_u£
(
pö
));

387 
	`ASSERT
(!
	`pö_ö_u£_by_ã
(
pö
))

389 
	`ƒf_gpio_pö_toggÀ
(
pö
);

390 
	}
}

393 
	$ƒf_drv_gpiŸe_out_èsk_íabÀ
(
ƒf_drv_gpiŸe_pö_t
 
pö
)

395 
	`ASSERT
(
pö
 < 
NUMBER_OF_PINS
);

396 
	`ASSERT
(
	`pö_ö_u£
(
pö
));

397 
	`ASSERT
(
	`pö_ö_u£_by_ã
(
pö
))

399 
	`ƒf_gpiŸe_èsk_íabÀ
(
m_cb
.
pö_assignmíts
[
pö
]);

400 
	}
}

403 
	$ƒf_drv_gpiŸe_out_èsk_dißbÀ
(
ƒf_drv_gpiŸe_pö_t
 
pö
)

405 
	`ASSERT
(
pö
 < 
NUMBER_OF_PINS
);

406 
	`ASSERT
(
	`pö_ö_u£
(
pö
));

407 
	`ASSERT
(
	`pö_ö_u£_by_ã
(
pö
))

409 
	`ƒf_gpiŸe_èsk_dißbÀ
(
m_cb
.
pö_assignmíts
[
pö
]);

410 
	}
}

413 
uöt32_t
 
	$ƒf_drv_gpiŸe_out_èsk_addr_gë
(
ƒf_drv_gpiŸe_pö_t
 
pö
)

415 
	`ASSERT
(
pö
 < 
NUMBER_OF_PINS
);

416 
	`ASSERT
(
	`pö_ö_u£_by_ã
(
pö
));

418 
ƒf_gpiŸe_èsks_t
 
èsk
 = 
	`TE_OUT_IDX_TO_TASK_ADDR
(
	`ch™√l_p‹t_gë
(
pö
));

419  
	`ƒf_gpiŸe_èsk_addr_gë
(
èsk
);

420 
	}
}

423 #i‡
deföed
(
GPIOTE_FEATURE_SET_PRESENT
)

424 
uöt32_t
 
	$ƒf_drv_gpiŸe_£t_èsk_addr_gë
(
ƒf_drv_gpiŸe_pö_t
 
pö
)

426 
	`ASSERT
(
pö
 < 
NUMBER_OF_PINS
);

427 
	`ASSERT
(
	`pö_ö_u£_by_ã
(
pö
));

429 
ƒf_gpiŸe_èsks_t
 
èsk
 = 
	`TE_SET_IDX_TO_TASK_ADDR
(
	`ch™√l_p‹t_gë
(
pö
));

430  
	`ƒf_gpiŸe_èsk_addr_gë
(
èsk
);

431 
	}
}

436 #i‡
deföed
(
GPIOTE_FEATURE_CLR_PRESENT
)

437 
uöt32_t
 
	$ƒf_drv_gpiŸe_˛r_èsk_addr_gë
(
ƒf_drv_gpiŸe_pö_t
 
pö
)

439 
	`ASSERT
(
pö
 < 
NUMBER_OF_PINS
);

440 
	`ASSERT
(
	`pö_ö_u£_by_ã
(
pö
));

442 
ƒf_gpiŸe_èsks_t
 
èsk
 = 
	`TE_CLR_IDX_TO_TASK_ADDR
(
	`ch™√l_p‹t_gë
(
pö
));

443  
	`ƒf_gpiŸe_èsk_addr_gë
(
èsk
);

444 
	}
}

449 
	$ƒf_drv_gpiŸe_out_èsk_f‹˚
(
ƒf_drv_gpiŸe_pö_t
 
pö
, 
uöt8_t
 
°©e
)

451 
	`ASSERT
(
pö
 < 
NUMBER_OF_PINS
);

452 
	`ASSERT
(
	`pö_ö_u£
(
pö
));

453 
	`ASSERT
(
	`pö_ö_u£_by_ã
(
pö
));

455 
ƒf_gpiŸe_outöô_t
 
öô_vÆ
 =

456 
°©e
 ? 
NRF_GPIOTE_INITIAL_VALUE_HIGH
 : 
NRF_GPIOTE_INITIAL_VALUE_LOW
;

457 
	`ƒf_gpiŸe_èsk_f‹˚
(
m_cb
.
pö_assignmíts
[
pö
], 
öô_vÆ
);

458 
	}
}

461 
	$ƒf_drv_gpiŸe_out_èsk_åiggî
(
ƒf_drv_gpiŸe_pö_t
 
pö
)

463 
	`ASSERT
(
pö
 < 
NUMBER_OF_PINS
);

464 
	`ASSERT
(
	`pö_ö_u£
(
pö
));

465 
	`ASSERT
(
	`pö_ö_u£_by_ã
(
pö
));

467 
ƒf_gpiŸe_èsks_t
 
èsk
 = 
	`TE_OUT_IDX_TO_TASK_ADDR
(
	`ch™√l_p‹t_gë
(
pö
));

468 
	`ƒf_gpiŸe_èsk_£t
(
èsk
);

469 
	}
}

472 #i‡
deföed
(
GPIOTE_FEATURE_SET_PRESENT
)

473 
	$ƒf_drv_gpiŸe_£t_èsk_åiggî
(
ƒf_drv_gpiŸe_pö_t
 
pö
)

475 
	`ASSERT
(
pö
 < 
NUMBER_OF_PINS
);

476 
	`ASSERT
(
	`pö_ö_u£
(
pö
));

477 
	`ASSERT
(
	`pö_ö_u£_by_ã
(
pö
));

479 
ƒf_gpiŸe_èsks_t
 
èsk
 = 
	`TE_SET_IDX_TO_TASK_ADDR
(
	`ch™√l_p‹t_gë
(
pö
));

480 
	`ƒf_gpiŸe_èsk_£t
(
èsk
);

481 
	}
}

486 #i‡ 
deföed
(
GPIOTE_FEATURE_CLR_PRESENT
)

487 
	$ƒf_drv_gpiŸe_˛r_èsk_åiggî
(
ƒf_drv_gpiŸe_pö_t
 
pö
)

489 
	`ASSERT
(
pö
 < 
NUMBER_OF_PINS
);

490 
	`ASSERT
(
	`pö_ö_u£
(
pö
));

491 
	`ASSERT
(
	`pö_ö_u£_by_ã
(
pö
));

493 
ƒf_gpiŸe_èsks_t
 
èsk
 = 
	`TE_CLR_IDX_TO_TASK_ADDR
(
	`ch™√l_p‹t_gë
(
pö
));

494 
	`ƒf_gpiŸe_èsk_£t
(
èsk
);

495 
	}
}

500 
ªt_code_t
 
	$ƒf_drv_gpiŸe_ö_öô
(
ƒf_drv_gpiŸe_pö_t
 
pö
,

501 
ƒf_drv_gpiŸe_ö_c⁄fig_t
 c⁄° * 
p_c⁄fig
,

502 
ƒf_drv_gpiŸe_evt_h™dÀr_t
 
evt_h™dÀr
)

504 
	`ASSERT
(
pö
 < 
NUMBER_OF_PINS
);

505 
ªt_code_t
 
îr_code
 = 
NRF_SUCCESS
;

508 i‡(
	`pö_ö_u£_by_gpiŸe
(
pö
))

510 
îr_code
 = 
NRF_ERROR_INVALID_STATE
;

514 
öt8_t
 
ch™√l
 = 
	`ch™√l_p‹t_Æloc
(
pö
, 
evt_h™dÀr
, 
p_c⁄fig
->
hi_accuøcy
);

515 i‡(
ch™√l
 !
NO_CHANNELS
)

517 i‡(
p_c⁄fig
->
is_w©chî
)

519 
	`ƒf_gpio_cfg_w©chî
(
pö
);

523 
	`ƒf_gpio_cfg_öput
(
pö
, 
p_c⁄fig
->
puŒ
);

526 i‡(
p_c⁄fig
->
hi_accuøcy
)

528 
	`ƒf_gpiŸe_evít_c⁄figuª
(
ch™√l
, 
pö
, 
p_c⁄fig
->
£n£
);

532 
m_cb
.
p‹t_h™dÀrs_pös
[
ch™√l
 -

533 
GPIOTE_CH_NUM
] |(
p_c⁄fig
->
£n£
Ë<< 
SENSE_FIELD_POS
;

538 
îr_code
 = 
NRF_ERROR_NO_MEM
;

542 
	`NRF_LOG_INFO
("Fun˘i⁄: %s,Éº‹ code: %s.\r\n", (
uöt32_t
)
__func__
,

543 (
uöt32_t
)
	`ERR_TO_STR
(
îr_code
));

544  
îr_code
;

545 
	}
}

548 
	$ƒf_drv_gpiŸe_ö_evít_íabÀ
(
ƒf_drv_gpiŸe_pö_t
 
pö
, 
boﬁ
 
öt_íabÀ
)

550 
	`ASSERT
(
pö
 < 
NUMBER_OF_PINS
);

551 
	`ASSERT
(
	`pö_ö_u£_by_gpiŸe
(
pö
));

552 i‡(
	`pö_ö_u£_by_p‹t
(
pö
))

554 
uöt8_t
 
pö_™d_£n£
 =

555 
m_cb
.
p‹t_h™dÀrs_pös
[
	`ch™√l_p‹t_gë
(
pö
Ë- 
GPIOTE_CH_NUM
];

556 
ƒf_gpiŸe_pﬁ¨ôy_t
 
pﬁ¨ôy
 =

557 (
ƒf_gpiŸe_pﬁ¨ôy_t
)(
pö_™d_£n£
 >> 
SENSE_FIELD_POS
);

558 
ƒf_gpio_pö_£n£_t
 
£n£
;

559 i‡(
pﬁ¨ôy
 =
NRF_GPIOTE_POLARITY_TOGGLE
)

562 
£n£
 = (
	`ƒf_gpio_pö_ªad
(
pö
)) ?

563 
NRF_GPIO_PIN_SENSE_LOW
 : 
NRF_GPIO_PIN_SENSE_HIGH
;

567 
£n£
 = (
pﬁ¨ôy
 =
NRF_GPIOTE_POLARITY_LOTOHI
) ?

568 
NRF_GPIO_PIN_SENSE_HIGH
 : 
NRF_GPIO_PIN_SENSE_LOW
;

570 
	`ƒf_gpio_cfg_£n£_£t
(
pö
, 
£n£
);

572 i‡(
	`pö_ö_u£_by_ã
(
pö
))

574 
öt32_t
 
ch™√l
 = (öt32_t)
	`ch™√l_p‹t_gë
(
pö
);

575 
ƒf_gpiŸe_evíts_t
 
evít
 = 
	`TE_IDX_TO_EVENT_ADDR
(
ch™√l
);

577 
	`ƒf_gpiŸe_evít_íabÀ
(
ch™√l
);

579 
	`ƒf_gpiŸe_evít_˛ór
(
evít
);

580 i‡(
öt_íabÀ
)

582 
ƒf_drv_gpiŸe_evt_h™dÀr_t
 
h™dÀr
 = 
	`ch™√l_h™dÀr_gë
(
	`ch™√l_p‹t_gë
(
pö
));

584 i‡(
h™dÀr
)

586 
	`ƒf_gpiŸe_öt_íabÀ
(1 << 
ch™√l
);

590 
	}
}

593 
	$ƒf_drv_gpiŸe_ö_evít_dißbÀ
(
ƒf_drv_gpiŸe_pö_t
 
pö
)

595 
	`ASSERT
(
pö
 < 
NUMBER_OF_PINS
);

596 
	`ASSERT
(
	`pö_ö_u£_by_gpiŸe
(
pö
));

597 i‡(
	`pö_ö_u£_by_p‹t
(
pö
))

599 
	`ƒf_gpio_cfg_£n£_£t
(
pö
, 
NRF_GPIO_PIN_NOSENSE
);

601 i‡(
	`pö_ö_u£_by_ã
(
pö
))

603 
öt32_t
 
ch™√l
 = (öt32_t)
	`ch™√l_p‹t_gë
(
pö
);

604 
	`ƒf_gpiŸe_evít_dißbÀ
(
ch™√l
);

605 
	`ƒf_gpiŸe_öt_dißbÀ
(1 << 
ch™√l
);

607 
	}
}

610 
	$ƒf_drv_gpiŸe_ö_unöô
(
ƒf_drv_gpiŸe_pö_t
 
pö
)

612 
	`ASSERT
(
pö
 < 
NUMBER_OF_PINS
);

613 
	`ASSERT
(
	`pö_ö_u£_by_gpiŸe
(
pö
));

614 
	`ƒf_drv_gpiŸe_ö_evít_dißbÀ
(
pö
);

615 i‡(
	`pö_ö_u£_by_ã
(
pö
))

617 
	`ƒf_gpiŸe_ã_deÁu…
(
	`ch™√l_p‹t_gë
(
pö
));

619 
	`ƒf_gpio_cfg_deÁu…
(
pö
);

620 
	`ch™√l_‰ì
((
uöt8_t
)
	`ch™√l_p‹t_gë
(
pö
));

621 
	`pö_ö_u£_˛ór
(
pö
);

622 
	}
}

625 
boﬁ
 
	$ƒf_drv_gpiŸe_ö_is_£t
(
ƒf_drv_gpiŸe_pö_t
 
pö
)

627 
	`ASSERT
(
pö
 < 
NUMBER_OF_PINS
);

628  
	`ƒf_gpio_pö_ªad
(
pö
Ë? 
åue
 : 
Ál£
;

629 
	}
}

632 
uöt32_t
 
	$ƒf_drv_gpiŸe_ö_evít_addr_gë
(
ƒf_drv_gpiŸe_pö_t
 
pö
)

634 
	`ASSERT
(
pö
 < 
NUMBER_OF_PINS
);

635 
	`ASSERT
(
	`pö_ö_u£_by_p‹t
(
pö
Ë|| 
	`pö_ö_u£_by_ã
(pin));

637 
ƒf_gpiŸe_evíts_t
 
evít
 = 
NRF_GPIOTE_EVENTS_PORT
;

639 i‡(
	`pö_ö_u£_by_ã
(
pö
))

641 
evít
 = 
	`TE_IDX_TO_EVENT_ADDR
(
	`ch™√l_p‹t_gë
(
pö
));

643  
	`ƒf_gpiŸe_evít_addr_gë
(
evít
);

644 
	}
}

647 
	$GPIOTE_IRQH™dÀr
()

649 
uöt32_t
 
°©us
 = 0;

650 
uöt32_t
 
öput
[
GPIO_COUNT
] = {0};

653 
uöt32_t
 
i
;

654 
ƒf_gpiŸe_evíts_t
 
evít
 = 
NRF_GPIOTE_EVENTS_IN_0
;

655 
uöt32_t
 
mask
 = (uöt32_t)
NRF_GPIOTE_INT_IN0_MASK
;

657 
i
 = 0; i < 
GPIOTE_CH_NUM
; i++)

659 i‡(
	`ƒf_gpiŸe_evít_is_£t
(
evít
Ë&& 
	`ƒf_gpiŸe_öt_is_íabÀd
(
mask
))

661 
	`ƒf_gpiŸe_evít_˛ór
(
evít
);

662 
°©us
 |
mask
;

664 
mask
 <<= 1;

667 
evít
 = (
ƒf_gpiŸe_evíts_t
)((
uöt32_t
)event + (uint32_t));

672 i‡(
	`ƒf_gpiŸe_evít_is_£t
(
NRF_GPIOTE_EVENTS_PORT
))

674 
	`ƒf_gpiŸe_evít_˛ór
(
NRF_GPIOTE_EVENTS_PORT
);

675 
°©us
 |(
uöt32_t
)
NRF_GPIOTE_INT_PORT_MASK
;

676 
	`ƒf_gpio_p‹ts_ªad
(0, 
GPIO_COUNT
, 
öput
);

680 i‡(
°©us
 & 
NRF_GPIOTE_INT_IN_MASK
)

682 
mask
 = (
uöt32_t
)
NRF_GPIOTE_INT_IN0_MASK
;

684 
i
 = 0; i < 
GPIOTE_CH_NUM
; i++)

686 i‡(
mask
 & 
°©us
)

688 
ƒf_drv_gpiŸe_pö_t
 
pö
 = 
	`ƒf_gpiŸe_evít_pö_gë
(
i
);

689 
	`NRF_LOG_DEBUG
("EvíàöÇumbî: %d.\r\n", 
i
);

690 
ƒf_gpiŸe_pﬁ¨ôy_t
 
pﬁ¨ôy
 = 
	`ƒf_gpiŸe_evít_pﬁ¨ôy_gë
(
i
);

691 
ƒf_drv_gpiŸe_evt_h™dÀr_t
 
h™dÀr
 = 
	`ch™√l_h™dÀr_gë
(
i
);

692 
	`NRF_LOG_DEBUG
("Pö: %d,Öﬁ¨ôy: %d.\r\n", 
pö
, 
pﬁ¨ôy
);

693 i‡(
h™dÀr
)

695 
	`h™dÀr
(
pö
, 
pﬁ¨ôy
);

698 
mask
 <<= 1;

702 i‡(
°©us
 & (
uöt32_t
)
NRF_GPIOTE_INT_PORT_MASK
)

705 
uöt32_t
 
p‹t_idx
;

706 
uöt8_t
 
ª≥©
 = 0;

707 
uöt32_t
 
toggÀ_mask
[
GPIO_COUNT
] = {0};

708 
uöt32_t
 
pös_to_check
[
GPIO_COUNT
];

711 
p‹t_idx
 = 0;Ö‹t_idx < 
GPIO_COUNT
;Öort_idx++)

713 
pös_to_check
[
p‹t_idx
] = 0xFFFFFFFF;

718 
ª≥©
 = 0;

720 
i
 = 0; i < 
GPIOTE_CONFIG_NUM_OF_LOW_POWER_EVENTS
; i++)

722 
uöt8_t
 
pö_™d_£n£
 = 
m_cb
.
p‹t_h™dÀrs_pös
[
i
];

723 
ƒf_drv_gpiŸe_pö_t
 
pö
 = (
pö_™d_£n£
 & ~
SENSE_FIELD_MASK
);

725 i‡((
m_cb
.
p‹t_h™dÀrs_pös
[
i
] !
PIN_NOT_USED
)

726 && 
	`ƒf_bômask_bô_is_£t
(
pö
, 
pös_to_check
))

728 
ƒf_gpiŸe_pﬁ¨ôy_t
 
pﬁ¨ôy
 =

729 (
ƒf_gpiŸe_pﬁ¨ôy_t
)((
pö_™d_£n£
 &

730 
SENSE_FIELD_MASK
Ë>> 
SENSE_FIELD_POS
);

731 
ƒf_drv_gpiŸe_evt_h™dÀr_t
 
h™dÀr
 =

732 
	`ch™√l_h™dÀr_gë
(
	`ch™√l_p‹t_gë
(
pö
));

733 i‡(
h™dÀr
 || (
pﬁ¨ôy
 =
NRF_GPIOTE_POLARITY_TOGGLE
))

735 i‡(
pﬁ¨ôy
 =
NRF_GPIOTE_POLARITY_TOGGLE
)

737 
	`ƒf_bômask_bô_£t
(
pö
, 
toggÀ_mask
);

739 
ƒf_gpio_pö_£n£_t
 
£n£
 = 
	`ƒf_gpio_pö_£n£_gë
(
pö
);

740 
uöt32_t
 
pö_°©e
 = 
	`ƒf_bômask_bô_is_£t
(
pö
, 
öput
);

741 i‡((
pö_°©e
 && (
£n£
 =
NRF_GPIO_PIN_SENSE_HIGH
)) ||

742 (!
pö_°©e
 && (
£n£
 =
NRF_GPIO_PIN_SENSE_LOW
)) )

744 
	`NRF_LOG_DEBUG
("PORTÉvíàf‹Öö: %d,Öﬁ¨ôy: %d.\r\n", 
pö
,

745 
pﬁ¨ôy
);

746 i‡(
pﬁ¨ôy
 =
NRF_GPIOTE_POLARITY_TOGGLE
)

748 
ƒf_gpio_pö_£n£_t
 
√xt_£n£
 =

749 (
£n£
 =
NRF_GPIO_PIN_SENSE_HIGH
) ?

750 
NRF_GPIO_PIN_SENSE_LOW
 :

751 
NRF_GPIO_PIN_SENSE_HIGH
;

752 
	`ƒf_gpio_cfg_£n£_£t
(
pö
, 
√xt_£n£
);

753 ++
ª≥©
;

756 i‡(
h™dÀr
)

758 
	`h™dÀr
(
pö
, 
pﬁ¨ôy
);

765 i‡(
ª≥©
)

773 
uöt32_t
 
√w_öput
[
GPIO_COUNT
];

774 
boﬁ
 
öput_unch™ged
 = 
åue
;

775 
	`ƒf_gpio_p‹ts_ªad
(0, 
GPIO_COUNT
, 
√w_öput
);

778 
p‹t_idx
 = 0;Ö‹t_idx < 
GPIO_COUNT
;Öort_idx++)

780 i‡(
√w_öput
[
p‹t_idx
] !
öput
[port_idx])

782 
öput_unch™ged
 = 
Ál£
;

787 i‡(
öput_unch™ged
)

790 
ª≥©
 = 0;

795 
p‹t_idx
 = 0;Ö‹t_idx < 
GPIO_COUNT
;Öort_idx++)

797 
öput
[
p‹t_idx
] = 
√w_öput
[port_idx];

798 
pös_to_check
[
p‹t_idx
] = 
toggÀ_mask
[port_idx];

803 
ª≥©
);

805 
	}
}

	@D:\Private\Programing\MCU\Nordic\ble_app_template\nRF5_SDK_12.3.0_d7731ad\components\drivers_nrf\hal\nrf_nvmc.c

46 
	~<°dboﬁ.h
>

47 
	~"ƒf.h
"

48 
	~"ƒf_nvmc.h
"

51 
	$ƒf_nvmc_∑ge_îa£
(
uöt32_t
 
addªss
)

54 
NRF_NVMC
->
CONFIG
 = 
NVMC_CONFIG_WEN_Eí
;

55 
NRF_NVMC
->
READY
 =
NVMC_READY_READY_Busy
)

60 
NRF_NVMC
->
ERASEPAGE
 = 
addªss
;

61 
NRF_NVMC
->
READY
 =
NVMC_READY_READY_Busy
)

65 
NRF_NVMC
->
CONFIG
 = 
NVMC_CONFIG_WEN_Rí
;

66 
NRF_NVMC
->
READY
 =
NVMC_READY_READY_Busy
)

69 
	}
}

72 
	$ƒf_nvmc_wrôe_byã
(
uöt32_t
 
addªss
, 
uöt8_t
 
vÆue
)

74 
uöt32_t
 
byã_shi·
 = 
addªss
 & (uint32_t)0x03;

75 
uöt32_t
 
addªss32
 = 
addªss
 & ~
byã_shi·
;

76 
uöt32_t
 
vÆue32
 = (*(uöt32_t*)
addªss32
 & ~((uöt32_t)0xFF << (
byã_shi·
 << (uint32_t)3)));

77 
vÆue32
 = vÆue32 + ((
uöt32_t
)
vÆue
 << (
byã_shi·
 << 3));

80 
NRF_NVMC
->
CONFIG
 = (
NVMC_CONFIG_WEN_Wí
 << 
NVMC_CONFIG_WEN_Pos
);

81 
NRF_NVMC
->
READY
 =
NVMC_READY_READY_Busy
)

85 *(
uöt32_t
*)
addªss32
 = 
vÆue32
;

86 
NRF_NVMC
->
READY
 =
NVMC_READY_READY_Busy
)

90 
NRF_NVMC
->
CONFIG
 = (
NVMC_CONFIG_WEN_Rí
 << 
NVMC_CONFIG_WEN_Pos
);

93 
	}
}

95 
	$ƒf_nvmc_wrôe_w‹d
(
uöt32_t
 
addªss
, uöt32_à
vÆue
)

98 
NRF_NVMC
->
CONFIG
 = 
NVMC_CONFIG_WEN_Wí
;

99 
NRF_NVMC
->
READY
 =
NVMC_READY_READY_Busy
){

102 *(
uöt32_t
*)
addªss
 = 
vÆue
;

103 
NRF_NVMC
->
READY
 =
NVMC_READY_READY_Busy
){

106 
NRF_NVMC
->
CONFIG
 = 
NVMC_CONFIG_WEN_Rí
;

107 
NRF_NVMC
->
READY
 =
NVMC_READY_READY_Busy
)

110 
	}
}

112 
	$ƒf_nvmc_wrôe_byãs
(
uöt32_t
 
addªss
, c⁄° 
uöt8_t
 * 
§c
, uöt32_à
num_byãs
)

114 
uöt32_t
 
i
;

115 
i
=0;i<
num_byãs
;i++)

117 
	`ƒf_nvmc_wrôe_byã
(
addªss
 + 
i
,
§c
[i]);

119 
	}
}

121 
	$ƒf_nvmc_wrôe_w‹ds
(
uöt32_t
 
addªss
, c⁄° uöt32_à* 
§c
, uöt32_à
num_w‹ds
)

123 
uöt32_t
 
i
;

126 
NRF_NVMC
->
CONFIG
 = 
NVMC_CONFIG_WEN_Wí
;

127 
NRF_NVMC
->
READY
 =
NVMC_READY_READY_Busy
)

131 
i
=0;i<
num_w‹ds
;i++)

133 ((
uöt32_t
*)
addªss
)[
i
] = 
§c
[i];

134 
NRF_NVMC
->
READY
 =
NVMC_READY_READY_Busy
)

139 
NRF_NVMC
->
CONFIG
 = 
NVMC_CONFIG_WEN_Rí
;

140 
NRF_NVMC
->
READY
 =
NVMC_READY_READY_Busy
)

143 
	}
}

	@D:\Private\Programing\MCU\Nordic\ble_app_template\nRF5_SDK_12.3.0_d7731ad\components\drivers_nrf\twi_master\nrf_drv_twi.c

41 
	~"sdk_comm⁄.h
"

42 #i‡
NRF_MODULE_ENABLED
(
TWI
)

43 
	#ENABLED_TWI_COUNT
 (
TWI0_ENABLED
+
TWI1_ENABLED
)

	)

44 #i‡
ENABLED_TWI_COUNT


45 
	~"ƒf_drv_twi.h
"

46 
	~"ƒf_drv_comm⁄.h
"

47 
	~"ƒf_gpio.h
"

48 
	~"ƒf_as£π.h
"

49 
	~"≠p_utû_∂©f‹m.h
"

50 
	~"ƒf_dñay.h
"

52 
	~<°dio.h
>

54 
	#NRF_LOG_MODULE_NAME
 "TWI"

	)

56 #i‡
TWI_CONFIG_LOG_ENABLED


57 
	#NRF_LOG_LEVEL
 
TWI_CONFIG_LOG_LEVEL


	)

58 
	#NRF_LOG_INFO_COLOR
 
TWI_CONFIG_INFO_COLOR


	)

59 
	#NRF_LOG_DEBUG_COLOR
 
TWI_CONFIG_DEBUG_COLOR


	)

60 
	#EVT_TO_STR
(
evít
Ë”víà=
NRF_DRV_TWI_EVT_DONE
 ? "EVT_DONE" : \

61 (
evít
 =
NRF_DRV_TWI_EVT_ADDRESS_NACK
 ? "EVT_ADDRESS_NACK" : \

62 (
evít
 =
NRF_DRV_TWI_EVT_DATA_NACK
 ? "EVT_DATA_NACK" : "UNKNOWN ERROR"))))))

	)

63 
	#EVT_TO_STR_TWI
(
evít
Ë”víà=
NRF_TWI_EVENT_STOPPED
 ? "NRF_TWI_EVENT_STOPPED" : \

64 (
evít
 =
NRF_TWI_EVENT_RXDREADY
 ? "NRF_TWI_EVENT_RXDREADY" : \

65 (
evít
 =
NRF_TWI_EVENT_TXDSENT
 ? "NRF_TWI_EVENT_TXDSENT" : \

66 (
evít
 =
NRF_TWI_EVENT_ERROR
 ? "NRF_TWI_EVENT_ERROR" : \

67 (
evít
 =
NRF_TWI_EVENT_BB
 ? "NRF_TWI_EVENT_BB" : \

68 (
evít
 =
NRF_TWI_EVENT_SUSPENDED
 ? "NRF_TWI_EVENT_SUSPENDED" : "UNKNOWN ERROR"))))))

	)

69 
	#EVT_TO_STR_TWIM
(
evít
Ë”víà=
NRF_TWIM_EVENT_STOPPED
 ? "NRF_TWIM_EVENT_STOPPED" : \

70 (
evít
 =
NRF_TWIM_EVENT_ERROR
 ? "NRF_TWIM_EVENT_ERROR" : \

71 (
evít
 =
NRF_TWIM_EVENT_SUSPENDED
 ? "NRF_TWIM_EVENT_SUSPENDED" : \

72 (
evít
 =
NRF_TWIM_EVENT_RXSTARTED
 ? "NRF_TWIM_EVENT_RXSTARTED" : \

73 (
evít
 =
NRF_TWIM_EVENT_TXSTARTED
 ? "NRF_TWIM_EVENT_TXSTARTED" : \

74 (
evít
 =
NRF_TWIM_EVENT_LASTRX
 ? "NRF_TWIM_EVENT_LASTRX" : \

75 (
evít
 =
NRF_TWIM_EVENT_LASTTX
 ? "NRF_TWIM_EVENT_LASTTX" : "UNKNOWN ERROR")))))))

	)

76 
	#TRANSFER_TO_STR
(
ty≥
Ë—y≥ =
NRF_DRV_TWI_XFER_TX
 ? "XFER_TX" : \

77 (
ty≥
 =
NRF_DRV_TWI_XFER_RX
 ? "XFER_RX" : \

78 (
ty≥
 =
NRF_DRV_TWI_XFER_TXRX
 ? "XFER_TXRX" : \

79 (
ty≥
 =
NRF_DRV_TWI_XFER_TXTX
 ? "XFER_TXTX" : "UNKNOWN TRANSFER TYPE"))))

	)

81 
	#EVT_TO_STR
(
evít
Ë""

	)

82 
	#EVT_TO_STR_TWI
(
evít
Ë""

	)

83 
	#EVT_TO_STR_TWIM
(
evít
Ë""

	)

84 
	#TRANSFER_TO_STR
(
evít
Ë""

	)

85 
	#NRF_LOG_LEVEL
 0

	)

87 
	~"ƒf_log.h
"

88 
	~"ƒf_log_˘æ.h
"

91 
	#TWI0_IRQ_HANDLER
 
SPI0_TWI0_IRQH™dÀr


	)

92 
	#TWI1_IRQ_HANDLER
 
SPI1_TWI1_IRQH™dÀr


	)

94 #i‡(
deföed
(
TWIM_IN_USE
Ë&& deföed(
TWI_IN_USE
))

96 
	#CODE_FOR_TWIM
(
code
Ëi‡(
p_ö°™˚
->
u£_ósy_dma
Ë{ codê}

	)

97 
	#CODE_FOR_TWI
(
code
Ë{ codê}

	)

98 #ñi‡(
deföed
(
TWIM_IN_USE
Ë&& !deföed(
TWI_IN_USE
))

100 
	#CODE_FOR_TWIM
(
code
Ë{ codê}

	)

101 
	#CODE_FOR_TWI
(
code
)

	)

102 #ñi‡(!
deföed
(
TWIM_IN_USE
Ë&& deföed(
TWI_IN_USE
))

104 
	#CODE_FOR_TWIM
(
code
)

	)

105 
	#CODE_FOR_TWI
(
code
Ë{ codê}

	)

111 
	#DISABLE_ALL_INT_SHORT
 0xFFFFFFFF

	)

113 
	#SCL_PIN_INIT_CONF
 ( (
GPIO_PIN_CNF_SENSE_DißbÀd
 << 
GPIO_PIN_CNF_SENSE_Pos
) \

114 | (
GPIO_PIN_CNF_DRIVE_S0D1
 << 
GPIO_PIN_CNF_DRIVE_Pos
) \

115 | (
GPIO_PIN_CNF_PULL_PuŒup
 << 
GPIO_PIN_CNF_PULL_Pos
) \

116 | (
GPIO_PIN_CNF_INPUT_C⁄√˘
 << 
GPIO_PIN_CNF_INPUT_Pos
) \

117 | (
GPIO_PIN_CNF_DIR_I≈ut
 << 
GPIO_PIN_CNF_DIR_Pos
))

	)

118 
	#SDA_PIN_INIT_CONF
 
SCL_PIN_INIT_CONF


	)

120 
	#SDA_PIN_UNINIT_CONF
 ( (
GPIO_PIN_CNF_SENSE_DißbÀd
 << 
GPIO_PIN_CNF_SENSE_Pos
) \

121 | (
GPIO_PIN_CNF_DRIVE_H0H1
 << 
GPIO_PIN_CNF_DRIVE_Pos
) \

122 | (
GPIO_PIN_CNF_PULL_DißbÀd
 << 
GPIO_PIN_CNF_PULL_Pos
) \

123 | (
GPIO_PIN_CNF_INPUT_Disc⁄√˘
 << 
GPIO_PIN_CNF_INPUT_Pos
) \

124 | (
GPIO_PIN_CNF_DIR_I≈ut
 << 
GPIO_PIN_CNF_DIR_Pos
))

	)

125 
	#SCL_PIN_UNINIT_CONF
 
SDA_PIN_UNINIT_CONF


	)

127 
	#SCL_PIN_INIT_CONF_CLR
 ( (
GPIO_PIN_CNF_SENSE_DißbÀd
 << 
GPIO_PIN_CNF_SENSE_Pos
) \

128 | (
GPIO_PIN_CNF_DRIVE_S0D1
 << 
GPIO_PIN_CNF_DRIVE_Pos
) \

129 | (
GPIO_PIN_CNF_PULL_PuŒup
 << 
GPIO_PIN_CNF_PULL_Pos
) \

130 | (
GPIO_PIN_CNF_INPUT_C⁄√˘
 << 
GPIO_PIN_CNF_INPUT_Pos
) \

131 | (
GPIO_PIN_CNF_DIR_Ouçut
 << 
GPIO_PIN_CNF_DIR_Pos
))

	)

132 
	#SDA_PIN_INIT_CONF_CLR
 
SCL_PIN_INIT_CONF_CLR


	)

138 
ƒf_drv_twi_evt_h™dÀr_t
 
	mh™dÀr
;

139 * 
	mp_c⁄ãxt
;

140 vﬁ©ûê
uöt32_t
 
	möt_mask
;

141 
ƒf_drv_twi_x„r_desc_t
 
	mx„r_desc
;

142 
uöt32_t
 
	mÊags
;

143 
uöt8_t
 * 
	mp_cuº_buf
;

144 
uöt8_t
 
	mcuº_Àngth
;

145 
boﬁ
 
	mcuº_no_°›
;

146 
ƒf_drv_°©e_t
 
	m°©e
;

147 
boﬁ
 
	mîr‹
;

148 vﬁ©ûê
boﬁ
 
	mbusy
;

149 
boﬁ
 
	mª≥©ed
;

150 
uöt8_t
 
	mbyãs_å™s„ºed
;

151 
boﬁ
 
	mhﬁd_bus_unöô
;

152 } 
	ttwi_c⁄åﬁ_block_t
;

154 
twi_c⁄åﬁ_block_t
 
	gm_cb
[
ENABLED_TWI_COUNT
];

156 #i‡
NRF_MODULE_ENABLED
(
PERIPHERAL_RESOURCE_SHARING
)

157 
	#IRQ_HANDLER_NAME
(
n
Ë
úq_h™dÀr_f‹_ö°™˚_
##
	)
n

158 
	#IRQ_HANDLER
(
n
Ë
	`IRQ_HANDLER_NAME
“)()

	)

160 #i‡
NRF_MODULE_ENABLED
(
TWI0
)

161 
IRQ_HANDLER
(0);

163 #i‡
NRF_MODULE_ENABLED
(
TWI1
)

164 
IRQ_HANDLER
(1);

166 
ƒf_drv_úq_h™dÀr_t
 c⁄° 
	gm_úq_h™dÀrs
[
ENABLED_TWI_COUNT
] = {

167 #i‡
NRF_MODULE_ENABLED
(
TWI0
)

168 
IRQ_HANDLER_NAME
(0),

170 #i‡
NRF_MODULE_ENABLED
(
TWI1
)

171 
IRQ_HANDLER_NAME
(1),

175 
	#IRQ_HANDLER
(
n
Ë
SPI
##n##
_TWI
##n##
	`_IRQH™dÀr
()

	)

178 
ªt_code_t
 
	$twi_¥o˚ss_îr‹
(
uöt32_t
 
îr‹§c
)

180 
ªt_code_t
 
ªt
 = 
NRF_ERROR_INTERNAL
;

182 i‡(
îr‹§c
 & 
NRF_TWI_ERROR_OVERRUN
)

184 
ªt
 = 
NRF_ERROR_DRV_TWI_ERR_OVERRUN
;;

187 i‡(
îr‹§c
 & 
NRF_TWI_ERROR_ADDRESS_NACK
)

189 
ªt
 = 
NRF_ERROR_DRV_TWI_ERR_ANACK
;

192 i‡(
îr‹§c
 & 
NRF_TWI_ERROR_DATA_NACK
)

194 
ªt
 = 
NRF_ERROR_DRV_TWI_ERR_DNACK
;

197  
ªt
;

198 
	}
}

200 
	$twi_˛ór_bus
(
ƒf_drv_twi_c⁄fig_t
 c⁄° * 
p_c⁄fig
)

202 
NRF_GPIO
->
PIN_CNF
[
p_c⁄fig
->
s˛
] = 
SCL_PIN_INIT_CONF
;

203 
NRF_GPIO
->
PIN_CNF
[
p_c⁄fig
->
sda
] = 
SDA_PIN_INIT_CONF
;

205 
	`ƒf_gpio_pö_£t
(
p_c⁄fig
->
s˛
);

206 
	`ƒf_gpio_pö_£t
(
p_c⁄fig
->
sda
);

208 
NRF_GPIO
->
PIN_CNF
[
p_c⁄fig
->
s˛
] = 
SCL_PIN_INIT_CONF_CLR
;

209 
NRF_GPIO
->
PIN_CNF
[
p_c⁄fig
->
sda
] = 
SDA_PIN_INIT_CONF_CLR
;

211 
	`ƒf_dñay_us
(4);

213 
i
 = 0; i < 9; i++)

215 i‡(
	`ƒf_gpio_pö_ªad
(
p_c⁄fig
->
sda
))

217 i‡(
i
 == 0)

226 
	`ƒf_gpio_pö_˛ór
(
p_c⁄fig
->
s˛
);

227 
	`ƒf_dñay_us
(4);

228 
	`ƒf_gpio_pö_£t
(
p_c⁄fig
->
s˛
);

229 
	`ƒf_dñay_us
(4);

231 
	`ƒf_gpio_pö_˛ór
(
p_c⁄fig
->
sda
);

232 
	`ƒf_dñay_us
(4);

233 
	`ƒf_gpio_pö_£t
(
p_c⁄fig
->
sda
);

234 
	}
}

236 
ªt_code_t
 
	$ƒf_drv_twi_öô
(
ƒf_drv_twi_t
 c⁄° * 
p_ö°™˚
,

237 
ƒf_drv_twi_c⁄fig_t
 c⁄° * 
p_c⁄fig
,

238 
ƒf_drv_twi_evt_h™dÀr_t
 
evít_h™dÀr
,

239 * 
p_c⁄ãxt
)

241 
	`ASSERT
(
p_c⁄fig
);

242 
	`ASSERT
(
p_c⁄fig
->
s˛
 !p_c⁄fig->
sda
);

243 
twi_c⁄åﬁ_block_t
 * 
p_cb
 = &
m_cb
[
p_ö°™˚
->
drv_ö°_idx
];

244 
ªt_code_t
 
îr_code
;

246 i‡(
p_cb
->
°©e
 !
NRF_DRV_STATE_UNINITIALIZED
)

248 
îr_code
 = 
NRF_ERROR_INVALID_STATE
;

249 
	`NRF_LOG_WARNING
("Fun˘i⁄: %s,Éº‹ code: %s.\r\n", (
uöt32_t
)
__func__
, (uöt32_t)
	`ERR_TO_STR
(
îr_code
));

250  
îr_code
;

253 #i‡
	`NRF_MODULE_ENABLED
(
PERIPHERAL_RESOURCE_SHARING
)

254 i‡(
	`ƒf_drv_comm⁄_≥r_ªs_acquúe
(
p_ö°™˚
->
ªg
.
p_twi
,

255 
m_úq_h™dÀrs
[
p_ö°™˚
->
drv_ö°_idx
]Ë!
NRF_SUCCESS
)

257 
îr_code
 = 
NRF_ERROR_BUSY
;

258 
	`NRF_LOG_WARNING
("Fun˘i⁄: %s,Éº‹ code: %s.\r\n", (
uöt32_t
)
__func__
, (uöt32_t)
	`ERR_TO_STR
(
îr_code
));

259  
îr_code
;

263 
p_cb
->
h™dÀr
 = 
evít_h™dÀr
;

264 
p_cb
->
p_c⁄ãxt
 =Ö_context;

265 
p_cb
->
öt_mask
 = 0;

266 
p_cb
->
ª≥©ed
 = 
Ál£
;

267 
p_cb
->
busy
 = 
Ál£
;

268 
p_cb
->
hﬁd_bus_unöô
 = 
p_c⁄fig
->hold_bus_uninit;

270 if(
p_c⁄fig
->
˛ór_bus_öô
)

273 
	`twi_˛ór_bus
(
p_c⁄fig
);

280 
NRF_GPIO
->
PIN_CNF
[
p_c⁄fig
->
s˛
] = 
SCL_PIN_INIT_CONF
;

281 
NRF_GPIO
->
PIN_CNF
[
p_c⁄fig
->
sda
] = 
SDA_PIN_INIT_CONF
;

283 
CODE_FOR_TWIM


285 
NRF_TWIM_Ty≥
 * 
p_twim
 = 
p_ö°™˚
->
ªg
.p_twim;

286 
	`ƒf_twim_pös_£t
(
p_twim
, 
p_c⁄fig
->
s˛
,Ö_c⁄fig->
sda
);

287 
	`ƒf_twim_‰equícy_£t
(
p_twim
,

288 (
ƒf_twim_‰equícy_t
)
p_c⁄fig
->
‰equícy
);

290 
CODE_FOR_TWI


292 
NRF_TWI_Ty≥
 * 
p_twi
 = 
p_ö°™˚
->
ªg
.p_twi;

293 
	`ƒf_twi_pös_£t
(
p_twi
, 
p_c⁄fig
->
s˛
,Ö_c⁄fig->
sda
);

294 
	`ƒf_twi_‰equícy_£t
(
p_twi
,

295 (
ƒf_twi_‰equícy_t
)
p_c⁄fig
->
‰equícy
);

298 i‡(
p_cb
->
h™dÀr
)

300 
CODE_FOR_TWIM


302 
	`ƒf_drv_comm⁄_úq_íabÀ
(
	`ƒf_drv_gë_IRQn
((*)
p_ö°™˚
->
ªg
.
p_twim
),

303 
p_c⁄fig
->
öãºu±_¥i‹ôy
);

305 
CODE_FOR_TWI


307 
	`ƒf_drv_comm⁄_úq_íabÀ
(
	`ƒf_drv_gë_IRQn
((*)
p_ö°™˚
->
ªg
.
p_twi
),

308 
p_c⁄fig
->
öãºu±_¥i‹ôy
);

312 
p_cb
->
°©e
 = 
NRF_DRV_STATE_INITIALIZED
;

314 
îr_code
 = 
NRF_SUCCESS
;

315 
	`NRF_LOG_INFO
("Fun˘i⁄: %s,Éº‹ code: %s.\r\n", (
uöt32_t
)
__func__
, (uöt32_t)
	`ERR_TO_STR
(
îr_code
));

316  
îr_code
;

317 
	}
}

319 
	$ƒf_drv_twi_unöô
(
ƒf_drv_twi_t
 c⁄° * 
p_ö°™˚
)

321 
twi_c⁄åﬁ_block_t
 * 
p_cb
 = &
m_cb
[
p_ö°™˚
->
drv_ö°_idx
];

322 
	`ASSERT
(
p_cb
->
°©e
 !
NRF_DRV_STATE_UNINITIALIZED
);

324 i‡(
p_cb
->
h™dÀr
)

326 
CODE_FOR_TWIM


328 
	`ƒf_drv_comm⁄_úq_dißbÀ
(
	`ƒf_drv_gë_IRQn
((*)
p_ö°™˚
->
ªg
.
p_twim
));

330 
CODE_FOR_TWI


332 
	`ƒf_drv_comm⁄_úq_dißbÀ
(
	`ƒf_drv_gë_IRQn
((*)
p_ö°™˚
->
ªg
.
p_twi
));

335 
	`ƒf_drv_twi_dißbÀ
(
p_ö°™˚
);

337 #i‡
	`NRF_MODULE_ENABLED
(
PERIPHERAL_RESOURCE_SHARING
)

338 
	`ƒf_drv_comm⁄_≥r_ªs_ªÀa£
(
p_ö°™˚
->
ªg
.
p_twi
);

341 i‡(!
p_cb
->
hﬁd_bus_unöô
)

343 
CODE_FOR_TWIM


345 
NRF_GPIO
->
PIN_CNF
[
p_ö°™˚
->
ªg
.
p_twim
->
PSEL
.
SCL
] = 
SCL_PIN_UNINIT_CONF
;

346 
NRF_GPIO
->
PIN_CNF
[
p_ö°™˚
->
ªg
.
p_twim
->
PSEL
.
SDA
] = 
SDA_PIN_UNINIT_CONF
;

348 
CODE_FOR_TWI


350 
NRF_GPIO
->
PIN_CNF
[
p_ö°™˚
->
ªg
.
p_twi
->
PSELSCL
] = 
SCL_PIN_UNINIT_CONF
;

351 
NRF_GPIO
->
PIN_CNF
[
p_ö°™˚
->
ªg
.
p_twi
->
PSELSDA
] = 
SDA_PIN_UNINIT_CONF
;

355 
p_cb
->
°©e
 = 
NRF_DRV_STATE_UNINITIALIZED
;

356 
	`NRF_LOG_INFO
("In°™˚ unöôülized: %d.\r\n", 
p_ö°™˚
->
drv_ö°_idx
);

357 
	}
}

359 
	$ƒf_drv_twi_íabÀ
(
ƒf_drv_twi_t
 c⁄° * 
p_ö°™˚
)

361 
twi_c⁄åﬁ_block_t
 * 
p_cb
 = &
m_cb
[
p_ö°™˚
->
drv_ö°_idx
];

362 
	`ASSERT
(
p_cb
->
°©e
 =
NRF_DRV_STATE_INITIALIZED
);

364 
CODE_FOR_TWIM


366 
NRF_TWIM_Ty≥
 * 
p_twim
 = 
p_ö°™˚
->
ªg
.p_twim;

368 
	`ƒf_twim_íabÀ
(
p_twim
);

370 
CODE_FOR_TWI


372 
NRF_TWI_Ty≥
 * 
p_twi
 = 
p_ö°™˚
->
ªg
.p_twi;

374 
	`ƒf_twi_íabÀ
(
p_twi
);

377 
p_cb
->
°©e
 = 
NRF_DRV_STATE_POWERED_ON
;

378 
	`NRF_LOG_INFO
("In°™˚É«bÀd: %d.\r\n", 
p_ö°™˚
->
drv_ö°_idx
);

379 
	}
}

381 
	$ƒf_drv_twi_dißbÀ
(
ƒf_drv_twi_t
 c⁄° * 
p_ö°™˚
)

383 
twi_c⁄åﬁ_block_t
 * 
p_cb
 = &
m_cb
[
p_ö°™˚
->
drv_ö°_idx
];

384 
	`ASSERT
(
p_cb
->
°©e
 !
NRF_DRV_STATE_UNINITIALIZED
);

386 
CODE_FOR_TWIM


388 
NRF_TWIM_Ty≥
 * 
p_twim
 = 
p_ö°™˚
->
ªg
.p_twim;

389 
p_cb
->
öt_mask
 = 0;

390 
	`ƒf_twim_öt_dißbÀ
(
p_twim
, 
DISABLE_ALL_INT_SHORT
);

391 
	`ƒf_twim_sh‹ts_dißbÀ
(
p_twim
, 
DISABLE_ALL_INT_SHORT
);

392 
	`ƒf_twim_dißbÀ
(
p_twim
);

394 
CODE_FOR_TWI


396 
NRF_TWI_Ty≥
 * 
p_twi
 = 
p_ö°™˚
->
ªg
.p_twi;

397 
	`ƒf_twi_öt_dißbÀ
(
p_twi
, 
DISABLE_ALL_INT_SHORT
);

398 
	`ƒf_twi_sh‹ts_dißbÀ
(
p_twi
, 
DISABLE_ALL_INT_SHORT
);

399 
	`ƒf_twi_dißbÀ
(
p_twi
);

402 
p_cb
->
°©e
 = 
NRF_DRV_STATE_INITIALIZED
;

403 
	`NRF_LOG_INFO
("In°™˚ dißbÀd: %d.\r\n", 
p_ö°™˚
->
drv_ö°_idx
);

404 
	}
}

406 #ifde‡
TWI_IN_USE


407 
boﬁ
 
	$twi_£nd_byã
(
NRF_TWI_Ty≥
 * 
p_twi
,

408 
uöt8_t
 c⁄° * 
p_d©a
,

409 
uöt8_t
 
Àngth
,

410 
uöt8_t
 * 
p_byãs_å™s„ºed
,

411 
boﬁ
 
no_°›
)

413 i‡(*
p_byãs_å™s„ºed
 < 
Àngth
)

415 
	`ƒf_twi_txd_£t
(
p_twi
, 
p_d©a
[*
p_byãs_å™s„ºed
]);

416 ++(*
p_byãs_å™s„ºed
);

420 i‡(
no_°›
)

422 
	`ƒf_twi_èsk_åiggî
(
p_twi
, 
NRF_TWI_TASK_SUSPEND
);

423  
Ál£
;

427 
	`ƒf_twi_èsk_åiggî
(
p_twi
, 
NRF_TWI_TASK_STOP
);

430  
åue
;

431 
	}
}

433 
	$twi_ª˚ive_byã
(
NRF_TWI_Ty≥
 * 
p_twi
,

434 
uöt8_t
 * 
p_d©a
,

435 
uöt8_t
 
Àngth
,

436 
uöt8_t
 * 
p_byãs_å™s„ºed
)

438 i‡(*
p_byãs_å™s„ºed
 < 
Àngth
)

440 
p_d©a
[*
p_byãs_å™s„ºed
] = 
	`ƒf_twi_rxd_gë
(
p_twi
);

442 ++(*
p_byãs_å™s„ºed
);

444 i‡(*
p_byãs_å™s„ºed
 =
Àngth
 - 1)

446 
	`ƒf_twi_sh‹ts_£t
(
p_twi
, 
NRF_TWI_SHORT_BB_STOP_MASK
);

448 i‡(*
p_byãs_å™s„ºed
 =
Àngth
)

453 
	`ƒf_twi_èsk_åiggî
(
p_twi
, 
NRF_TWI_TASK_RESUME
);

455 
	}
}

457 
boﬁ
 
	$twi_å™s„r
(
NRF_TWI_Ty≥
 * 
p_twi
,

458 
boﬁ
 * 
p_îr‹
,

459 
uöt8_t
 * 
p_byãs_å™s„ºed
,

460 
uöt8_t
 * 
p_d©a
,

461 
uöt8_t
 
Àngth
,

462 
boﬁ
 
no_°›
)

464 
boﬁ
 
do_°›_check
 = ((*
p_îr‹
Ë|| ((*
p_byãs_å™s„ºed
Ë=
Àngth
));

466 i‡(*
p_îr‹
)

468 
	`ƒf_twi_evít_˛ór
(
p_twi
, 
NRF_TWI_EVENT_ERROR
);

469 
	`ƒf_twi_evít_˛ór
(
p_twi
, 
NRF_TWI_EVENT_TXDSENT
);

470 
	`ƒf_twi_evít_˛ór
(
p_twi
, 
NRF_TWI_EVENT_RXDREADY
);

472 i‡(
	`ƒf_twi_evít_check
(
p_twi
, 
NRF_TWI_EVENT_ERROR
))

474 
	`ƒf_twi_evít_˛ór
(
p_twi
, 
NRF_TWI_EVENT_ERROR
);

475 
	`NRF_LOG_DEBUG
("TWI: Evít: %s.\r\n", (
uöt32_t
)
	`EVT_TO_STR_TWI
(
NRF_TWI_EVENT_ERROR
));

476 
	`ƒf_twi_èsk_åiggî
(
p_twi
, 
NRF_TWI_TASK_STOP
);

477 *
p_îr‹
 = 
åue
;

481 i‡(
	`ƒf_twi_evít_check
(
p_twi
, 
NRF_TWI_EVENT_TXDSENT
))

483 
	`ƒf_twi_evít_˛ór
(
p_twi
, 
NRF_TWI_EVENT_TXDSENT
);

484 
	`NRF_LOG_DEBUG
("TWI: Evít: %s.\r\n", (
uöt32_t
)
	`EVT_TO_STR_TWI
(
NRF_TWI_EVENT_TXDSENT
));

485 i‡(
	`ƒf_twi_evít_check
(
p_twi
, 
NRF_TWI_EVENT_ERROR
))

487 
	`ƒf_twi_evít_˛ór
(
p_twi
, 
NRF_TWI_EVENT_ERROR
);

488 
	`NRF_LOG_DEBUG
("TWI: Evít: %s.\r\n", (
uöt32_t
)
	`EVT_TO_STR_TWI
(
NRF_TWI_EVENT_ERROR
));

489 
	`ƒf_twi_èsk_åiggî
(
p_twi
, 
NRF_TWI_TASK_STOP
);

490 *
p_îr‹
 = 
åue
;

494 i‡(!
	`twi_£nd_byã
(
p_twi
, 
p_d©a
, 
Àngth
, 
p_byãs_å™s„ºed
, 
no_°›
))

496  
Ál£
;

500 i‡(
	`ƒf_twi_evít_check
(
p_twi
, 
NRF_TWI_EVENT_RXDREADY
))

502 
	`ƒf_twi_evít_˛ór
(
p_twi
, 
NRF_TWI_EVENT_RXDREADY
);

503 
	`NRF_LOG_DEBUG
("TWI: Evít: %s.\r\n", (
uöt32_t
)
	`EVT_TO_STR_TWI
(
NRF_TWI_EVENT_RXDREADY
));

504 i‡(
	`ƒf_twi_evít_check
(
p_twi
, 
NRF_TWI_EVENT_ERROR
))

506 
	`NRF_LOG_DEBUG
("TWI: Evít: %s.\r\n", (
uöt32_t
)
	`EVT_TO_STR_TWI
(
NRF_TWI_EVENT_ERROR
));

507 
	`ƒf_twi_evít_˛ór
(
p_twi
, 
NRF_TWI_EVENT_ERROR
);

508 
	`ƒf_twi_èsk_åiggî
(
p_twi
, 
NRF_TWI_TASK_STOP
);

509 *
p_îr‹
 = 
åue
;

513 
	`twi_ª˚ive_byã
(
p_twi
, 
p_d©a
, 
Àngth
, 
p_byãs_å™s„ºed
);

518 i‡(
do_°›_check
 && 
	`ƒf_twi_evít_check
(
p_twi
, 
NRF_TWI_EVENT_STOPPED
))

520 
	`ƒf_twi_evít_˛ór
(
p_twi
, 
NRF_TWI_EVENT_STOPPED
);

521 
	`NRF_LOG_DEBUG
("TWI: Evít: %s.\r\n", (
uöt32_t
)
	`EVT_TO_STR_TWI
(
NRF_TWI_EVENT_STOPPED
));

522  
Ál£
;

525  
åue
;

526 
	}
}

528 
ªt_code_t
 
	$twi_tx_°¨t_å™s„r
(
twi_c⁄åﬁ_block_t
 * 
p_cb
,

529 
NRF_TWI_Ty≥
 * 
p_twi
,

530 
uöt8_t
 c⁄° * 
p_d©a
,

531 
uöt8_t
 
Àngth
,

532 
boﬁ
 
no_°›
)

534 
ªt_code_t
 
ªt_code
 = 
NRF_SUCCESS
;

536 
	`ƒf_twi_evít_˛ór
(
p_twi
, 
NRF_TWI_EVENT_STOPPED
);

537 
	`ƒf_twi_evít_˛ór
(
p_twi
, 
NRF_TWI_EVENT_ERROR
);

538 
	`ƒf_twi_evít_˛ór
(
p_twi
, 
NRF_TWI_EVENT_TXDSENT
);

539 
	`ƒf_twi_evít_˛ór
(
p_twi
, 
NRF_TWI_EVENT_RXDREADY
);

540 
	`ƒf_twi_sh‹ts_£t
(
p_twi
, 0);

542 
p_cb
->
byãs_å™s„ºed
 = 0;

543 
p_cb
->
îr‹
 = 
Ál£
;

546 
	`ƒf_twi_èsk_åiggî
(
p_twi
, 
NRF_TWI_TASK_RESUME
);

547 
	`ƒf_twi_èsk_åiggî
(
p_twi
, 
NRF_TWI_TASK_STARTTX
);

549 ()
	`twi_£nd_byã
(
p_twi
, 
p_d©a
, 
Àngth
, &
p_cb
->
byãs_å™s„ºed
, 
no_°›
);

551 i‡(
p_cb
->
h™dÀr
)

553 
p_cb
->
öt_mask
 = 
NRF_TWI_INT_STOPPED_MASK
 |

554 
NRF_TWI_INT_ERROR_MASK
 |

555 
NRF_TWI_INT_TXDSENT_MASK
 |

556 
NRF_TWI_INT_RXDREADY_MASK
;

557 
	`ƒf_twi_öt_íabÀ
(
p_twi
, 
p_cb
->
öt_mask
);

561 
	`twi_å™s„r
(
p_twi
, &
p_cb
->
îr‹
, &p_cb->
byãs_å™s„ºed
, (
uöt8_t
 *)
p_d©a
, 
Àngth
, 
no_°›
))

564 i‡(
p_cb
->
îr‹
)

566 
uöt32_t
 
îr‹§c
 = 
	`ƒf_twi_îr‹§c_gë_™d_˛ór
(
p_twi
);

568 i‡(
îr‹§c
)

570 
ªt_code
 = 
	`twi_¥o˚ss_îr‹
(
îr‹§c
);

575  
ªt_code
;

576 
	}
}

578 
ªt_code_t
 
	$twi_rx_°¨t_å™s„r
(
twi_c⁄åﬁ_block_t
 * 
p_cb
,

579 
NRF_TWI_Ty≥
 * 
p_twi
,

580 
uöt8_t
 c⁄° * 
p_d©a
,

581 
uöt8_t
 
Àngth
)

583 
ªt_code_t
 
ªt_code
 = 
NRF_SUCCESS
;

585 
	`ƒf_twi_evít_˛ór
(
p_twi
, 
NRF_TWI_EVENT_STOPPED
);

586 
	`ƒf_twi_evít_˛ór
(
p_twi
, 
NRF_TWI_EVENT_ERROR
);

587 
	`ƒf_twi_evít_˛ór
(
p_twi
, 
NRF_TWI_EVENT_TXDSENT
);

588 
	`ƒf_twi_evít_˛ór
(
p_twi
, 
NRF_TWI_EVENT_RXDREADY
);

590 
p_cb
->
byãs_å™s„ºed
 = 0;

591 
p_cb
->
îr‹
 = 
Ál£
;

593 i‡(
Àngth
 == 1)

595 
	`ƒf_twi_sh‹ts_£t
(
p_twi
, 
NRF_TWI_SHORT_BB_STOP_MASK
);

599 
	`ƒf_twi_sh‹ts_£t
(
p_twi
, 
NRF_TWI_SHORT_BB_SUSPEND_MASK
);

602 
	`ƒf_twi_èsk_åiggî
(
p_twi
, 
NRF_TWI_TASK_RESUME
);

603 
	`ƒf_twi_èsk_åiggî
(
p_twi
, 
NRF_TWI_TASK_STARTRX
);

605 i‡(
p_cb
->
h™dÀr
)

607 
p_cb
->
öt_mask
 = 
NRF_TWI_INT_STOPPED_MASK
 |

608 
NRF_TWI_INT_ERROR_MASK
 |

609 
NRF_TWI_INT_TXDSENT_MASK
 |

610 
NRF_TWI_INT_RXDREADY_MASK
;

611 
	`ƒf_twi_öt_íabÀ
(
p_twi
, 
p_cb
->
öt_mask
);

615 
	`twi_å™s„r
(
p_twi
, &
p_cb
->
îr‹
, &p_cb->
byãs_å™s„ºed
, (
uöt8_t
*)
p_d©a
, 
Àngth
, 
Ál£
))

618 i‡(
p_cb
->
îr‹
)

620 
uöt32_t
 
îr‹§c
 = 
	`ƒf_twi_îr‹§c_gë_™d_˛ór
(
p_twi
);

622 i‡(
îr‹§c
)

624 
ªt_code
 = 
	`twi_¥o˚ss_îr‹
(
îr‹§c
);

628  
ªt_code
;

629 
	}
}

631 
__STATIC_INLINE
 
ªt_code_t
 
	$twi_x„r
(
twi_c⁄åﬁ_block_t
 * 
p_cb
,

632 
NRF_TWI_Ty≥
 * 
p_twi
,

633 
ƒf_drv_twi_x„r_desc_t
 c⁄° * 
p_x„r_desc
,

634 
uöt32_t
 
Êags
)

637 
ªt_code_t
 
îr_code
 = 
NRF_SUCCESS
;

640 
	`ƒf_twi_öt_dißbÀ
(
p_twi
, 
DISABLE_ALL_INT_SHORT
);

642 i‡(
p_cb
->
busy
)

644 
	`ƒf_twi_öt_íabÀ
(
p_twi
, 
p_cb
->
öt_mask
);

645 
îr_code
 = 
NRF_ERROR_BUSY
;

646 
	`NRF_LOG_WARNING
("Fun˘i⁄: %s,Éº‹ code: %s.\r\n", (
uöt32_t
)
__func__
, (uöt32_t)
	`ERR_TO_STR
(
îr_code
));

647  
îr_code
;

651 
p_cb
->
busy
 = (
NRF_DRV_TWI_FLAG_NO_XFER_EVT_HANDLER
 & 
Êags
Ë? 
Ál£
 : 
åue
;

654 i‡(
Êags
 & 
NRF_DRV_TWI_FLAG_HOLD_XFER
)

656 
îr_code
 = 
NRF_ERROR_NOT_SUPPORTED
;

657 
	`NRF_LOG_WARNING
("Fun˘i⁄: %s,Éº‹ code: %s.\r\n", (
uöt32_t
)
__func__
, (uöt32_t)
	`ERR_TO_STR
(
îr_code
));

658  
îr_code
;

661 
p_cb
->
Êags
 = flags;

662 
p_cb
->
x„r_desc
 = *
p_x„r_desc
;

663 
p_cb
->
cuº_Àngth
 = 
p_x„r_desc
->
¥im¨y_Àngth
;

664 
p_cb
->
p_cuº_buf
 = 
p_x„r_desc
->
p_¥im¨y_buf
;

665 
	`ƒf_twi_addªss_£t
(
p_twi
, 
p_x„r_desc
->
addªss
);

667 i‡(
p_x„r_desc
->
ty≥
 !
NRF_DRV_TWI_XFER_RX
)

669 
p_cb
->
cuº_no_°›
 = ((
p_x„r_desc
->
ty≥
 =
NRF_DRV_TWI_XFER_TX
) &&

670 !(
Êags
 & 
NRF_DRV_TWI_FLAG_TX_NO_STOP
)Ë? 
Ál£
 : 
åue
;

672 
îr_code
 = 
	`twi_tx_°¨t_å™s„r
(
p_cb
, 
p_twi
, 
p_x„r_desc
->
p_¥im¨y_buf
,Ö_x„r_desc->
¥im¨y_Àngth
,Ö_cb->
cuº_no_°›
);

676 
p_cb
->
cuº_no_°›
 = 
Ál£
;

678 
îr_code
 = 
	`twi_rx_°¨t_å™s„r
(
p_cb
, 
p_twi
, 
p_x„r_desc
->
p_¥im¨y_buf
,Ö_x„r_desc->
¥im¨y_Àngth
);

680 i‡(
p_cb
->
h™dÀr
 =
NULL
)

682 
p_cb
->
busy
 = 
Ál£
;

684  
îr_code
;

685 
	}
}

688 #ifde‡
TWIM_IN_USE


689 
__STATIC_INLINE
 
	$twim_li°_íabÀ_h™dÀ
(
NRF_TWIM_Ty≥
 * 
p_twim
, 
uöt32_t
 
Êags
)

691 i‡(
NRF_DRV_TWI_FLAG_TX_POSTINC
 & 
Êags
)

693 
	`ƒf_twim_tx_li°_íabÀ
(
p_twim
);

697 
	`ƒf_twim_tx_li°_dißbÀ
(
p_twim
);

700 i‡(
NRF_DRV_TWI_FLAG_RX_POSTINC
 & 
Êags
)

702 
	`ƒf_twim_rx_li°_íabÀ
(
p_twim
);

706 
	`ƒf_twim_rx_li°_dißbÀ
(
p_twim
);

708 
	}
}

709 
__STATIC_INLINE
 
ªt_code_t
 
	$twim_x„r
(
twi_c⁄åﬁ_block_t
 * 
p_cb
,

710 
NRF_TWIM_Ty≥
 * 
p_twim
,

711 
ƒf_drv_twi_x„r_desc_t
 c⁄° * 
p_x„r_desc
,

712 
uöt32_t
 
Êags
)

714 
ªt_code_t
 
îr_code
 = 
NRF_SUCCESS
;

715 
ƒf_twim_èsk_t
 
°¨t_èsk
 = 
NRF_TWIM_TASK_STARTTX
;

716 
ƒf_twim_evít_t
 
evt_to_waô
 = 
NRF_TWIM_EVENT_STOPPED
;

718 i‡(!
	`ƒf_drv_is_ö_RAM
(
p_x„r_desc
->
p_¥im¨y_buf
))

720 
îr_code
 = 
NRF_ERROR_INVALID_ADDR
;

721 
	`NRF_LOG_WARNING
("Fun˘i⁄: %s,Éº‹ code: %s.\r\n", (
uöt32_t
)
__func__
, (uöt32_t)
	`ERR_TO_STR
(
îr_code
));

722  
îr_code
;

725 
	`ƒf_twim_öt_dißbÀ
(
p_twim
, 
DISABLE_ALL_INT_SHORT
);

726 i‡(
p_cb
->
busy
)

728 
	`ƒf_twim_öt_íabÀ
(
p_twim
, 
p_cb
->
öt_mask
);

729 
îr_code
 = 
NRF_ERROR_BUSY
;

730 
	`NRF_LOG_WARNING
("Fun˘i⁄: %s,Éº‹ code: %s.\r\n", (
uöt32_t
)
__func__
, (uöt32_t)
	`ERR_TO_STR
(
îr_code
));

731  
îr_code
;

735 
p_cb
->
busy
 = ((
NRF_DRV_TWI_FLAG_NO_XFER_EVT_HANDLER
 & 
Êags
) ||

736 (
NRF_DRV_TWI_FLAG_REPEATED_XFER
 & 
Êags
)Ë? 
Ál£
: 
åue
;

739 
p_cb
->
x„r_desc
 = *
p_x„r_desc
;

740 
p_cb
->
ª≥©ed
 = (
Êags
 & 
NRF_DRV_TWI_FLAG_REPEATED_XFER
Ë? 
åue
 : 
Ál£
;

741 
	`ƒf_twim_addªss_£t
(
p_twim
, 
p_x„r_desc
->
addªss
);

743 
	`ƒf_twim_evít_˛ór
(
p_twim
, 
NRF_TWIM_EVENT_STOPPED
);

744 
	`ƒf_twim_evít_˛ór
(
p_twim
, 
NRF_TWIM_EVENT_ERROR
);

746 
	`twim_li°_íabÀ_h™dÀ
(
p_twim
, 
Êags
);

747 
p_x„r_desc
->
ty≥
)

749 
NRF_DRV_TWI_XFER_TXTX
:

750 
	`ASSERT
(!(
Êags
 & 
NRF_DRV_TWI_FLAG_REPEATED_XFER
));

751 
	`ASSERT
(!(
Êags
 & 
NRF_DRV_TWI_FLAG_HOLD_XFER
));

752 
	`ASSERT
(!(
Êags
 & 
NRF_DRV_TWI_FLAG_NO_XFER_EVT_HANDLER
));

753 i‡(!
	`ƒf_drv_is_ö_RAM
(
p_x„r_desc
->
p_£c⁄d¨y_buf
))

755 
îr_code
 = 
NRF_ERROR_INVALID_ADDR
;

756 
	`NRF_LOG_WARNING
("Fun˘i⁄: %s,Éº‹ code: %s.\r\n", (
uöt32_t
)
__func__
, (uöt32_t)
	`ERR_TO_STR
(
îr_code
));

757  
îr_code
;

759 
	`ƒf_twim_sh‹ts_£t
(
p_twim
, 
NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK
);

760 
	`ƒf_twim_tx_buf„r_£t
(
p_twim
, 
p_x„r_desc
->
p_¥im¨y_buf
,Ö_x„r_desc->
¥im¨y_Àngth
);

761 
	`ƒf_twim_evít_˛ór
(
p_twim
, 
NRF_TWIM_EVENT_TXSTARTED
);

762 
	`ƒf_twim_evít_˛ór
(
p_twim
, 
NRF_TWIM_EVENT_LASTTX
);

763 
	`ƒf_twim_evít_˛ór
(
p_twim
, 
NRF_TWIM_EVENT_SUSPENDED
);

764 
	`ƒf_twim_èsk_åiggî
(
p_twim
, 
NRF_TWIM_TASK_RESUME
);

765 
	`ƒf_twim_èsk_åiggî
(
p_twim
, 
NRF_TWIM_TASK_STARTTX
);

766 !
	`ƒf_twim_evít_check
(
p_twim
, 
NRF_TWIM_EVENT_TXSTARTED
))

768 
	`NRF_LOG_DEBUG
("TWIM: Evít: %s.\r\n", (
uöt32_t
)
	`EVT_TO_STR_TWIM
(
NRF_TWIM_EVENT_TXSTARTED
));

769 
	`ƒf_twim_evít_˛ór
(
p_twim
, 
NRF_TWIM_EVENT_TXSTARTED
);

770 
	`ƒf_twim_tx_buf„r_£t
(
p_twim
, 
p_x„r_desc
->
p_£c⁄d¨y_buf
,Ö_x„r_desc->
£c⁄d¨y_Àngth
);

771 
p_cb
->
öt_mask
 = 
NRF_TWIM_INT_SUSPENDED_MASK
 | 
NRF_TWIM_INT_ERROR_MASK
;

773 
NRF_DRV_TWI_XFER_TXRX
:

774 
	`ƒf_twim_tx_buf„r_£t
(
p_twim
, 
p_x„r_desc
->
p_¥im¨y_buf
,Ö_x„r_desc->
¥im¨y_Àngth
);

775 i‡(!
	`ƒf_drv_is_ö_RAM
(
p_x„r_desc
->
p_£c⁄d¨y_buf
))

777 
îr_code
 = 
NRF_ERROR_INVALID_ADDR
;

778 
	`NRF_LOG_WARNING
("Fun˘i⁄: %s,Éº‹ code: %s.\r\n", (
uöt32_t
)
__func__
, (uöt32_t)
	`ERR_TO_STR
(
îr_code
));

779  
îr_code
;

781 
	`ƒf_twim_rx_buf„r_£t
(
p_twim
, 
p_x„r_desc
->
p_£c⁄d¨y_buf
,Ö_x„r_desc->
£c⁄d¨y_Àngth
);

782 
	`ƒf_twim_sh‹ts_£t
(
p_twim
, 
NRF_TWIM_SHORT_LASTTX_STARTRX_MASK
 |

783 
NRF_TWIM_SHORT_LASTRX_STOP_MASK
);

784 
p_cb
->
öt_mask
 = 
NRF_TWIM_INT_STOPPED_MASK
 | 
NRF_TWIM_INT_ERROR_MASK
;

786 
NRF_DRV_TWI_XFER_TX
:

787 
	`ƒf_twim_tx_buf„r_£t
(
p_twim
, 
p_x„r_desc
->
p_¥im¨y_buf
,Ö_x„r_desc->
¥im¨y_Àngth
);

788 i‡(
NRF_DRV_TWI_FLAG_TX_NO_STOP
 & 
Êags
)

790 
	`ƒf_twim_sh‹ts_£t
(
p_twim
, 
NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK
);

791 
p_cb
->
öt_mask
 = 
NRF_TWIM_INT_SUSPENDED_MASK
 | 
NRF_TWIM_INT_ERROR_MASK
;

792 
	`ƒf_twim_evít_˛ór
(
p_twim
, 
NRF_TWIM_EVENT_SUSPENDED
);

793 
evt_to_waô
 = 
NRF_TWIM_EVENT_SUSPENDED
;

797 
	`ƒf_twim_sh‹ts_£t
(
p_twim
, 
NRF_TWIM_SHORT_LASTTX_STOP_MASK
);

798 
p_cb
->
öt_mask
 = 
NRF_TWIM_INT_STOPPED_MASK
 | 
NRF_TWIM_INT_ERROR_MASK
;

800 
	`ƒf_twim_èsk_åiggî
(
p_twim
, 
NRF_TWIM_TASK_RESUME
);

802 
NRF_DRV_TWI_XFER_RX
:

803 
	`ƒf_twim_rx_buf„r_£t
(
p_twim
, 
p_x„r_desc
->
p_¥im¨y_buf
,Ö_x„r_desc->
¥im¨y_Àngth
);

804 
	`ƒf_twim_sh‹ts_£t
(
p_twim
, 
NRF_TWIM_SHORT_LASTRX_STOP_MASK
);

805 
p_cb
->
öt_mask
 = 
NRF_TWIM_INT_STOPPED_MASK
 | 
NRF_TWIM_INT_ERROR_MASK
;

806 
°¨t_èsk
 = 
NRF_TWIM_TASK_STARTRX
;

807 
	`ƒf_twim_èsk_åiggî
(
p_twim
, 
NRF_TWIM_TASK_RESUME
);

810 
îr_code
 = 
NRF_ERROR_INVALID_PARAM
;

814 i‡(!(
Êags
 & 
NRF_DRV_TWI_FLAG_HOLD_XFER
Ë&& (
p_x„r_desc
->
ty≥
 !
NRF_DRV_TWI_XFER_TXTX
))

816 
	`ƒf_twim_èsk_åiggî
(
p_twim
, 
°¨t_èsk
);

819 i‡(
p_cb
->
h™dÀr
)

821 i‡(
Êags
 & 
NRF_DRV_TWI_FLAG_NO_XFER_EVT_HANDLER
)

823 
p_cb
->
öt_mask
 = 
NRF_TWIM_INT_ERROR_MASK
;

825 
	`ƒf_twim_öt_íabÀ
(
p_twim
, 
p_cb
->
öt_mask
);

829 !
	`ƒf_twim_evít_check
(
p_twim
, 
evt_to_waô
))

831 i‡(
	`ƒf_twim_evít_check
(
p_twim
, 
NRF_TWIM_EVENT_ERROR
))

833 
	`NRF_LOG_DEBUG
("TWIM: Evít: %s.\r\n", (
uöt32_t
)
	`EVT_TO_STR_TWIM
(
NRF_TWIM_EVENT_ERROR
));

834 
	`ƒf_twim_evít_˛ór
(
p_twim
, 
NRF_TWIM_EVENT_ERROR
);

835 
	`ƒf_twim_èsk_åiggî
(
p_twim
, 
NRF_TWIM_TASK_RESUME
);

836 
	`ƒf_twim_èsk_åiggî
(
p_twim
, 
NRF_TWIM_TASK_STOP
);

837 
evt_to_waô
 = 
NRF_TWIM_EVENT_STOPPED
;

841 
uöt32_t
 
îr‹§c
 = 
	`ƒf_twim_îr‹§c_gë_™d_˛ór
(
p_twim
);

843 
p_cb
->
busy
 = 
Ál£
;

845 i‡(
îr‹§c
)

847 
îr_code
 = 
	`twi_¥o˚ss_îr‹
(
îr‹§c
);

850  
îr_code
;

851 
	}
}

854 
ªt_code_t
 
	$ƒf_drv_twi_x„r
(
ƒf_drv_twi_t
 c⁄° * 
p_ö°™˚
,

855 
ƒf_drv_twi_x„r_desc_t
 c⁄° * 
p_x„r_desc
,

856 
uöt32_t
 
Êags
)

859 
ªt_code_t
 
îr_code
 = 
NRF_SUCCESS
;

860 
twi_c⁄åﬁ_block_t
 * 
p_cb
 = &
m_cb
[
p_ö°™˚
->
drv_ö°_idx
];

863 
	`ASSERT
–!((
p_cb
->
h™dÀr
 =
NULL
Ë&& (
p_x„r_desc
->
ty≥
 =
NRF_DRV_TWI_XFER_TXRX
)));

864 
	`ASSERT
–!((
p_cb
->
h™dÀr
 =
NULL
Ë&& (
p_x„r_desc
->
ty≥
 =
NRF_DRV_TWI_XFER_TXTX
)));

866 
	`NRF_LOG_INFO
("Tøns„∏ty≥: %s.\r\n", (
uöt32_t
)
	`TRANSFER_TO_STR
(
p_x„r_desc
->
ty≥
));

867 
	`NRF_LOG_INFO
("Tøns„∏buf„r†Àngth:Örim¨y: %d, sec⁄d¨y: %d.\r\n", 
p_x„r_desc
->
¥im¨y_Àngth
,Ö_x„r_desc->
£c⁄d¨y_Àngth
);

868 
	`NRF_LOG_DEBUG
("Primary buffer data:\r\n");

869 
	`NRF_LOG_HEXDUMP_DEBUG
((
uöt8_t
 *)
p_x„r_desc
->
p_¥im¨y_buf
,Ö_x„r_desc->
¥im¨y_Àngth
 * (p_xfer_desc->p_primary_buf));

870 
	`NRF_LOG_DEBUG
("Secondary buffer data:\r\n");

871 
	`NRF_LOG_HEXDUMP_DEBUG
((
uöt8_t
 *)
p_x„r_desc
->
p_£c⁄d¨y_buf
,Ö_x„r_desc->
£c⁄d¨y_Àngth
 * (p_xfer_desc->p_secondary_buf));

873 
CODE_FOR_TWIM


876 
îr_code
 = 
	`twim_x„r
(
p_cb
, (
NRF_TWIM_Ty≥
 *)
p_ö°™˚
->
ªg
.
p_twim
, 
p_x„r_desc
, 
Êags
);

878 
CODE_FOR_TWI


880 i‡–(
NRF_DRV_TWI_FLAG_TX_POSTINC
 | 
NRF_DRV_TWI_FLAG_RX_POSTINC
Ë& 
Êags
)

882 
îr_code
 = 
NRF_ERROR_NOT_SUPPORTED
;

883 
	`NRF_LOG_WARNING
("Fun˘i⁄: %s,Éº‹ code: %s.\r\n", (
uöt32_t
)
__func__
, (uöt32_t)
	`ERR_TO_STR
(
îr_code
));

884  
îr_code
;

887 
îr_code
 = 
	`twi_x„r
(
p_cb
, (
NRF_TWI_Ty≥
 *)
p_ö°™˚
->
ªg
.
p_twi
, 
p_x„r_desc
, 
Êags
);

889 
	`NRF_LOG_WARNING
("Fun˘i⁄: %s,Éº‹ code: %s.\r\n", (
uöt32_t
)
__func__
, (uöt32_t)
	`ERR_TO_STR
(
îr_code
));

890  
îr_code
;

891 
	}
}

893 
ªt_code_t
 
	$ƒf_drv_twi_tx
(
ƒf_drv_twi_t
 c⁄° * 
p_ö°™˚
,

894 
uöt8_t
 
addªss
,

895 
uöt8_t
 c⁄° * 
p_d©a
,

896 
uöt8_t
 
Àngth
,

897 
boﬁ
 
no_°›
)

899 
ƒf_drv_twi_x„r_desc_t
 
x„r
 = 
	`NRF_DRV_TWI_XFER_DESC_TX
(
addªss
, (
uöt8_t
*)
p_d©a
, 
Àngth
);

901  
	`ƒf_drv_twi_x„r
(
p_ö°™˚
, &
x„r
, 
no_°›
 ? 
NRF_DRV_TWI_FLAG_TX_NO_STOP
 : 0);

902 
	}
}

904 
ªt_code_t
 
	$ƒf_drv_twi_rx
(
ƒf_drv_twi_t
 c⁄° * 
p_ö°™˚
,

905 
uöt8_t
 
addªss
,

906 
uöt8_t
 * 
p_d©a
,

907 
uöt8_t
 
Àngth
)

909 
ƒf_drv_twi_x„r_desc_t
 
x„r
 = 
	`NRF_DRV_TWI_XFER_DESC_RX
(
addªss
, 
p_d©a
, 
Àngth
);

910  
	`ƒf_drv_twi_x„r
(
p_ö°™˚
, &
x„r
, 0);

911 
	}
}

913 
uöt32_t
 
	$ƒf_drv_twi_d©a_cou¡_gë
(
ƒf_drv_twi_t
 c⁄° * c⁄° 
p_ö°™˚
)

915 
CODE_FOR_TWIM


917 
	`ASSERT
(
Ál£
);

920 
CODE_FOR_TWI


922  
m_cb
[
p_ö°™˚
->
drv_ö°_idx
].
byãs_å™s„ºed
;

924 
	}
}

925 
uöt32_t
 
	$ƒf_drv_twi_°¨t_èsk_gë
(
ƒf_drv_twi_t
 c⁄° * 
p_ö°™˚
, 
ƒf_drv_twi_x„r_ty≥_t
 
x„r_ty≥
)

927 
CODE_FOR_TWIM


929  (
uöt32_t
)
	`ƒf_twim_èsk_addªss_gë
(
p_ö°™˚
->
ªg
.
p_twim
,

930 (
x„r_ty≥
 !
NRF_DRV_TWI_XFER_RX
Ë? 
NRF_TWIM_TASK_STARTTX
 : 
NRF_TWIM_TASK_STARTRX
);

932 
CODE_FOR_TWI


934  (
uöt32_t
)
	`ƒf_twi_èsk_addªss_gë
(
p_ö°™˚
->
ªg
.
p_twi
,

935 (
x„r_ty≥
 !
NRF_DRV_TWI_XFER_RX
Ë? 
NRF_TWI_TASK_STARTTX
 : 
NRF_TWI_TASK_STARTRX
);

937 
	}
}

939 
uöt32_t
 
	$ƒf_drv_twi_°›≥d_evít_gë
(
ƒf_drv_twi_t
 c⁄° * 
p_ö°™˚
)

941 
CODE_FOR_TWIM


943  (
uöt32_t
)
	`ƒf_twim_evít_addªss_gë
(
p_ö°™˚
->
ªg
.
p_twim
, 
NRF_TWIM_EVENT_STOPPED
);

945 
CODE_FOR_TWI


947  (
uöt32_t
)
	`ƒf_twi_evít_addªss_gë
(
p_ö°™˚
->
ªg
.
p_twi
, 
NRF_TWI_EVENT_STOPPED
);

949 
	}
}

951 #ifde‡
TWIM_IN_USE


952 
	$úq_h™dÀr_twim
(
NRF_TWIM_Ty≥
 * 
p_twim
, 
twi_c⁄åﬁ_block_t
 * 
p_cb
)

954 
	`ASSERT
(
p_cb
->
h™dÀr
);

956 i‡(
	`ƒf_twim_evít_check
(
p_twim
, 
NRF_TWIM_EVENT_ERROR
))

958 
	`ƒf_twim_evít_˛ór
(
p_twim
, 
NRF_TWIM_EVENT_ERROR
);

959 
	`NRF_LOG_DEBUG
("TWIM: Evít: %s.\r\n", (
uöt32_t
)
	`EVT_TO_STR_TWIM
(
NRF_TWIM_EVENT_ERROR
));

960 i‡(!
	`ƒf_twim_evít_check
(
p_twim
, 
NRF_TWIM_EVENT_STOPPED
))

962 
	`ƒf_twim_öt_dißbÀ
(
p_twim
, 
p_cb
->
öt_mask
);

963 
p_cb
->
öt_mask
 = 
NRF_TWIM_INT_STOPPED_MASK
;

964 
	`ƒf_twim_öt_íabÀ
(
p_twim
, 
p_cb
->
öt_mask
);

966 
	`ƒf_twim_èsk_åiggî
(
p_twim
, 
NRF_TWIM_TASK_RESUME
);

967 
	`ƒf_twim_èsk_åiggî
(
p_twim
, 
NRF_TWIM_TASK_STOP
);

972 
ƒf_drv_twi_evt_t
 
evít
;

974 i‡(
	`ƒf_twim_evít_check
(
p_twim
, 
NRF_TWIM_EVENT_STOPPED
))

976 
	`NRF_LOG_DEBUG
("TWIM: Evít: %s.\r\n", (
uöt32_t
)
	`EVT_TO_STR_TWIM
(
NRF_TWIM_EVENT_STOPPED
));

977 
	`ƒf_twim_evít_˛ór
(
p_twim
, 
NRF_TWIM_EVENT_STOPPED
);

978 
evít
.
x„r_desc
 = 
p_cb
->xfer_desc;

979 i‡(
p_cb
->
îr‹
)

982 
evít
.
x„r_desc
.
¥im¨y_Àngth
 = (
p_cb
->x„r_desc.
ty≥
 =
NRF_DRV_TWI_XFER_RX
) ?

983 (
uöt8_t
)
	`ƒf_twim_rxd_amou¡_gë
(
p_twim
Ë: (uöt8_t)
	`ƒf_twim_txd_amou¡_gë
(p_twim);

984 
evít
.
x„r_desc
.
£c⁄d¨y_Àngth
 = (
p_cb
->x„r_desc.
ty≥
 =
NRF_DRV_TWI_XFER_TXRX
) ?

985 (
uöt8_t
)
	`ƒf_twim_rxd_amou¡_gë
(
p_twim
Ë: (uöt8_t)
	`ƒf_twim_txd_amou¡_gë
(p_twim);

988 
	`ƒf_twim_evít_˛ór
(
p_twim
, 
NRF_TWIM_EVENT_LASTTX
);

989 
	`ƒf_twim_evít_˛ór
(
p_twim
, 
NRF_TWIM_EVENT_LASTRX
);

990 i‡(!
p_cb
->
ª≥©ed
 ||Ö_cb->
îr‹
)

992 
	`ƒf_twim_sh‹ts_£t
(
p_twim
, 0);

993 
p_cb
->
öt_mask
 = 0;

994 
	`ƒf_twim_öt_dißbÀ
(
p_twim
, 
DISABLE_ALL_INT_SHORT
);

999 
	`ƒf_twim_evít_˛ór
(
p_twim
, 
NRF_TWIM_EVENT_SUSPENDED
);

1000 
	`NRF_LOG_DEBUG
("TWIM: Evít: %s.\r\n", (
uöt32_t
)
	`EVT_TO_STR_TWIM
(
NRF_TWIM_EVENT_SUSPENDED
));

1001 i‡(
p_cb
->
x„r_desc
.
ty≥
 =
NRF_DRV_TWI_XFER_TX
)

1003 
evít
.
x„r_desc
 = 
p_cb
->xfer_desc;

1004 i‡(!
p_cb
->
ª≥©ed
)

1006 
	`ƒf_twim_sh‹ts_£t
(
p_twim
, 0);

1007 
p_cb
->
öt_mask
 = 0;

1008 
	`ƒf_twim_öt_dißbÀ
(
p_twim
, 
DISABLE_ALL_INT_SHORT
);

1013 
	`ƒf_twim_sh‹ts_£t
(
p_twim
, 
NRF_TWIM_SHORT_LASTTX_STOP_MASK
);

1014 
p_cb
->
öt_mask
 = 
NRF_TWIM_INT_STOPPED_MASK
 | 
NRF_TWIM_INT_ERROR_MASK
;

1015 
	`ƒf_twim_öt_dißbÀ
(
p_twim
, 
DISABLE_ALL_INT_SHORT
);

1016 
	`ƒf_twim_öt_íabÀ
(
p_twim
, 
p_cb
->
öt_mask
);

1017 
	`ƒf_twim_èsk_åiggî
(
p_twim
, 
NRF_TWIM_TASK_STARTTX
);

1018 
	`ƒf_twim_èsk_åiggî
(
p_twim
, 
NRF_TWIM_TASK_RESUME
);

1023 
uöt32_t
 
îr‹§c
 = 
	`ƒf_twim_îr‹§c_gë_™d_˛ór
(
p_twim
);

1024 i‡(
îr‹§c
 & 
NRF_TWIM_ERROR_ADDRESS_NACK
)

1026 
evít
.
ty≥
 = 
NRF_DRV_TWI_EVT_ADDRESS_NACK
;

1027 
	`NRF_LOG_DEBUG
("Evít: %s.\r\n", (
uöt32_t
)
	`EVT_TO_STR
(
NRF_DRV_TWI_EVT_ADDRESS_NACK
));

1029 i‡(
îr‹§c
 & 
NRF_TWIM_ERROR_DATA_NACK
)

1031 
evít
.
ty≥
 = 
NRF_DRV_TWI_EVT_DATA_NACK
;

1032 
	`NRF_LOG_DEBUG
("Evít: %s.\r\n", (
uöt32_t
)
	`EVT_TO_STR
(
NRF_DRV_TWI_EVT_DATA_NACK
));

1036 
evít
.
ty≥
 = 
NRF_DRV_TWI_EVT_DONE
;

1037 
	`NRF_LOG_DEBUG
("Evít: %s.\r\n", (
uöt32_t
)
	`EVT_TO_STR
(
NRF_DRV_TWI_EVT_DONE
));

1040 i‡(!
p_cb
->
ª≥©ed
)

1042 
p_cb
->
busy
 = 
Ál£
;

1044 
p_cb
->
	`h™dÀr
(&
evít
,Ö_cb->
p_c⁄ãxt
);

1045 
	}
}

1048 #ifde‡
TWI_IN_USE


1049 
	$úq_h™dÀr_twi
(
NRF_TWI_Ty≥
 * 
p_twi
, 
twi_c⁄åﬁ_block_t
 * 
p_cb
)

1051 
	`ASSERT
(
p_cb
->
h™dÀr
);

1053 i‡(
	`twi_å™s„r
(
p_twi
, &
p_cb
->
îr‹
, &p_cb->
byãs_å™s„ºed
,Ö_cb->
p_cuº_buf
,Ö_cb->
cuº_Àngth
,Ö_cb->
cuº_no_°›
 ))

1058 i‡(!
p_cb
->
îr‹
 &&

1059 ((
p_cb
->
x„r_desc
.
ty≥
 =
NRF_DRV_TWI_XFER_TXRX
) ||

1060 (
p_cb
->
x„r_desc
.
ty≥
 =
NRF_DRV_TWI_XFER_TXTX
)) &&

1061 
p_cb
->
p_cuº_buf
 =p_cb->
x„r_desc
.
p_¥im¨y_buf
)

1063 
p_cb
->
p_cuº_buf
 =Ö_cb->
x„r_desc
.
p_£c⁄d¨y_buf
;

1064 
p_cb
->
cuº_Àngth
 =Ö_cb->
x„r_desc
.
£c⁄d¨y_Àngth
;

1065 
p_cb
->
cuº_no_°›
 = (p_cb->
Êags
 & 
NRF_DRV_TWI_FLAG_TX_NO_STOP
);

1067 i‡(
p_cb
->
x„r_desc
.
ty≥
 =
NRF_DRV_TWI_XFER_TXTX
)

1069 ()
	`twi_tx_°¨t_å™s„r
(
p_cb
, 
p_twi
,Ö_cb->
p_cuº_buf
,Ö_cb->
cuº_Àngth
,Ö_cb->
cuº_no_°›
);

1073 ()
	`twi_rx_°¨t_å™s„r
(
p_cb
, 
p_twi
,Ö_cb->
p_cuº_buf
,Ö_cb->
cuº_Àngth
);

1078 
ƒf_drv_twi_evt_t
 
evít
;

1079 
evít
.
x„r_desc
 = 
p_cb
->xfer_desc;

1081 i‡(
p_cb
->
îr‹
)

1083 
uöt32_t
 
îr‹§c
 = 
	`ƒf_twi_îr‹§c_gë_™d_˛ór
(
p_twi
);

1084 i‡(
îr‹§c
 & 
NRF_TWI_ERROR_ADDRESS_NACK
)

1086 
evít
.
ty≥
 = 
NRF_DRV_TWI_EVT_ADDRESS_NACK
;

1087 
	`NRF_LOG_DEBUG
("Evít: %s.\r\n", (
uöt32_t
)
	`EVT_TO_STR
(
NRF_DRV_TWI_EVT_ADDRESS_NACK
));

1089 i‡(
îr‹§c
 & 
NRF_TWI_ERROR_DATA_NACK
)

1091 
evít
.
ty≥
 = 
NRF_DRV_TWI_EVT_DATA_NACK
;

1092 
	`NRF_LOG_DEBUG
("Evít: %s.\r\n", (
uöt32_t
)
	`EVT_TO_STR
(
NRF_DRV_TWI_EVT_DATA_NACK
));

1097 
evít
.
ty≥
 = 
NRF_DRV_TWI_EVT_DONE
;

1098 
	`NRF_LOG_DEBUG
("Evít: %s.\r\n", (
uöt32_t
)
	`EVT_TO_STR
(
NRF_DRV_TWI_EVT_DONE
));

1101 
p_cb
->
busy
 = 
Ál£
;

1103 i‡(!(
NRF_DRV_TWI_FLAG_NO_XFER_EVT_HANDLER
 & 
p_cb
->
Êags
))

1105 
p_cb
->
	`h™dÀr
(&
evít
,Ö_cb->
p_c⁄ãxt
);

1109 
	}
}

1112 #i‡
NRF_MODULE_ENABLED
(
TWI0
)

1113 
	$IRQ_HANDLER
(0)

1115 #i‡(
TWI0_USE_EASY_DMA
 == 1)

1116 
	`úq_h™dÀr_twim
(
NRF_TWIM0
,

1118 
	`úq_h™dÀr_twi
(
NRF_TWI0
,

1120 &
m_cb
[
TWI0_INSTANCE_INDEX
]);

1121 
	}
}

1124 #i‡
NRF_MODULE_ENABLED
(
TWI1
)

1125 
	$IRQ_HANDLER
(1)

1127 #i‡(
TWI1_USE_EASY_DMA
 == 1)

1128 
	`úq_h™dÀr_twim
(
NRF_TWIM1
,

1130 
	`úq_h™dÀr_twi
(
NRF_TWI1
,

1132 &
m_cb
[
TWI1_INSTANCE_INDEX
]);

1133 
	}
}

	@D:\Private\Programing\MCU\Nordic\ble_app_template\nRF5_SDK_12.3.0_d7731ad\components\drivers_nrf\twi_master\nrf_drv_twi.h

52 #i‚de‡
NRF_DRV_TWI_H__


53 
	#NRF_DRV_TWI_H__


	)

55 
	~"n‹dic_comm⁄.h
"

56 
	~"sdk_c⁄fig.h
"

60 #i‡((
TWI0_ENABLED
 =1 && 
TWI0_USE_EASY_DMA
 == 1) || \

61 (
	gTWI1_ENABLED
 =1 && 
TWI1_USE_EASY_DMA
 == 1))

62 
	#TWIM_IN_USE


	)

64 #i‡((
TWI0_ENABLED
 =1 && 
TWI0_USE_EASY_DMA
 != 1) || \

65 (
TWI1_ENABLED
 =1 && 
TWI1_USE_EASY_DMA
 != 1))

66 
	#TWI_IN_USE


	)

69 
	~"ƒf_twi.h
"

70 #ifde‡
TWIM_IN_USE


71 
	~"ƒf_twim.h
"

73 
	~"sdk_îr‹s.h
"

75 #ifde‡
__˝lu•lus


79 #i‡
deföed
(
TWIM_IN_USE
)

80 
	#NRF_DRV_TWI_PERIPHERAL
(
id
) \

81 (
	`CONCAT_3
(
TWI
, 
id
, 
_USE_EASY_DMA
) == 1 ? \

82 (*)
	`CONCAT_2
(
NRF_TWIM
, 
id
) \

83 : (*)
	`CONCAT_2
(
NRF_TWI
, 
id
))

	)

85 
	#NRF_DRV_TWI_PERIPHERAL
(
id
Ë(*)
	`CONCAT_2
(
NRF_TWI
, id)

	)

96 #ifde‡
TWIM_IN_USE


97 
NRF_TWIM_Ty≥
 * 
p_twim
;

99 
NRF_TWI_Ty≥
 * 
p_twi
;

100 } 
ªg
;

101 
uöt8_t
 
drv_ö°_idx
;

102 
boﬁ
 
u£_ósy_dma
;

103 } 
	tƒf_drv_twi_t
;

105 
	#TWI0_INSTANCE_INDEX
 0

	)

106 
	#TWI1_INSTANCE_INDEX
 
TWI0_INSTANCE_INDEX
+
TWI0_ENABLED


	)

111 
	#NRF_DRV_TWI_INSTANCE
(
id
) \

113 .
ªg
 = {
	`NRF_DRV_TWI_PERIPHERAL
(
id
)}, \

114 .
drv_ö°_idx
 = 
	`CONCAT_3
(
TWI
, 
id
, 
_INSTANCE_INDEX
), \

115 .
u£_ósy_dma
 = 
	`CONCAT_3
(
TWI
, 
id
, 
_USE_EASY_DMA
) \

116 }

	)

123 
uöt32_t
 
s˛
;

124 
uöt32_t
 
sda
;

125 
ƒf_twi_‰equícy_t
 
‰equícy
;

126 
uöt8_t
 
öãºu±_¥i‹ôy
;

127 
boﬁ
 
˛ór_bus_öô
;

128 
boﬁ
 
hﬁd_bus_unöô
;

129 } 
	tƒf_drv_twi_c⁄fig_t
;

134 
	#NRF_DRV_TWI_DEFAULT_CONFIG
 \

136 .
‰equícy
 = (
ƒf_twi_‰equícy_t
)
TWI_DEFAULT_CONFIG_FREQUENCY
, \

137 .
s˛
 = 31, \

138 .
sda
 = 31, \

139 .
öãºu±_¥i‹ôy
 = 
TWI_DEFAULT_CONFIG_IRQ_PRIORITY
, \

140 .
˛ór_bus_öô
 = 
TWI_DEFAULT_CONFIG_CLR_BUS_INIT
, \

141 .
hﬁd_bus_unöô
 = 
TWI_DEFAULT_CONFIG_HOLD_BUS_UNINIT
, \

142 }

	)

144 
	#NRF_DRV_TWI_FLAG_TX_POSTINC
 (1UL << 0Ë

	)

145 
	#NRF_DRV_TWI_FLAG_RX_POSTINC
 (1UL << 1Ë

	)

146 
	#NRF_DRV_TWI_FLAG_NO_XFER_EVT_HANDLER
 (1UL << 2Ë

	)

147 
	#NRF_DRV_TWI_FLAG_HOLD_XFER
 (1UL << 3Ë

	)

148 
	#NRF_DRV_TWI_FLAG_REPEATED_XFER
 (1UL << 4Ë

	)

149 
	#NRF_DRV_TWI_FLAG_TX_NO_STOP
 (1UL << 5Ë

	)

156 
NRF_DRV_TWI_EVT_DONE
,

157 
NRF_DRV_TWI_EVT_ADDRESS_NACK
,

158 
NRF_DRV_TWI_EVT_DATA_NACK


159 } 
	tƒf_drv_twi_evt_ty≥_t
;

166 
NRF_DRV_TWI_XFER_TX
,

167 
NRF_DRV_TWI_XFER_RX
,

168 
NRF_DRV_TWI_XFER_TXRX
,

169 
NRF_DRV_TWI_XFER_TXTX


170 } 
	tƒf_drv_twi_x„r_ty≥_t
;

177 
ƒf_drv_twi_x„r_ty≥_t
 
ty≥
;

178 
uöt8_t
 
addªss
;

179 
uöt8_t
 
¥im¨y_Àngth
;

180 
uöt8_t
 
£c⁄d¨y_Àngth
;

181 
uöt8_t
 * 
p_¥im¨y_buf
;

182 
uöt8_t
 * 
p_£c⁄d¨y_buf
;

183 } 
	tƒf_drv_twi_x„r_desc_t
;

187 
	#NRF_DRV_TWI_XFER_DESC_TX
(
addr
, 
p_d©a
, 
Àngth
) \

189 .
ty≥
 = 
NRF_DRV_TWI_XFER_TX
, \

190 .
addªss
 = 
addr
, \

191 .
¥im¨y_Àngth
 = 
Àngth
, \

192 .
p_¥im¨y_buf
 = 
p_d©a
, \

193 }

	)

196 
	#NRF_DRV_TWI_XFER_DESC_RX
(
addr
, 
p_d©a
, 
Àngth
) \

198 .
ty≥
 = 
NRF_DRV_TWI_XFER_RX
, \

199 .
addªss
 = 
addr
, \

200 .
¥im¨y_Àngth
 = 
Àngth
, \

201 .
p_¥im¨y_buf
 = 
p_d©a
, \

202 }

	)

205 
	#NRF_DRV_TWI_XFER_DESC_TXRX
(
addr
, 
p_tx
, 
tx_Àn
, 
p_rx
, 
rx_Àn
) \

207 .
ty≥
 = 
NRF_DRV_TWI_XFER_TXRX
, \

208 .
addªss
 = 
addr
, \

209 .
¥im¨y_Àngth
 = 
tx_Àn
, \

210 .
£c⁄d¨y_Àngth
 = 
rx_Àn
, \

211 .
p_¥im¨y_buf
 = 
p_tx
, \

212 .
p_£c⁄d¨y_buf
 = 
p_rx
, \

213 }

	)

216 
	#NRF_DRV_TWI_XFER_DESC_TXTX
(
addr
, 
p_tx
, 
tx_Àn
, 
p_tx2
, 
tx_Àn2
) \

218 .
ty≥
 = 
NRF_DRV_TWI_XFER_TXTX
, \

219 .
addªss
 = 
addr
, \

220 .
¥im¨y_Àngth
 = 
tx_Àn
, \

221 .
£c⁄d¨y_Àngth
 = 
tx_Àn2
, \

222 .
p_¥im¨y_buf
 = 
p_tx
, \

223 .
p_£c⁄d¨y_buf
 = 
p_tx2
, \

224 }

	)

231 
ƒf_drv_twi_evt_ty≥_t
 
ty≥
;

232 
ƒf_drv_twi_x„r_desc_t
 
x„r_desc
;

233 } 
	tƒf_drv_twi_evt_t
;

238 (* 
ƒf_drv_twi_evt_h™dÀr_t
)(
	tƒf_drv_twi_evt_t
 c⁄° * 
	tp_evít
,

239 * 
	tp_c⁄ãxt
);

256 
ªt_code_t
 
ƒf_drv_twi_öô
(
ƒf_drv_twi_t
 c⁄° * 
p_ö°™˚
,

257 
ƒf_drv_twi_c⁄fig_t
 c⁄° * 
p_c⁄fig
,

258 
ƒf_drv_twi_evt_h™dÀr_t
 
evít_h™dÀr
,

259 * 
p_c⁄ãxt
);

266 
ƒf_drv_twi_unöô
(
ƒf_drv_twi_t
 c⁄° * 
p_ö°™˚
);

273 
ƒf_drv_twi_íabÀ
(
ƒf_drv_twi_t
 c⁄° * 
p_ö°™˚
);

280 
ƒf_drv_twi_dißbÀ
(
ƒf_drv_twi_t
 c⁄° * 
p_ö°™˚
);

303 
ªt_code_t
 
ƒf_drv_twi_tx
(
ƒf_drv_twi_t
 c⁄° * 
p_ö°™˚
,

304 
uöt8_t
 
addªss
,

305 
uöt8_t
 c⁄° * 
p_d©a
,

306 
uöt8_t
 
Àngth
,

307 
boﬁ
 
no_°›
);

327 
ªt_code_t
 
ƒf_drv_twi_rx
(
ƒf_drv_twi_t
 c⁄° * 
p_ö°™˚
,

328 
uöt8_t
 
addªss
,

329 
uöt8_t
 * 
p_d©a
,

330 
uöt8_t
 
Àngth
);

381 
ªt_code_t
 
ƒf_drv_twi_x„r
(
ƒf_drv_twi_t
 c⁄° * 
p_ö°™˚
,

382 
ƒf_drv_twi_x„r_desc_t
 c⁄° * 
p_x„r_desc
,

383 
uöt32_t
 
Êags
);

394 
uöt32_t
 
ƒf_drv_twi_d©a_cou¡_gë
(
ƒf_drv_twi_t
 c⁄° * c⁄° 
p_ö°™˚
);

407 
uöt32_t
 
ƒf_drv_twi_°¨t_èsk_gë
(
ƒf_drv_twi_t
 c⁄° * 
p_ö°™˚
, 
ƒf_drv_twi_x„r_ty≥_t
 
x„r_ty≥
);

419 
uöt32_t
 
ƒf_drv_twi_°›≥d_evít_gë
(
ƒf_drv_twi_t
 c⁄° * 
p_ö°™˚
);

425 #ifde‡
__˝lu•lus


	@D:\Private\Programing\MCU\Nordic\ble_app_template\nRF5_SDK_12.3.0_d7731ad\components\drivers_nrf\uart\nrf_drv_uart.c

40 
	~"sdk_comm⁄.h
"

41 #i‡
NRF_MODULE_ENABLED
(
UART
)

42 
	~"ƒf_drv_u¨t.h
"

43 
	~"ƒf_as£π.h
"

44 
	~"ƒf_drv_comm⁄.h
"

45 
	~"ƒf_gpio.h
"

46 
	~"≠p_utû_∂©f‹m.h
"

48 
	#NRF_LOG_MODULE_NAME
 "UART"

	)

50 #i‡
UART_CONFIG_LOG_ENABLED


51 
	#NRF_LOG_LEVEL
 
UART_CONFIG_LOG_LEVEL


	)

52 
	#NRF_LOG_INFO_COLOR
 
UART_CONFIG_INFO_COLOR


	)

53 
	#NRF_LOG_DEBUG_COLOR
 
UART_CONFIG_DEBUG_COLOR


	)

54 
	#EVT_TO_STR
(
evít
Ë”víà=
NRF_UART_EVENT_ERROR
 ? "NRF_UART_EVENT_ERROR" : "UNKNOWN EVENT")

	)

56 
	#EVT_TO_STR
(
evít
Ë""

	)

57 
	#NRF_LOG_LEVEL
 0

	)

59 
	~"ƒf_log.h
"

60 
	~"ƒf_log_˘æ.h
"

62 #i‡(
deföed
(
UARTE_IN_USE
Ë&& deföed(
UART_IN_USE
))

64 
	#CODE_FOR_UARTE
(
code
Ëi‡(
m_cb
[
p_ö°™˚
->
drv_ö°_idx
].
u£_ósy_dma
Ë{ codê}

	)

65 
	#CODE_FOR_UARTE_INT
(
idx
, 
code
Ëi‡(
m_cb
[idx].
u£_ósy_dma
Ë{ codê}

	)

66 
	#CODE_FOR_UART
(
code
Ë{ codê}

	)

67 #ñi‡(
deföed
(
UARTE_IN_USE
Ë&& !deföed(
UART_IN_USE
))

69 
	#CODE_FOR_UARTE
(
code
Ë{ codê}

	)

70 
	#CODE_FOR_UARTE_INT
(
idx
, 
code
Ë{ codê}

	)

71 
	#CODE_FOR_UART
(
code
)

	)

72 #ñi‡(!
deföed
(
UARTE_IN_USE
Ë&& deföed(
UART_IN_USE
))

74 
	#CODE_FOR_UARTE
(
code
)

	)

75 
	#CODE_FOR_UARTE_INT
(
idx
, 
code
)

	)

76 
	#CODE_FOR_UART
(
code
Ë{ codê}

	)

81 
	#TX_COUNTER_ABORT_REQ_VALUE
 256

	)

85 * 
	mp_c⁄ãxt
;

86 
ƒf_u¨t_evít_h™dÀr_t
 
	mh™dÀr
;

87 
uöt8_t
 c⁄° * 
	mp_tx_buf„r
;

88 
uöt8_t
 * 
	mp_rx_buf„r
;

89 
uöt8_t
 * 
	mp_rx_£c⁄d¨y_buf„r
;

90 vﬁ©ûê
uöt16_t
 
	mtx_cou¡î
;

91 
uöt8_t
 
	mtx_buf„r_Àngth
;

92 
uöt8_t
 
	mrx_buf„r_Àngth
;

93 
uöt8_t
 
	mrx_£c⁄d¨y_buf„r_Àngth
;

94 vﬁ©ûê
uöt8_t
 
	mrx_cou¡î
;

95 
boﬁ
 
	mrx_íabÀd
;

96 
ƒf_drv_°©e_t
 
	m°©e
;

97 #i‡(
deföed
(
UARTE_IN_USE
Ë&& deföed(
UART_IN_USE
))

98 
boﬁ
 
	mu£_ósy_dma
;

100 } 
	tu¨t_c⁄åﬁ_block_t
;

102 
u¨t_c⁄åﬁ_block_t
 
	gm_cb
[
UART_ENABLED_COUNT
];

104 
__STATIC_INLINE
 
	$≠∂y_c⁄fig
(
ƒf_drv_u¨t_t
 c⁄° * 
p_ö°™˚
, 
ƒf_drv_u¨t_c⁄fig_t
 c⁄° * 
p_c⁄fig
)

106 i‡(
p_c⁄fig
->
p£…xd
 !
NRF_UART_PSEL_DISCONNECTED
)

108 
	`ƒf_gpio_pö_£t
(
p_c⁄fig
->
p£…xd
);

109 
	`ƒf_gpio_cfg_ouçut
(
p_c⁄fig
->
p£…xd
);

111 i‡(
p_c⁄fig
->
p£Ãxd
 !
NRF_UART_PSEL_DISCONNECTED
)

113 
	`ƒf_gpio_cfg_öput
(
p_c⁄fig
->
p£Ãxd
, 
NRF_GPIO_PIN_NOPULL
);

116 
CODE_FOR_UARTE


118 
	`ƒf_u¨ã_baudøã_£t
(
p_ö°™˚
->
ªg
.
p_u¨ã
, (
ƒf_u¨ã_baudøã_t
)
p_c⁄fig
->
baudøã
);

119 
	`ƒf_u¨ã_c⁄figuª
(
p_ö°™˚
->
ªg
.
p_u¨ã
, (
ƒf_u¨ã_∑rôy_t
)
p_c⁄fig
->
∑rôy
,

120 (
ƒf_u¨ã_hwfc_t
)
p_c⁄fig
->
hwfc
);

121 
	`ƒf_u¨ã_txrx_pös_£t
(
p_ö°™˚
->
ªg
.
p_u¨ã
, 
p_c⁄fig
->
p£…xd
,Ö_c⁄fig->
p£Ãxd
);

122 i‡(
p_c⁄fig
->
hwfc
 =
NRF_UART_HWFC_ENABLED
)

124 i‡(
p_c⁄fig
->
p£l˘s
 !
NRF_UART_PSEL_DISCONNECTED
)

126 
	`ƒf_gpio_cfg_öput
(
p_c⁄fig
->
p£l˘s
, 
NRF_GPIO_PIN_NOPULL
);

128 i‡(
p_c⁄fig
->
p£Ãts
 !
NRF_UART_PSEL_DISCONNECTED
)

130 
	`ƒf_gpio_pö_£t
(
p_c⁄fig
->
p£Ãts
);

131 
	`ƒf_gpio_cfg_ouçut
(
p_c⁄fig
->
p£Ãts
);

133 
	`ƒf_u¨ã_hwfc_pös_£t
(
p_ö°™˚
->
ªg
.
p_u¨ã
, 
p_c⁄fig
->
p£Ãts
,Ö_c⁄fig->
p£l˘s
);

136 
CODE_FOR_UART


138 
	`ƒf_u¨t_baudøã_£t
(
p_ö°™˚
->
ªg
.
p_u¨t
, 
p_c⁄fig
->
baudøã
);

139 
	`ƒf_u¨t_c⁄figuª
(
p_ö°™˚
->
ªg
.
p_u¨t
, 
p_c⁄fig
->
∑rôy
,Ö_c⁄fig->
hwfc
);

140 
	`ƒf_u¨t_txrx_pös_£t
(
p_ö°™˚
->
ªg
.
p_u¨t
, 
p_c⁄fig
->
p£…xd
,Ö_c⁄fig->
p£Ãxd
);

141 i‡(
p_c⁄fig
->
hwfc
 =
NRF_UART_HWFC_ENABLED
)

143 i‡(
p_c⁄fig
->
p£l˘s
 !
NRF_UART_PSEL_DISCONNECTED
)

145 
	`ƒf_gpio_cfg_öput
(
p_c⁄fig
->
p£l˘s
, 
NRF_GPIO_PIN_NOPULL
);

147 i‡(
p_c⁄fig
->
p£Ãts
 !
NRF_UART_PSEL_DISCONNECTED
)

149 
	`ƒf_gpio_pö_£t
(
p_c⁄fig
->
p£Ãts
);

150 
	`ƒf_gpio_cfg_ouçut
(
p_c⁄fig
->
p£Ãts
);

152 
	`ƒf_u¨t_hwfc_pös_£t
(
p_ö°™˚
->
ªg
.
p_u¨t
, 
p_c⁄fig
->
p£Ãts
,Ö_c⁄fig->
p£l˘s
);

155 
	}
}

157 
__STATIC_INLINE
 
	$öãºu±s_íabÀ
(c⁄° 
ƒf_drv_u¨t_t
 * 
p_ö°™˚
, 
uöt8_t
 
öãºu±_¥i‹ôy
)

159 
CODE_FOR_UARTE


161 
	`ƒf_u¨ã_evít_˛ór
(
p_ö°™˚
->
ªg
.
p_u¨ã
, 
NRF_UARTE_EVENT_ENDRX
);

162 
	`ƒf_u¨ã_evít_˛ór
(
p_ö°™˚
->
ªg
.
p_u¨ã
, 
NRF_UARTE_EVENT_ENDTX
);

163 
	`ƒf_u¨ã_evít_˛ór
(
p_ö°™˚
->
ªg
.
p_u¨ã
, 
NRF_UARTE_EVENT_ERROR
);

164 
	`ƒf_u¨ã_evít_˛ór
(
p_ö°™˚
->
ªg
.
p_u¨ã
, 
NRF_UARTE_EVENT_RXTO
);

165 
	`ƒf_u¨ã_öt_íabÀ
(
p_ö°™˚
->
ªg
.
p_u¨ã
, 
NRF_UARTE_INT_ENDRX_MASK
 |

166 
NRF_UARTE_INT_ENDTX_MASK
 |

167 
NRF_UARTE_INT_ERROR_MASK
 |

168 
NRF_UARTE_INT_RXTO_MASK
);

169 
	`ƒf_drv_comm⁄_úq_íabÀ
(
	`ƒf_drv_gë_IRQn
((*)
p_ö°™˚
->
ªg
.
p_u¨ã
), 
öãºu±_¥i‹ôy
);

171 
CODE_FOR_UART


173 
	`ƒf_u¨t_evít_˛ór
(
p_ö°™˚
->
ªg
.
p_u¨t
, 
NRF_UART_EVENT_TXDRDY
);

174 
	`ƒf_u¨t_evít_˛ór
(
p_ö°™˚
->
ªg
.
p_u¨t
, 
NRF_UART_EVENT_RXTO
);

175 
	`ƒf_u¨t_öt_íabÀ
(
p_ö°™˚
->
ªg
.
p_u¨t
, 
NRF_UART_INT_MASK_TXDRDY
 |

176 
NRF_UART_INT_MASK_RXTO
);

177 
	`ƒf_drv_comm⁄_úq_íabÀ
(
	`ƒf_drv_gë_IRQn
((*)
p_ö°™˚
->
ªg
.
p_u¨t
), 
öãºu±_¥i‹ôy
);

179 
	}
}

181 
__STATIC_INLINE
 
	$öãºu±s_dißbÀ
(c⁄° 
ƒf_drv_u¨t_t
 * 
p_ö°™˚
)

183 
CODE_FOR_UARTE


185 
	`ƒf_u¨ã_öt_dißbÀ
(
p_ö°™˚
->
ªg
.
p_u¨ã
, 
NRF_UARTE_INT_ENDRX_MASK
 |

186 
NRF_UARTE_INT_ENDTX_MASK
 |

187 
NRF_UARTE_INT_ERROR_MASK
 |

188 
NRF_UARTE_INT_RXTO_MASK
);

189 
	`ƒf_drv_comm⁄_úq_dißbÀ
(
	`ƒf_drv_gë_IRQn
((*)
p_ö°™˚
->
ªg
.
p_u¨ã
));

191 
CODE_FOR_UART


193 
	`ƒf_u¨t_öt_dißbÀ
(
p_ö°™˚
->
ªg
.
p_u¨t
, 
NRF_UART_INT_MASK_RXDRDY
 |

194 
NRF_UART_INT_MASK_TXDRDY
 |

195 
NRF_UART_INT_MASK_ERROR
 |

196 
NRF_UART_INT_MASK_RXTO
);

197 
	`ƒf_drv_comm⁄_úq_dißbÀ
(
	`ƒf_drv_gë_IRQn
((*)
p_ö°™˚
->
ªg
.
p_u¨t
));

200 
	}
}

202 
__STATIC_INLINE
 
	$pös_to_deÁu…
(c⁄° 
ƒf_drv_u¨t_t
 * 
p_ö°™˚
)

205 
uöt32_t
 
txd
;

206 
uöt32_t
 
rxd
;

207 
uöt32_t
 
πs
;

208 
uöt32_t
 
˘s
;

210 
CODE_FOR_UARTE


212 
txd
 = 
	`ƒf_u¨ã_tx_pö_gë
(
p_ö°™˚
->
ªg
.
p_u¨ã
);

213 
rxd
 = 
	`ƒf_u¨ã_rx_pö_gë
(
p_ö°™˚
->
ªg
.
p_u¨ã
);

214 
πs
 = 
	`ƒf_u¨ã_πs_pö_gë
(
p_ö°™˚
->
ªg
.
p_u¨ã
);

215 
˘s
 = 
	`ƒf_u¨ã_˘s_pö_gë
(
p_ö°™˚
->
ªg
.
p_u¨ã
);

216 
	`ƒf_u¨ã_txrx_pös_disc⁄√˘
(
p_ö°™˚
->
ªg
.
p_u¨ã
);

217 
	`ƒf_u¨ã_hwfc_pös_disc⁄√˘
(
p_ö°™˚
->
ªg
.
p_u¨ã
);

219 
CODE_FOR_UART


221 
txd
 = 
	`ƒf_u¨t_tx_pö_gë
(
p_ö°™˚
->
ªg
.
p_u¨t
);

222 
rxd
 = 
	`ƒf_u¨t_rx_pö_gë
(
p_ö°™˚
->
ªg
.
p_u¨t
);

223 
πs
 = 
	`ƒf_u¨t_πs_pö_gë
(
p_ö°™˚
->
ªg
.
p_u¨t
);

224 
˘s
 = 
	`ƒf_u¨t_˘s_pö_gë
(
p_ö°™˚
->
ªg
.
p_u¨t
);

225 
	`ƒf_u¨t_txrx_pös_disc⁄√˘
(
p_ö°™˚
->
ªg
.
p_u¨t
);

226 
	`ƒf_u¨t_hwfc_pös_disc⁄√˘
(
p_ö°™˚
->
ªg
.
p_u¨t
);

229 i‡(
txd
 !
NRF_UART_PSEL_DISCONNECTED
)

231 
	`ƒf_gpio_cfg_deÁu…
(
txd
);

234 i‡(
rxd
 !
NRF_UART_PSEL_DISCONNECTED
)

236 
	`ƒf_gpio_cfg_deÁu…
(
rxd
);

239 i‡(
˘s
 !
NRF_UART_PSEL_DISCONNECTED
)

241 
	`ƒf_gpio_cfg_deÁu…
(
˘s
);

244 i‡(
πs
 !
NRF_UART_PSEL_DISCONNECTED
)

246 
	`ƒf_gpio_cfg_deÁu…
(
πs
);

249 
	}
}

251 
__STATIC_INLINE
 
	$u¨t_íabÀ
(c⁄° 
ƒf_drv_u¨t_t
 * 
p_ö°™˚
)

253 
	`CODE_FOR_UARTE
(
	`ƒf_u¨ã_íabÀ
(
p_ö°™˚
->
ªg
.
p_u¨ã
);)

254 
	`CODE_FOR_UART
(
	`ƒf_u¨t_íabÀ
(
p_ö°™˚
->
ªg
.
p_u¨t
););

255 
	}
}

257 
__STATIC_INLINE
 
	$u¨t_dißbÀ
(c⁄° 
ƒf_drv_u¨t_t
 * 
p_ö°™˚
)

259 
	`CODE_FOR_UARTE
(
	`ƒf_u¨ã_dißbÀ
(
p_ö°™˚
->
ªg
.
p_u¨ã
);)

260 
	`CODE_FOR_UART
(
	`ƒf_u¨t_dißbÀ
(
p_ö°™˚
->
ªg
.
p_u¨t
););

261 
	}
}

263 
ªt_code_t
 
	$ƒf_drv_u¨t_öô
(c⁄° 
ƒf_drv_u¨t_t
 * 
p_ö°™˚
, 
ƒf_drv_u¨t_c⁄fig_t
 c⁄° * 
p_c⁄fig
,

264 
ƒf_u¨t_evít_h™dÀr_t
 
evít_h™dÀr
)

266 
	`ASSERT
(
p_c⁄fig
);

267 
u¨t_c⁄åﬁ_block_t
 * 
p_cb
 = &
m_cb
[
p_ö°™˚
->
drv_ö°_idx
];

268 
ªt_code_t
 
îr_code
 = 
NRF_SUCCESS
;

270 i‡(
p_cb
->
°©e
 !
NRF_DRV_STATE_UNINITIALIZED
)

272 
îr_code
 = 
NRF_ERROR_INVALID_STATE
;

273 
	`NRF_LOG_WARNING
("Fun˘i⁄: %s,Éº‹ code: %s.\r\n", (
uöt32_t
)
__func__
, (uöt32_t)
	`ERR_TO_STR
(
îr_code
));

274  
îr_code
;

277 #i‡(
	`deföed
(
UARTE_IN_USE
Ë&& deföed(
UART_IN_USE
))

278 
p_cb
->
u£_ósy_dma
 = 
p_c⁄fig
->use_easy_dma;

280 
	`≠∂y_c⁄fig
(
p_ö°™˚
, 
p_c⁄fig
);

282 
p_cb
->
h™dÀr
 = 
evít_h™dÀr
;

283 
p_cb
->
p_c⁄ãxt
 = 
p_c⁄fig
->p_context;

285 i‡(
p_cb
->
h™dÀr
)

287 
	`öãºu±s_íabÀ
(
p_ö°™˚
, 
p_c⁄fig
->
öãºu±_¥i‹ôy
);

290 
	`u¨t_íabÀ
(
p_ö°™˚
);

291 
p_cb
->
rx_buf„r_Àngth
 = 0;

292 
p_cb
->
rx_£c⁄d¨y_buf„r_Àngth
 = 0;

293 
p_cb
->
tx_buf„r_Àngth
 = 0;

294 
p_cb
->
°©e
 = 
NRF_DRV_STATE_INITIALIZED
;

295 
p_cb
->
rx_íabÀd
 = 
Ál£
;

296 
	`NRF_LOG_WARNING
("Fun˘i⁄: %s,Éº‹ code: %s.\r\n", (
uöt32_t
)
__func__
, (uöt32_t)
	`ERR_TO_STR
(
îr_code
));

297  
îr_code
;

298 
	}
}

300 
	$ƒf_drv_u¨t_unöô
(c⁄° 
ƒf_drv_u¨t_t
 * 
p_ö°™˚
)

302 
u¨t_c⁄åﬁ_block_t
 * 
p_cb
 = &
m_cb
[
p_ö°™˚
->
drv_ö°_idx
];

304 
	`u¨t_dißbÀ
(
p_ö°™˚
);

306 i‡(
p_cb
->
h™dÀr
)

308 
	`öãºu±s_dißbÀ
(
p_ö°™˚
);

311 
	`pös_to_deÁu…
(
p_ö°™˚
);

313 
p_cb
->
°©e
 = 
NRF_DRV_STATE_UNINITIALIZED
;

314 
p_cb
->
h™dÀr
 = 
NULL
;

315 
	`NRF_LOG_INFO
("In°™˚ unöôülized: %d.\r\n", 
p_ö°™˚
->
drv_ö°_idx
);

316 
	}
}

318 #i‡
deföed
(
UART_IN_USE
)

319 
__STATIC_INLINE
 
	$tx_byã
(
NRF_UART_Ty≥
 * 
p_u¨t
, 
u¨t_c⁄åﬁ_block_t
 * 
p_cb
)

321 
	`ƒf_u¨t_evít_˛ór
(
p_u¨t
, 
NRF_UART_EVENT_TXDRDY
);

322 
uöt8_t
 
txd
 = 
p_cb
->
p_tx_buf„r
[p_cb->
tx_cou¡î
];

323 
p_cb
->
tx_cou¡î
++;

324 
	`ƒf_u¨t_txd_£t
(
p_u¨t
, 
txd
);

325 
	}
}

327 
__STATIC_INLINE
 
ªt_code_t
 
	$ƒf_drv_u¨t_tx_f‹_u¨t
(c⁄° 
ƒf_drv_u¨t_t
 * 
p_ö°™˚
)

329 
u¨t_c⁄åﬁ_block_t
 * 
p_cb
 = &
m_cb
[
p_ö°™˚
->
drv_ö°_idx
];

330 
ªt_code_t
 
îr_code
 = 
NRF_SUCCESS
;

332 
	`ƒf_u¨t_evít_˛ór
(
p_ö°™˚
->
ªg
.
p_u¨t
, 
NRF_UART_EVENT_TXDRDY
);

333 
	`ƒf_u¨t_èsk_åiggî
(
p_ö°™˚
->
ªg
.
p_u¨t
, 
NRF_UART_TASK_STARTTX
);

335 
	`tx_byã
(
p_ö°™˚
->
ªg
.
p_u¨t
, 
p_cb
);

337 i‡(
p_cb
->
h™dÀr
 =
NULL
)

339 
p_cb
->
tx_cou¡î
 < (
uöt16_t
Ëp_cb->
tx_buf„r_Àngth
)

341 !
	`ƒf_u¨t_evít_check
(
p_ö°™˚
->
ªg
.
p_u¨t
, 
NRF_UART_EVENT_TXDRDY
) &&

342 
p_cb
->
tx_cou¡î
 !
TX_COUNTER_ABORT_REQ_VALUE
)

345 i‡(
p_cb
->
tx_cou¡î
 !
TX_COUNTER_ABORT_REQ_VALUE
)

347 
	`tx_byã
(
p_ö°™˚
->
ªg
.
p_u¨t
, 
p_cb
);

351 i‡(
p_cb
->
tx_cou¡î
 =
TX_COUNTER_ABORT_REQ_VALUE
)

353 
îr_code
 = 
NRF_ERROR_FORBIDDEN
;

357 !
	`ƒf_u¨t_evít_check
(
p_ö°™˚
->
ªg
.
p_u¨t
, 
NRF_UART_EVENT_TXDRDY
))

360 
	`ƒf_u¨t_èsk_åiggî
(
p_ö°™˚
->
ªg
.
p_u¨t
, 
NRF_UART_TASK_STOPTX
);

362 
p_cb
->
tx_buf„r_Àngth
 = 0;

365 
	`NRF_LOG_INFO
("Fun˘i⁄: %s,Éº‹ code: %s.\r\n", (
uöt32_t
)
__func__
, (uöt32_t)
	`ERR_TO_STR
(
îr_code
));

366  
îr_code
;

367 
	}
}

370 #i‡
deföed
(
UARTE_IN_USE
)

371 
__STATIC_INLINE
 
ªt_code_t
 
	$ƒf_drv_u¨t_tx_f‹_u¨ã
(c⁄° 
ƒf_drv_u¨t_t
 * 
p_ö°™˚
)

373 
u¨t_c⁄åﬁ_block_t
 * 
p_cb
 = &
m_cb
[
p_ö°™˚
->
drv_ö°_idx
];

374 
ªt_code_t
 
îr_code
 = 
NRF_SUCCESS
;

376 
	`ƒf_u¨ã_evít_˛ór
(
p_ö°™˚
->
ªg
.
p_u¨ã
, 
NRF_UARTE_EVENT_ENDTX
);

377 
	`ƒf_u¨ã_evít_˛ór
(
p_ö°™˚
->
ªg
.
p_u¨ã
, 
NRF_UARTE_EVENT_TXSTOPPED
);

378 
	`ƒf_u¨ã_tx_buf„r_£t
(
p_ö°™˚
->
ªg
.
p_u¨ã
, 
p_cb
->
p_tx_buf„r
,Ö_cb->
tx_buf„r_Àngth
);

379 
	`ƒf_u¨ã_èsk_åiggî
(
p_ö°™˚
->
ªg
.
p_u¨ã
, 
NRF_UARTE_TASK_STARTTX
);

381 i‡(
p_cb
->
h™dÀr
 =
NULL
)

383 
boﬁ
 
ídtx
;

384 
boﬁ
 
tx°›≥d
;

387 
ídtx
 = 
	`ƒf_u¨ã_evít_check
(
p_ö°™˚
->
ªg
.
p_u¨ã
, 
NRF_UARTE_EVENT_ENDTX
);

388 
tx°›≥d
 = 
	`ƒf_u¨ã_evít_check
(
p_ö°™˚
->
ªg
.
p_u¨ã
, 
NRF_UARTE_EVENT_TXSTOPPED
);

390 (!
ídtx
Ë&& (!
tx°›≥d
));

392 i‡(
tx°›≥d
)

394 
îr_code
 = 
NRF_ERROR_FORBIDDEN
;

396 
p_cb
->
tx_buf„r_Àngth
 = 0;

399 
	`NRF_LOG_INFO
("Fun˘i⁄: %s,Éº‹ code: %s.\r\n", (
uöt32_t
)
__func__
, (uöt32_t)
	`ERR_TO_STR
(
îr_code
));

400  
îr_code
;

401 
	}
}

404 
ªt_code_t
 
	$ƒf_drv_u¨t_tx
(c⁄° 
ƒf_drv_u¨t_t
 * 
p_ö°™˚
, 
uöt8_t
 c⁄° * c⁄° 
p_d©a
, uöt8_à
Àngth
)

406 
u¨t_c⁄åﬁ_block_t
 * 
p_cb
 = &
m_cb
[
p_ö°™˚
->
drv_ö°_idx
];

407 
	`ASSERT
(
p_cb
->
°©e
 =
NRF_DRV_STATE_INITIALIZED
);

408 
	`ASSERT
(
Àngth
>0);

409 
	`ASSERT
(
p_d©a
);

411 
ªt_code_t
 
îr_code
;

413 
CODE_FOR_UARTE


417 i‡(!
	`ƒf_drv_is_ö_RAM
(
p_d©a
))

419 
îr_code
 = 
NRF_ERROR_INVALID_ADDR
;

420 
	`NRF_LOG_WARNING
("Fun˘i⁄: %s,Éº‹ code: %s.\r\n", (
uöt32_t
)
__func__
, (uöt32_t)
	`ERR_TO_STR
(
îr_code
));

421  
îr_code
;

425 i‡(
	`ƒf_drv_u¨t_tx_ö_¥ogªss
(
p_ö°™˚
))

427 
îr_code
 = 
NRF_ERROR_BUSY
;

428 
	`NRF_LOG_WARNING
("Fun˘i⁄: %s,Éº‹ code: %s.\r\n", (
uöt32_t
)
__func__
, (uöt32_t)
	`ERR_TO_STR
(
îr_code
));

429  
îr_code
;

431 
p_cb
->
tx_buf„r_Àngth
 = 
Àngth
;

432 
p_cb
->
p_tx_buf„r
 = 
p_d©a
;

433 
p_cb
->
tx_cou¡î
 = 0;

435 
	`NRF_LOG_INFO
("Tøns„∏tx_Àn: %d.\r\n", 
p_cb
->
tx_buf„r_Àngth
);

436 
	`NRF_LOG_DEBUG
("Tx data:\r\n");

437 
	`NRF_LOG_HEXDUMP_DEBUG
((
uöt8_t
 *)
p_cb
->
p_tx_buf„r
,Ö_cb->
tx_buf„r_Àngth
 * (p_cb->p_tx_buffer));

439 
CODE_FOR_UARTE


441  
	`ƒf_drv_u¨t_tx_f‹_u¨ã
(
p_ö°™˚
);

443 
CODE_FOR_UART


445  
	`ƒf_drv_u¨t_tx_f‹_u¨t
(
p_ö°™˚
);

447 
	}
}

449 
boﬁ
 
	$ƒf_drv_u¨t_tx_ö_¥ogªss
(c⁄° 
ƒf_drv_u¨t_t
 * 
p_ö°™˚
)

451  (
m_cb
[
p_ö°™˚
->
drv_ö°_idx
].
tx_buf„r_Àngth
 != 0);

452 
	}
}

454 #i‡
deföed
(
UART_IN_USE
)

455 
__STATIC_INLINE
 
	$rx_íabÀ
(c⁄° 
ƒf_drv_u¨t_t
 * 
p_ö°™˚
)

457 
	`ƒf_u¨t_evít_˛ór
(
p_ö°™˚
->
ªg
.
p_u¨t
, 
NRF_UART_EVENT_ERROR
);

458 
	`ƒf_u¨t_evít_˛ór
(
p_ö°™˚
->
ªg
.
p_u¨t
, 
NRF_UART_EVENT_RXDRDY
);

459 
	`ƒf_u¨t_èsk_åiggî
(
p_ö°™˚
->
ªg
.
p_u¨t
, 
NRF_UART_TASK_STARTRX
);

460 
	}
}

462 
__STATIC_INLINE
 
	$rx_byã
(
NRF_UART_Ty≥
 * 
p_u¨t
, 
u¨t_c⁄åﬁ_block_t
 * 
p_cb
)

464 i‡(!
p_cb
->
rx_buf„r_Àngth
)

466 
	`ƒf_u¨t_evít_˛ór
(
p_u¨t
, 
NRF_UART_EVENT_RXDRDY
);

468 (Ë
	`ƒf_u¨t_rxd_gë
(
p_u¨t
);

471 
	`ƒf_u¨t_evít_˛ór
(
p_u¨t
, 
NRF_UART_EVENT_RXDRDY
);

472 
p_cb
->
p_rx_buf„r
[p_cb->
rx_cou¡î
] = 
	`ƒf_u¨t_rxd_gë
(
p_u¨t
);

473 
p_cb
->
rx_cou¡î
++;

474 
	}
}

476 
__STATIC_INLINE
 
ªt_code_t
 
	$ƒf_drv_u¨t_rx_f‹_u¨t
(c⁄° 
ƒf_drv_u¨t_t
 * 
p_ö°™˚
, 
uöt8_t
 * 
p_d©a
, uöt8_à
Àngth
, 
boﬁ
 
£c⁄d_buf„r
)

478 
ªt_code_t
 
îr_code
;

480 
u¨t_c⁄åﬁ_block_t
 * 
p_cb
 = &
m_cb
[
p_ö°™˚
->
drv_ö°_idx
];

482 i‡((!
p_cb
->
rx_íabÀd
Ë&& (!
£c⁄d_buf„r
))

484 
	`rx_íabÀ
(
p_ö°™˚
);

487 i‡(
p_cb
->
h™dÀr
 =
NULL
)

489 
	`ƒf_u¨t_evít_˛ór
(
p_ö°™˚
->
ªg
.
p_u¨t
, 
NRF_UART_EVENT_RXTO
);

491 
boﬁ
 
rxrdy
;

492 
boﬁ
 
rxto
;

493 
boﬁ
 
îr‹
;

498 
îr‹
 = 
	`ƒf_u¨t_evít_check
(
p_ö°™˚
->
ªg
.
p_u¨t
, 
NRF_UART_EVENT_ERROR
);

499 
rxrdy
 = 
	`ƒf_u¨t_evít_check
(
p_ö°™˚
->
ªg
.
p_u¨t
, 
NRF_UART_EVENT_RXDRDY
);

500 
rxto
 = 
	`ƒf_u¨t_evít_check
(
p_ö°™˚
->
ªg
.
p_u¨t
, 
NRF_UART_EVENT_RXTO
);

501 } (!
rxrdy
Ë&& (!
rxto
Ë&& (!
îr‹
));

503 i‡(
îr‹
 || 
rxto
)

507 
	`rx_byã
(
p_ö°™˚
->
ªg
.
p_u¨t
, 
p_cb
);

508 } 
p_cb
->
rx_buf„r_Àngth
 >Ö_cb->
rx_cou¡î
);

510 
p_cb
->
rx_buf„r_Àngth
 = 0;

511 i‡(
îr‹
)

513 
îr_code
 = 
NRF_ERROR_INTERNAL
;

514 
	`NRF_LOG_WARNING
("Fun˘i⁄: %s,Éº‹ code: %s.\r\n", (
uöt32_t
)
__func__
, (uöt32_t)
	`ERR_TO_STR
(
îr_code
));

515  
îr_code
;

518 i‡(
rxto
)

520 
îr_code
 = 
NRF_ERROR_FORBIDDEN
;

521 
	`NRF_LOG_WARNING
("Fun˘i⁄: %s,Éº‹ code: %s.\r\n", (
uöt32_t
)
__func__
, (uöt32_t)
	`ERR_TO_STR
(
îr_code
));

522  
îr_code
;

525 i‡(
p_cb
->
rx_íabÀd
)

527 
	`ƒf_u¨t_èsk_åiggî
(
p_ö°™˚
->
ªg
.
p_u¨t
, 
NRF_UART_TASK_STARTRX
);

532 
	`ƒf_u¨t_èsk_åiggî
(
p_ö°™˚
->
ªg
.
p_u¨t
, 
NRF_UART_TASK_STOPRX
);

537 
	`ƒf_u¨t_öt_íabÀ
(
p_ö°™˚
->
ªg
.
p_u¨t
, 
NRF_UART_INT_MASK_RXDRDY
 | 
NRF_UART_INT_MASK_ERROR
);

539 
îr_code
 = 
NRF_SUCCESS
;

540 
	`NRF_LOG_INFO
("Fun˘i⁄: %s,Éº‹ code: %s.\r\n", (
uöt32_t
)
__func__
, (uöt32_t)
	`ERR_TO_STR
(
îr_code
));

541  
îr_code
;

542 
	}
}

545 #i‡
deföed
(
UARTE_IN_USE
)

546 
__STATIC_INLINE
 
ªt_code_t
 
	$ƒf_drv_u¨t_rx_f‹_u¨ã
(c⁄° 
ƒf_drv_u¨t_t
 * 
p_ö°™˚
, 
uöt8_t
 * 
p_d©a
, uöt8_à
Àngth
, 
boﬁ
 
£c⁄d_buf„r
)

548 
ªt_code_t
 
îr_code
 = 
NRF_SUCCESS
;

549 
	`ƒf_u¨ã_evít_˛ór
(
p_ö°™˚
->
ªg
.
p_u¨ã
, 
NRF_UARTE_EVENT_ENDRX
);

550 
	`ƒf_u¨ã_evít_˛ór
(
p_ö°™˚
->
ªg
.
p_u¨ã
, 
NRF_UARTE_EVENT_RXTO
);

551 
	`ƒf_u¨ã_rx_buf„r_£t
(
p_ö°™˚
->
ªg
.
p_u¨ã
, 
p_d©a
, 
Àngth
);

552 i‡(!
£c⁄d_buf„r
)

554 
	`ƒf_u¨ã_èsk_åiggî
(
p_ö°™˚
->
ªg
.
p_u¨ã
, 
NRF_UARTE_TASK_STARTRX
);

558 
	`ƒf_u¨ã_sh‹ts_íabÀ
(
p_ö°™˚
->
ªg
.
p_u¨ã
, 
NRF_UARTE_SHORT_ENDRX_STARTRX
);

561 i‡(
m_cb
[
p_ö°™˚
->
drv_ö°_idx
].
h™dÀr
 =
NULL
)

563 
boﬁ
 
ídrx
;

564 
boﬁ
 
rxto
;

565 
boﬁ
 
îr‹
;

567 
ídrx
 = 
	`ƒf_u¨ã_evít_check
(
p_ö°™˚
->
ªg
.
p_u¨ã
, 
NRF_UARTE_EVENT_ENDRX
);

568 
rxto
 = 
	`ƒf_u¨ã_evít_check
(
p_ö°™˚
->
ªg
.
p_u¨ã
, 
NRF_UARTE_EVENT_RXTO
);

569 
îr‹
 = 
	`ƒf_u¨ã_evít_check
(
p_ö°™˚
->
ªg
.
p_u¨ã
, 
NRF_UARTE_EVENT_ERROR
);

570 }(!
ídrx
Ë&& (!
rxto
Ë&& (!
îr‹
));

572 
m_cb
[
p_ö°™˚
->
drv_ö°_idx
].
rx_buf„r_Àngth
 = 0;

574 i‡(
îr‹
)

576 
îr_code
 = 
NRF_ERROR_INTERNAL
;

579 i‡(
rxto
)

581 
îr_code
 = 
NRF_ERROR_FORBIDDEN
;

586 
	`ƒf_u¨ã_öt_íabÀ
(
p_ö°™˚
->
ªg
.
p_u¨ã
, 
NRF_UARTE_INT_ERROR_MASK
 | 
NRF_UARTE_INT_ENDRX_MASK
);

588 
	`NRF_LOG_INFO
("Fun˘i⁄: %s,Éº‹ code: %s.\r\n", (
uöt32_t
)
__func__
, (uöt32_t)
	`ERR_TO_STR
(
îr_code
));

589  
îr_code
;

590 
	}
}

593 
ªt_code_t
 
	$ƒf_drv_u¨t_rx
(c⁄° 
ƒf_drv_u¨t_t
 * 
p_ö°™˚
, 
uöt8_t
 * 
p_d©a
, uöt8_à
Àngth
)

595 
u¨t_c⁄åﬁ_block_t
 * 
p_cb
 = &
m_cb
[
p_ö°™˚
->
drv_ö°_idx
];

597 
	`ASSERT
(
m_cb
[
p_ö°™˚
->
drv_ö°_idx
].
°©e
 =
NRF_DRV_STATE_INITIALIZED
);

598 
	`ASSERT
(
Àngth
>0);

600 
ªt_code_t
 
îr_code
;

602 
CODE_FOR_UARTE


606 i‡(!
	`ƒf_drv_is_ö_RAM
(
p_d©a
))

608 
îr_code
 = 
NRF_ERROR_INVALID_ADDR
;

609 
	`NRF_LOG_WARNING
("Fun˘i⁄: %s,Éº‹ code: %s.\r\n", (
uöt32_t
)
__func__
, (uöt32_t)
	`ERR_TO_STR
(
îr_code
));

610  
îr_code
;

614 
boﬁ
 
£c⁄d_buf„r
 = 
Ál£
;

616 i‡(
p_cb
->
h™dÀr
)

618 
CODE_FOR_UARTE


620 
	`ƒf_u¨ã_öt_dißbÀ
(
p_ö°™˚
->
ªg
.
p_u¨ã
, 
NRF_UARTE_INT_ERROR_MASK
 | 
NRF_UARTE_INT_ENDRX_MASK
);

622 
CODE_FOR_UART


624 
	`ƒf_u¨t_öt_dißbÀ
(
p_ö°™˚
->
ªg
.
p_u¨t
, 
NRF_UART_INT_MASK_RXDRDY
 | 
NRF_UART_INT_MASK_ERROR
);

627 i‡(
p_cb
->
rx_buf„r_Àngth
 != 0)

629 i‡(
p_cb
->
rx_£c⁄d¨y_buf„r_Àngth
 != 0)

631 i‡(
p_cb
->
h™dÀr
)

633 
CODE_FOR_UARTE


635 
	`ƒf_u¨ã_öt_íabÀ
(
p_ö°™˚
->
ªg
.
p_u¨ã
, 
NRF_UARTE_INT_ERROR_MASK
 | 
NRF_UARTE_INT_ENDRX_MASK
);

637 
CODE_FOR_UART


639 
	`ƒf_u¨t_öt_íabÀ
(
p_ö°™˚
->
ªg
.
p_u¨t
, 
NRF_UART_INT_MASK_RXDRDY
 | 
NRF_UART_INT_MASK_ERROR
);

642 
îr_code
 = 
NRF_ERROR_BUSY
;

643 
	`NRF_LOG_WARNING
("Fun˘i⁄: %s,Éº‹ code: %s.\r\n", (
uöt32_t
)
__func__
, (uöt32_t)
	`ERR_TO_STR
(
îr_code
));

644  
îr_code
;

646 
£c⁄d_buf„r
 = 
åue
;

649 i‡(!
£c⁄d_buf„r
)

651 
p_cb
->
rx_buf„r_Àngth
 = 
Àngth
;

652 
p_cb
->
p_rx_buf„r
 = 
p_d©a
;

653 
p_cb
->
rx_cou¡î
 = 0;

654 
p_cb
->
rx_£c⁄d¨y_buf„r_Àngth
 = 0;

658 
p_cb
->
p_rx_£c⁄d¨y_buf„r
 = 
p_d©a
;

659 
p_cb
->
rx_£c⁄d¨y_buf„r_Àngth
 = 
Àngth
;

662 
	`NRF_LOG_INFO
("Tøns„∏rx_Àn: %d.\r\n", 
Àngth
);

665 
CODE_FOR_UARTE


667  
	`ƒf_drv_u¨t_rx_f‹_u¨ã
(
p_ö°™˚
, 
p_d©a
, 
Àngth
, 
£c⁄d_buf„r
);

669 
CODE_FOR_UART


671  
	`ƒf_drv_u¨t_rx_f‹_u¨t
(
p_ö°™˚
, 
p_d©a
, 
Àngth
, 
£c⁄d_buf„r
);

673 
	}
}

675 
	$ƒf_drv_u¨t_rx_íabÀ
(c⁄° 
ƒf_drv_u¨t_t
 * 
p_ö°™˚
)

678 
CODE_FOR_UARTE


680 
	`ASSERT
(
Ál£
);

682 
CODE_FOR_UART


684 i‡(!
m_cb
[
p_ö°™˚
->
drv_ö°_idx
].
rx_íabÀd
)

686 
	`rx_íabÀ
(
p_ö°™˚
);

687 
m_cb
[
p_ö°™˚
->
drv_ö°_idx
].
rx_íabÀd
 = 
åue
;

690 
	}
}

692 
	$ƒf_drv_u¨t_rx_dißbÀ
(c⁄° 
ƒf_drv_u¨t_t
 * 
p_ö°™˚
)

695 
CODE_FOR_UARTE


697 
	`ASSERT
(
Ál£
);

699 
CODE_FOR_UART


701 
	`ƒf_u¨t_èsk_åiggî
(
p_ö°™˚
->
ªg
.
p_u¨t
, 
NRF_UART_TASK_STOPRX
);

702 
m_cb
[
p_ö°™˚
->
drv_ö°_idx
].
rx_íabÀd
 = 
Ál£
;

704 
	}
}

706 
uöt32_t
 
	$ƒf_drv_u¨t_îr‹§c_gë
(c⁄° 
ƒf_drv_u¨t_t
 * 
p_ö°™˚
)

708 
uöt32_t
 
îr§c
;

709 
CODE_FOR_UARTE


711 
	`ƒf_u¨ã_evít_˛ór
(
p_ö°™˚
->
ªg
.
p_u¨ã
, 
NRF_UARTE_EVENT_ERROR
);

712 
îr§c
 = 
	`ƒf_u¨ã_îr‹§c_gë_™d_˛ór
(
p_ö°™˚
->
ªg
.
p_u¨ã
);

714 
CODE_FOR_UART


716 
	`ƒf_u¨t_evít_˛ór
(
p_ö°™˚
->
ªg
.
p_u¨t
, 
NRF_UART_EVENT_ERROR
);

717 
îr§c
 = 
	`ƒf_u¨t_îr‹§c_gë_™d_˛ór
(
p_ö°™˚
->
ªg
.
p_u¨t
);

719  
îr§c
;

720 
	}
}

722 
__STATIC_INLINE
 
	$rx_d⁄e_evít
(
u¨t_c⁄åﬁ_block_t
 * 
p_cb
, 
uöt8_t
 
byãs
, uöt8_à* 
p_d©a
)

724 
ƒf_drv_u¨t_evít_t
 
evít
;

726 
evít
.
ty≥
 = 
NRF_DRV_UART_EVT_RX_DONE
;

727 
evít
.
d©a
.
rxtx
.
byãs
 = bytes;

728 
evít
.
d©a
.
rxtx
.
p_d©a
 =Ö_data;

730 
p_cb
->
	`h™dÀr
(&
evít
,Ö_cb->
p_c⁄ãxt
);

731 
	}
}

733 
__STATIC_INLINE
 
	$tx_d⁄e_evít
(
u¨t_c⁄åﬁ_block_t
 * 
p_cb
, 
uöt8_t
 
byãs
)

735 
ƒf_drv_u¨t_evít_t
 
evít
;

737 
evít
.
ty≥
 = 
NRF_DRV_UART_EVT_TX_DONE
;

738 
evít
.
d©a
.
rxtx
.
byãs
 = bytes;

739 
evít
.
d©a
.
rxtx
.
p_d©a
 = (
uöt8_t
 *)
p_cb
->
p_tx_buf„r
;

741 
p_cb
->
tx_buf„r_Àngth
 = 0;

743 
p_cb
->
	`h™dÀr
(&
evít
,Ö_cb->
p_c⁄ãxt
);

744 
	}
}

746 
	$ƒf_drv_u¨t_tx_ab‹t
(c⁄° 
ƒf_drv_u¨t_t
 * 
p_ö°™˚
)

748 
u¨t_c⁄åﬁ_block_t
 * 
p_cb
 = &
m_cb
[
p_ö°™˚
->
drv_ö°_idx
];

750 
CODE_FOR_UARTE


752 
	`ƒf_u¨ã_evít_˛ór
(
p_ö°™˚
->
ªg
.
p_u¨ã
, 
NRF_UARTE_EVENT_TXSTOPPED
);

753 
	`ƒf_u¨ã_èsk_åiggî
(
p_ö°™˚
->
ªg
.
p_u¨ã
, 
NRF_UARTE_TASK_STOPTX
);

754 i‡(
p_cb
->
h™dÀr
 =
NULL
)

756 !
	`ƒf_u¨ã_evít_check
(
p_ö°™˚
->
ªg
.
p_u¨ã
, 
NRF_UARTE_EVENT_TXSTOPPED
));

759 
CODE_FOR_UART


761 
	`ƒf_u¨t_èsk_åiggî
(
p_ö°™˚
->
ªg
.
p_u¨t
, 
NRF_UART_TASK_STOPTX
);

762 i‡(
p_cb
->
h™dÀr
)

764 
	`tx_d⁄e_evít
(
p_cb
,Ö_cb->
tx_cou¡î
);

768 
p_cb
->
tx_cou¡î
 = 
TX_COUNTER_ABORT_REQ_VALUE
;

771 
	`NRF_LOG_INFO
("TXÅransactionáborted.\r\n");

772 
	}
}

774 
	$ƒf_drv_u¨t_rx_ab‹t
(c⁄° 
ƒf_drv_u¨t_t
 * 
p_ö°™˚
)

776 
CODE_FOR_UARTE


778 
	`ƒf_u¨ã_èsk_åiggî
(
p_ö°™˚
->
ªg
.
p_u¨ã
, 
NRF_UARTE_TASK_STOPRX
);

780 
CODE_FOR_UART


782 
	`ƒf_u¨t_öt_dißbÀ
(
p_ö°™˚
->
ªg
.
p_u¨t
, 
NRF_UART_INT_MASK_RXDRDY
 | 
NRF_UART_INT_MASK_ERROR
);

783 
	`ƒf_u¨t_èsk_åiggî
(
p_ö°™˚
->
ªg
.
p_u¨t
, 
NRF_UART_TASK_STOPRX
);

785 
	`NRF_LOG_INFO
("RXÅransactionáborted.\r\n");

786 
	}
}

789 #i‡
deföed
(
UART_IN_USE
)

790 
__STATIC_INLINE
 
	$u¨t_úq_h™dÀr
(
NRF_UART_Ty≥
 * 
p_u¨t
, 
u¨t_c⁄åﬁ_block_t
 * 
p_cb
)

792 i‡(
	`ƒf_u¨t_öt_íabÀ_check
(
p_u¨t
, 
NRF_UART_INT_MASK_ERROR
) &&

793 
	`ƒf_u¨t_evít_check
(
p_u¨t
, 
NRF_UART_EVENT_ERROR
))

795 
ƒf_drv_u¨t_evít_t
 
evít
;

796 
	`ƒf_u¨t_evít_˛ór
(
p_u¨t
, 
NRF_UART_EVENT_ERROR
);

797 
	`NRF_LOG_DEBUG
("Evít: %s.\r\n", (
uöt32_t
)
	`EVT_TO_STR
(
NRF_UART_EVENT_ERROR
));

798 
	`ƒf_u¨t_öt_dißbÀ
(
p_u¨t
, 
NRF_UART_INT_MASK_RXDRDY
 | 
NRF_UART_INT_MASK_ERROR
);

799 i‡(!
p_cb
->
rx_íabÀd
)

801 
	`ƒf_u¨t_èsk_åiggî
(
p_u¨t
, 
NRF_UART_TASK_STOPRX
);

803 
evít
.
ty≥
 = 
NRF_DRV_UART_EVT_ERROR
;

804 
evít
.
d©a
.
îr‹
.
îr‹_mask
 = 
	`ƒf_u¨t_îr‹§c_gë_™d_˛ór
(
p_u¨t
);

805 
evít
.
d©a
.
îr‹
.
rxtx
.
byãs
 = 
p_cb
->
rx_buf„r_Àngth
;

806 
evít
.
d©a
.
îr‹
.
rxtx
.
p_d©a
 = 
p_cb
->
p_rx_buf„r
;

809 
p_cb
->
rx_buf„r_Àngth
 = 0;

810 
p_cb
->
rx_£c⁄d¨y_buf„r_Àngth
 = 0;

812 
p_cb
->
	`h™dÀr
(&
evít
,p_cb->
p_c⁄ãxt
);

814 i‡(
	`ƒf_u¨t_öt_íabÀ_check
(
p_u¨t
, 
NRF_UART_INT_MASK_RXDRDY
) &&

815 
	`ƒf_u¨t_evít_check
(
p_u¨t
, 
NRF_UART_EVENT_RXDRDY
))

817 
	`rx_byã
(
p_u¨t
, 
p_cb
);

818 i‡(
p_cb
->
rx_buf„r_Àngth
 =p_cb->
rx_cou¡î
)

820 i‡(
p_cb
->
rx_£c⁄d¨y_buf„r_Àngth
)

822 
uöt8_t
 * 
p_d©a
 = 
p_cb
->
p_rx_buf„r
;

823 
uöt8_t
 
rx_cou¡î
 = 
p_cb
->rx_counter;

826 
p_cb
->
rx_buf„r_Àngth
 =Ö_cb->
rx_£c⁄d¨y_buf„r_Àngth
;

827 
p_cb
->
p_rx_buf„r
 =Ö_cb->
p_rx_£c⁄d¨y_buf„r
;

828 
p_cb
->
rx_£c⁄d¨y_buf„r_Àngth
 = 0;

829 
p_cb
->
rx_cou¡î
 = 0;

830 
	`rx_d⁄e_evít
(
p_cb
, 
rx_cou¡î
, 
p_d©a
);

834 i‡(!
p_cb
->
rx_íabÀd
)

836 
	`ƒf_u¨t_èsk_åiggî
(
p_u¨t
, 
NRF_UART_TASK_STOPRX
);

838 
	`ƒf_u¨t_öt_dißbÀ
(
p_u¨t
, 
NRF_UART_INT_MASK_RXDRDY
 | 
NRF_UART_INT_MASK_ERROR
);

839 
p_cb
->
rx_buf„r_Àngth
 = 0;

840 
	`rx_d⁄e_evít
(
p_cb
,Ö_cb->
rx_cou¡î
,Ö_cb->
p_rx_buf„r
);

845 i‡(
	`ƒf_u¨t_evít_check
(
p_u¨t
, 
NRF_UART_EVENT_TXDRDY
))

847 i‡(
p_cb
->
tx_cou¡î
 < (
uöt16_t
Ëp_cb->
tx_buf„r_Àngth
)

849 
	`tx_byã
(
p_u¨t
, 
p_cb
);

853 
	`ƒf_u¨t_evít_˛ór
(
p_u¨t
, 
NRF_UART_EVENT_TXDRDY
);

854 i‡(
p_cb
->
tx_buf„r_Àngth
)

856 
	`tx_d⁄e_evít
(
p_cb
,Ö_cb->
tx_buf„r_Àngth
);

861 i‡(
	`ƒf_u¨t_evít_check
(
p_u¨t
, 
NRF_UART_EVENT_RXTO
))

863 
	`ƒf_u¨t_evít_˛ór
(
p_u¨t
, 
NRF_UART_EVENT_RXTO
);

866 i‡(
p_cb
->
rx_íabÀd
)

868 
	`ƒf_u¨t_èsk_åiggî
(
p_u¨t
, 
NRF_UART_TASK_STARTRX
);

870 i‡(
p_cb
->
rx_buf„r_Àngth
)

872 
p_cb
->
rx_buf„r_Àngth
 = 0;

873 
	`rx_d⁄e_evít
(
p_cb
,Ö_cb->
rx_cou¡î
,Ö_cb->
p_rx_buf„r
);

876 
	}
}

879 #i‡
deföed
(
UARTE_IN_USE
)

880 
__STATIC_INLINE
 
	$u¨ã_úq_h™dÀr
(
NRF_UARTE_Ty≥
 * 
p_u¨ã
, 
u¨t_c⁄åﬁ_block_t
 * 
p_cb
)

882 i‡(
	`ƒf_u¨ã_evít_check
(
p_u¨ã
, 
NRF_UARTE_EVENT_ERROR
))

884 
ƒf_drv_u¨t_evít_t
 
evít
;

886 
	`ƒf_u¨ã_evít_˛ór
(
p_u¨ã
, 
NRF_UARTE_EVENT_ERROR
);

888 
evít
.
ty≥
 = 
NRF_DRV_UART_EVT_ERROR
;

889 
evít
.
d©a
.
îr‹
.
îr‹_mask
 = 
	`ƒf_u¨ã_îr‹§c_gë_™d_˛ór
(
p_u¨ã
);

890 
evít
.
d©a
.
îr‹
.
rxtx
.
byãs
 = 
	`ƒf_u¨ã_rx_amou¡_gë
(
p_u¨ã
);

891 
evít
.
d©a
.
îr‹
.
rxtx
.
p_d©a
 = 
p_cb
->
p_rx_buf„r
;

894 
p_cb
->
rx_buf„r_Àngth
 = 0;

895 
p_cb
->
rx_£c⁄d¨y_buf„r_Àngth
 = 0;

897 
p_cb
->
	`h™dÀr
(&
evít
,Ö_cb->
p_c⁄ãxt
);

899 i‡(
	`ƒf_u¨ã_evít_check
(
p_u¨ã
, 
NRF_UARTE_EVENT_ENDRX
))

901 
	`ƒf_u¨ã_evít_˛ór
(
p_u¨ã
, 
NRF_UARTE_EVENT_ENDRX
);

902 
uöt8_t
 
amou¡
 = 
	`ƒf_u¨ã_rx_amou¡_gë
(
p_u¨ã
);

905 i‡(
amou¡
 =
p_cb
->
rx_buf„r_Àngth
)

907 i‡(
p_cb
->
rx_£c⁄d¨y_buf„r_Àngth
)

909 
uöt8_t
 * 
p_d©a
 = 
p_cb
->
p_rx_buf„r
;

910 
	`ƒf_u¨ã_sh‹ts_dißbÀ
(
p_u¨ã
, 
NRF_UARTE_SHORT_ENDRX_STARTRX
);

911 
p_cb
->
rx_buf„r_Àngth
 =Ö_cb->
rx_£c⁄d¨y_buf„r_Àngth
;

912 
p_cb
->
p_rx_buf„r
 =Ö_cb->
p_rx_£c⁄d¨y_buf„r
;

913 
p_cb
->
rx_£c⁄d¨y_buf„r_Àngth
 = 0;

914 
	`rx_d⁄e_evít
(
p_cb
, 
amou¡
, 
p_d©a
);

918 
p_cb
->
rx_buf„r_Àngth
 = 0;

919 
	`rx_d⁄e_evít
(
p_cb
, 
amou¡
,Ö_cb->
p_rx_buf„r
);

924 i‡(
	`ƒf_u¨ã_evít_check
(
p_u¨ã
, 
NRF_UARTE_EVENT_RXTO
))

926 
	`ƒf_u¨ã_evít_˛ór
(
p_u¨ã
, 
NRF_UARTE_EVENT_RXTO
);

927 i‡(
p_cb
->
rx_buf„r_Àngth
)

929 
p_cb
->
rx_buf„r_Àngth
 = 0;

930 
	`rx_d⁄e_evít
(
p_cb
, 
	`ƒf_u¨ã_rx_amou¡_gë
(
p_u¨ã
),Ö_cb->
p_rx_buf„r
);

934 i‡(
	`ƒf_u¨ã_evít_check
(
p_u¨ã
, 
NRF_UARTE_EVENT_ENDTX
))

936 
	`ƒf_u¨ã_evít_˛ór
(
p_u¨ã
, 
NRF_UARTE_EVENT_ENDTX
);

937 i‡(
p_cb
->
tx_buf„r_Àngth
)

939 
	`tx_d⁄e_evít
(
p_cb
, 
	`ƒf_u¨ã_tx_amou¡_gë
(
p_u¨ã
));

942 
	}
}

945 #i‡
UART0_ENABLED


946 
	$UART0_IRQH™dÀr
()

948 
CODE_FOR_UARTE_INT


950 
UART0_INSTANCE_INDEX
,

951 
	`u¨ã_úq_h™dÀr
(
NRF_UARTE0
, &
m_cb
[
UART0_INSTANCE_INDEX
]);

953 
CODE_FOR_UART


955 
	`u¨t_úq_h™dÀr
(
NRF_UART0
, &
m_cb
[
UART0_INSTANCE_INDEX
]);

957 
	}
}

960 #i‡
UART1_ENABLED


961 
	$UARTE1_IRQH™dÀr
()

963 
CODE_FOR_UARTE_INT


965 
UART1_INSTANCE_INDEX
,

966 
	`u¨ã_úq_h™dÀr
(
NRF_UARTE1
, &
m_cb
[
UART1_INSTANCE_INDEX
]);

968 
CODE_FOR_UART


970 
	`u¨t_úq_h™dÀr
(
NRF_UART1
, &
m_cb
[
UART1_INSTANCE_INDEX
]);

972 
	}
}

	@D:\Private\Programing\MCU\Nordic\ble_app_template\nRF5_SDK_12.3.0_d7731ad\components\libraries\bsp\bsp.c

41 
	~"b•.h
"

42 
	~<°ddef.h
>

43 
	~<°dio.h
>

44 
	~"n‹dic_comm⁄.h
"

45 
	~"ƒf.h
"

46 
	~"ƒf_gpio.h
"

47 
	~"ƒf_îr‹.h
"

48 
	~"b•_c⁄fig.h
"

49 
	~"bﬂrds.h
"

51 #i‚de‡
BSP_SIMPLE


52 
	~"≠p_timî.h
"

53 
	~"≠p_buâ⁄.h
"

56 #i‡
LEDS_NUMBER
 > 0 && !(
deföed
 
BSP_SIMPLE
)

57 
b•_ödiˇti⁄_t
 
	gm_°abÀ_°©e
 = 
BSP_INDICATE_IDLE
;

58 
boﬁ
 
	gm_Àds_˛ór
 = 
Ál£
;

59 
uöt32_t
 
	gm_≠p_ticks_≥r_100ms
 = 0;

60 
uöt32_t
 
	gm_ödiˇti⁄_ty≥
 = 0;

61 
APP_TIMER_DEF
(
m_Àds_timî_id
);

62 
APP_TIMER_DEF
(
m_Æît_timî_id
);

65 #i‡
BUTTONS_NUMBER
 > 0

66 #i‚de‡
BSP_SIMPLE


67 
b•_evít_ˇŒback_t
 
	gm_ªgi°îed_ˇŒback
 = 
NULL
;

68 
b•_buâ⁄_evít_cfg_t
 
	gm_evíts_li°
[
BUTTONS_NUMBER
] = {{
BSP_EVENT_NOTHING
, BSP_EVENT_NOTHING}};

69 
APP_TIMER_DEF
(
m_buâ⁄_timî_id
);

70 
b•_buâ⁄_evít_h™dÀr
(
uöt8_t
 
pö_no
, uöt8_à
buâ⁄_a˘i⁄
);

73 #i‚de‡
BSP_SIMPLE


74 c⁄° 
≠p_buâ⁄_cfg_t
 
	g≠p_buâ⁄s
[
BUTTONS_NUMBER
] =

76 #ifde‡
BSP_BUTTON_0


77 {
BSP_BUTTON_0
, 
Ál£
, 
BUTTON_PULL
, 
b•_buâ⁄_evít_h™dÀr
},

80 #ifde‡
BSP_BUTTON_1


81 {
BSP_BUTTON_1
, 
Ál£
, 
BUTTON_PULL
, 
b•_buâ⁄_evít_h™dÀr
},

84 #ifde‡
BSP_BUTTON_2


85 {
BSP_BUTTON_2
, 
Ál£
, 
BUTTON_PULL
, 
b•_buâ⁄_evít_h™dÀr
},

88 #ifde‡
BSP_BUTTON_3


89 {
BSP_BUTTON_3
, 
Ál£
, 
BUTTON_PULL
, 
b•_buâ⁄_evít_h™dÀr
},

92 #ifde‡
BSP_BUTTON_4


93 {
BSP_BUTTON_4
, 
Ál£
, 
BUTTON_PULL
, 
b•_buâ⁄_evít_h™dÀr
},

96 #ifde‡
BSP_BUTTON_5


97 {
BSP_BUTTON_5
, 
Ál£
, 
BUTTON_PULL
, 
b•_buâ⁄_evít_h™dÀr
},

100 #ifde‡
BSP_BUTTON_6


101 {
BSP_BUTTON_6
, 
Ál£
, 
BUTTON_PULL
, 
b•_buâ⁄_evít_h™dÀr
},

104 #ifde‡
BSP_BUTTON_7


105 {
BSP_BUTTON_7
, 
Ál£
, 
BUTTON_PULL
, 
b•_buâ⁄_evít_h™dÀr
},

112 #i‡(
BUTTONS_NUMBER
 > 0)

113 
boﬁ
 
	$b•_buâ⁄_is_¥es£d
(
uöt32_t
 
buâ⁄
)

115  
	`b•_bﬂrd_buâ⁄_°©e_gë
(
buâ⁄
);

116 
	}
}

119 #i‡(
BUTTONS_NUMBER
 > 0Ë&& !(
deföed
 
BSP_SIMPLE
)

125 
	$b•_buâ⁄_evít_h™dÀr
(
uöt8_t
 
pö_no
, uöt8_à
buâ⁄_a˘i⁄
)

127 
b•_evít_t
 
evít
 = 
BSP_EVENT_NOTHING
;

128 
uöt32_t
 
buâ⁄
 = 0;

129 
uöt32_t
 
îr_code
;

130 
uöt8_t
 
cuºít_l⁄g_push_pö_no
;

131 
b•_evít_t
 
ªÀa£_evít_©_push
[
BUTTONS_NUMBER
];

133 
buâ⁄
 = 
	`b•_bﬂrd_pö_to_buâ⁄_idx
(
pö_no
);

135 i‡(
buâ⁄
 < 
BUTTONS_NUMBER
)

137 
buâ⁄_a˘i⁄
)

139 
APP_BUTTON_PUSH
:

140 
evít
 = 
m_evíts_li°
[
buâ⁄
].
push_evít
;

141 i‡(
m_evíts_li°
[
buâ⁄
].
l⁄g_push_evít
 !
BSP_EVENT_NOTHING
)

143 
îr_code
 = 
	`≠p_timî_°¨t
(
m_buâ⁄_timî_id
, 
	`BSP_MS_TO_TICK
(
BSP_LONG_PUSH_TIMEOUT_MS
), (*)&
cuºít_l⁄g_push_pö_no
);

144 i‡(
îr_code
 =
NRF_SUCCESS
)

146 
cuºít_l⁄g_push_pö_no
 = 
pö_no
;

149 
ªÀa£_evít_©_push
[
buâ⁄
] = 
m_evíts_li°
[buâ⁄].
ªÀa£_evít
;

151 
APP_BUTTON_RELEASE
:

152 ()
	`≠p_timî_°›
(
m_buâ⁄_timî_id
);

153 i‡(
ªÀa£_evít_©_push
[
buâ⁄
] =
m_evíts_li°
[buâ⁄].
ªÀa£_evít
)

155 
evít
 = 
m_evíts_li°
[
buâ⁄
].
ªÀa£_evít
;

158 
BSP_BUTTON_ACTION_LONG_PUSH
:

159 
evít
 = 
m_evíts_li°
[
buâ⁄
].
l⁄g_push_evít
;

163 i‡((
evít
 !
BSP_EVENT_NOTHING
Ë&& (
m_ªgi°îed_ˇŒback
 !
NULL
))

165 
	`m_ªgi°îed_ˇŒback
(
evít
);

167 
	}
}

173 
	$buâ⁄_timî_h™dÀr
(* 
p_c⁄ãxt
)

175 
	`b•_buâ⁄_evít_h™dÀr
(*(
uöt8_t
 *)
p_c⁄ãxt
, 
BSP_BUTTON_ACTION_LONG_PUSH
);

176 
	}
}

181 #i‡
LEDS_NUMBER
 > 0 && !(
deföed
 
BSP_SIMPLE
)

185 
uöt32_t
 
	$b•_Àd_ödiˇti⁄
(
b•_ödiˇti⁄_t
 
ödiˇã
)

187 
uöt32_t
 
îr_code
 = 
NRF_SUCCESS
;

188 
uöt32_t
 
√xt_dñay
 = 0;

190 if(
m_Àds_˛ór
)

192 
m_Àds_˛ór
 = 
Ál£
;

193 
	`b•_bﬂrd_Àds_off
();

196 
ödiˇã
)

198 
BSP_INDICATE_IDLE
:

199 
	`b•_bﬂrd_Àds_off
();

200 
m_°abÀ_°©e
 = 
ödiˇã
;

203 
BSP_INDICATE_SCANNING
:

204 
BSP_INDICATE_ADVERTISING
:

206 i‡(
	`b•_bﬂrd_Àd_°©e_gë
(
BSP_LED_INDICATE_INDICATE_ADVERTISING
))

208 
	`b•_bﬂrd_Àd_off
(
BSP_LED_INDICATE_INDICATE_ADVERTISING
);

209 
√xt_dñay
 = 
ödiˇã
 ==

210 
BSP_INDICATE_ADVERTISING
 ? 
ADVERTISING_LED_OFF_INTERVAL
 :

211 
ADVERTISING_SLOW_LED_OFF_INTERVAL
;

215 
	`b•_bﬂrd_Àd_⁄
(
BSP_LED_INDICATE_INDICATE_ADVERTISING
);

216 
√xt_dñay
 = 
ödiˇã
 ==

217 
BSP_INDICATE_ADVERTISING
 ? 
ADVERTISING_LED_ON_INTERVAL
 :

218 
ADVERTISING_SLOW_LED_ON_INTERVAL
;

221 
m_°abÀ_°©e
 = 
ödiˇã
;

222 
îr_code
 = 
	`≠p_timî_°¨t
(
m_Àds_timî_id
, 
	`BSP_MS_TO_TICK
(
√xt_dñay
), 
NULL
);

225 
BSP_INDICATE_ADVERTISING_WHITELIST
:

227 i‡(
	`b•_bﬂrd_Àd_°©e_gë
(
BSP_LED_INDICATE_ADVERTISING_WHITELIST
))

229 
	`b•_bﬂrd_Àd_off
(
BSP_LED_INDICATE_ADVERTISING_WHITELIST
);

230 
√xt_dñay
 = 
ödiˇã
 ==

231 
BSP_INDICATE_ADVERTISING_WHITELIST
 ?

232 
ADVERTISING_WHITELIST_LED_OFF_INTERVAL
 :

233 
ADVERTISING_SLOW_LED_OFF_INTERVAL
;

237 
	`b•_bﬂrd_Àd_⁄
(
BSP_LED_INDICATE_ADVERTISING_WHITELIST
);

238 
√xt_dñay
 = 
ödiˇã
 ==

239 
BSP_INDICATE_ADVERTISING_WHITELIST
 ?

240 
ADVERTISING_WHITELIST_LED_ON_INTERVAL
 :

241 
ADVERTISING_SLOW_LED_ON_INTERVAL
;

243 
m_°abÀ_°©e
 = 
ödiˇã
;

244 
îr_code
 = 
	`≠p_timî_°¨t
(
m_Àds_timî_id
, 
	`BSP_MS_TO_TICK
(
√xt_dñay
), 
NULL
);

247 
BSP_INDICATE_ADVERTISING_SLOW
:

249 i‡(
	`b•_bﬂrd_Àd_°©e_gë
(
BSP_LED_INDICATE_ADVERTISING_SLOW
))

251 
	`b•_bﬂrd_Àd_off
(
BSP_LED_INDICATE_ADVERTISING_SLOW
);

252 
√xt_dñay
 = 
ödiˇã
 ==

253 
BSP_INDICATE_ADVERTISING_SLOW
 ? 
ADVERTISING_SLOW_LED_OFF_INTERVAL
 :

254 
ADVERTISING_SLOW_LED_OFF_INTERVAL
;

258 
	`b•_bﬂrd_Àd_⁄
(
BSP_LED_INDICATE_ADVERTISING_SLOW
);

259 
√xt_dñay
 = 
ödiˇã
 ==

260 
BSP_INDICATE_ADVERTISING_SLOW
 ? 
ADVERTISING_SLOW_LED_ON_INTERVAL
 :

261 
ADVERTISING_SLOW_LED_ON_INTERVAL
;

263 
m_°abÀ_°©e
 = 
ödiˇã
;

264 
îr_code
 = 
	`≠p_timî_°¨t
(
m_Àds_timî_id
, 
	`BSP_MS_TO_TICK
(
√xt_dñay
), 
NULL
);

267 
BSP_INDICATE_ADVERTISING_DIRECTED
:

269 i‡(
	`b•_bﬂrd_Àd_°©e_gë
(
BSP_LED_INDICATE_ADVERTISING_DIRECTED
))

271 
	`b•_bﬂrd_Àd_off
(
BSP_LED_INDICATE_ADVERTISING_DIRECTED
);

272 
√xt_dñay
 = 
ödiˇã
 ==

273 
BSP_INDICATE_ADVERTISING_DIRECTED
 ?

274 
ADVERTISING_DIRECTED_LED_OFF_INTERVAL
 :

275 
ADVERTISING_SLOW_LED_OFF_INTERVAL
;

279 
	`b•_bﬂrd_Àd_⁄
(
BSP_LED_INDICATE_ADVERTISING_DIRECTED
);

280 
√xt_dñay
 = 
ödiˇã
 ==

281 
BSP_INDICATE_ADVERTISING_DIRECTED
 ?

282 
ADVERTISING_DIRECTED_LED_ON_INTERVAL
 :

283 
ADVERTISING_SLOW_LED_ON_INTERVAL
;

285 
m_°abÀ_°©e
 = 
ödiˇã
;

286 
îr_code
 = 
	`≠p_timî_°¨t
(
m_Àds_timî_id
, 
	`BSP_MS_TO_TICK
(
√xt_dñay
), 
NULL
);

289 
BSP_INDICATE_BONDING
:

291 
	`b•_bﬂrd_Àd_övît
(
BSP_LED_INDICATE_BONDING
);

293 
m_°abÀ_°©e
 = 
ödiˇã
;

294 
îr_code
 =

295 
	`≠p_timî_°¨t
(
m_Àds_timî_id
, 
	`BSP_MS_TO_TICK
(
BONDING_INTERVAL
), 
NULL
);

298 
BSP_INDICATE_CONNECTED
:

299 
	`b•_bﬂrd_Àd_⁄
(
BSP_LED_INDICATE_CONNECTED
);

300 
m_°abÀ_°©e
 = 
ödiˇã
;

303 
BSP_INDICATE_SENT_OK
:

305 
m_Àds_˛ór
 = 
åue
;

306 
	`b•_bﬂrd_Àd_övît
(
BSP_LED_INDICATE_SENT_OK
);

307 
îr_code
 = 
	`≠p_timî_°¨t
(
m_Àds_timî_id
, 
	`BSP_MS_TO_TICK
(
SENT_OK_INTERVAL
), 
NULL
);

310 
BSP_INDICATE_SEND_ERROR
:

312 
m_Àds_˛ór
 = 
åue
;

313 
	`b•_bﬂrd_Àd_övît
(
BSP_LED_INDICATE_SEND_ERROR
);

314 
îr_code
 = 
	`≠p_timî_°¨t
(
m_Àds_timî_id
, 
	`BSP_MS_TO_TICK
(
SEND_ERROR_INTERVAL
), 
NULL
);

317 
BSP_INDICATE_RCV_OK
:

319 
m_Àds_˛ór
 = 
åue
;

320 
	`b•_bﬂrd_Àd_övît
(
BSP_LED_INDICATE_RCV_OK
);

321 
îr_code
 = 
	`≠p_timî_°¨t
(
m_Àds_timî_id
, 
	`BSP_MS_TO_TICK
(
RCV_OK_INTERVAL
), 
NULL
);

324 
BSP_INDICATE_RCV_ERROR
:

326 
m_Àds_˛ór
 = 
åue
;

327 
	`b•_bﬂrd_Àd_övît
(
BSP_LED_INDICATE_RCV_ERROR
);

328 
îr_code
 = 
	`≠p_timî_°¨t
(
m_Àds_timî_id
, 
	`BSP_MS_TO_TICK
(
RCV_ERROR_INTERVAL
), 
NULL
);

331 
BSP_INDICATE_FATAL_ERROR
:

333 
	`b•_bﬂrd_Àds_⁄
();

334 
m_°abÀ_°©e
 = 
ödiˇã
;

337 
BSP_INDICATE_ALERT_0
:

338 
BSP_INDICATE_ALERT_1
:

339 
BSP_INDICATE_ALERT_2
:

340 
BSP_INDICATE_ALERT_3
:

341 
BSP_INDICATE_ALERT_OFF
:

342 
îr_code
 = 
	`≠p_timî_°›
(
m_Æît_timî_id
);

343 
√xt_dñay
 = (
uöt32_t
)
BSP_INDICATE_ALERT_OFF
 - (uöt32_t)
ödiˇã
;

346 i‡(
√xt_dñay
 && (
îr_code
 =
NRF_SUCCESS
))

348 i‡(
√xt_dñay
 > 1)

350 
îr_code
 = 
	`≠p_timî_°¨t
(
m_Æît_timî_id
,

351 
	`BSP_MS_TO_TICK
((
√xt_dñay
 * 
ALERT_INTERVAL
)),

352 
NULL
);

354 
	`b•_bﬂrd_Àd_⁄
(
BSP_LED_ALERT
);

358 
	`b•_bﬂrd_Àd_off
(
BSP_LED_ALERT
);

362 
BSP_INDICATE_USER_STATE_OFF
:

363 
	`b•_bﬂrd_Àds_off
();

364 
m_°abÀ_°©e
 = 
ödiˇã
;

367 
BSP_INDICATE_USER_STATE_0
:

368 
	`b•_bﬂrd_Àds_off
();

369 
	`b•_bﬂrd_Àd_⁄
(
BSP_LED_INDICATE_USER_LED1
);

370 
m_°abÀ_°©e
 = 
ödiˇã
;

373 
BSP_INDICATE_USER_STATE_1
:

374 
	`b•_bﬂrd_Àds_off
();

375 
	`b•_bﬂrd_Àd_⁄
(
BSP_LED_INDICATE_USER_LED2
);

376 
m_°abÀ_°©e
 = 
ödiˇã
;

379 
BSP_INDICATE_USER_STATE_2
:

380 
	`b•_bﬂrd_Àds_off
();

381 
	`b•_bﬂrd_Àd_⁄
(
BSP_LED_INDICATE_USER_LED1
);

382 
	`b•_bﬂrd_Àd_⁄
(
BSP_LED_INDICATE_USER_LED2
);

383 
m_°abÀ_°©e
 = 
ödiˇã
;

386 
BSP_INDICATE_USER_STATE_3
:

388 
BSP_INDICATE_USER_STATE_ON
:

389 
	`b•_bﬂrd_Àds_⁄
();

390 
m_°abÀ_°©e
 = 
ödiˇã
;

397  
îr_code
;

398 
	}
}

408 
	$Àds_timî_h™dÀr
(* 
p_c⁄ãxt
)

410 
	`UNUSED_PARAMETER
(
p_c⁄ãxt
);

412 i‡(
m_ödiˇti⁄_ty≥
 & 
BSP_INIT_LED
)

414 
	`UNUSED_VARIABLE
(
	`b•_Àd_ödiˇti⁄
(
m_°abÀ_°©e
));

416 
	}
}

423 
	$Æît_timî_h™dÀr
(* 
p_c⁄ãxt
)

425 
	`UNUSED_PARAMETER
(
p_c⁄ãxt
);

426 
	`b•_bﬂrd_Àd_övît
(
BSP_LED_ALERT
);

427 
	}
}

433 
uöt32_t
 
	$b•_ödiˇti⁄_£t
(
b•_ödiˇti⁄_t
 
ödiˇã
)

435 
uöt32_t
 
îr_code
 = 
NRF_SUCCESS
;

437 #i‡
LEDS_NUMBER
 > 0 && !(
deföed
 
BSP_SIMPLE
)

439 i‡(
m_ödiˇti⁄_ty≥
 & 
BSP_INIT_LED
)

441 
îr_code
 = 
	`b•_Àd_ödiˇti⁄
(
ödiˇã
);

445  
îr_code
;

446 
	}
}

449 
uöt32_t
 
	$b•_öô
(
uöt32_t
 
ty≥
, uöt32_à
ticks_≥r_100ms
, 
b•_evít_ˇŒback_t
 
ˇŒback
)

451 
uöt32_t
 
îr_code
 = 
NRF_SUCCESS
;

453 #i‡
LEDS_NUMBER
 > 0 && !(
deföed
 
BSP_SIMPLE
)

454 
m_≠p_ticks_≥r_100ms
 = 
ticks_≥r_100ms
;

455 
m_ödiˇti⁄_ty≥
 = 
ty≥
;

457 
	`UNUSED_VARIABLE
(
ticks_≥r_100ms
);

460 #i‡(
BUTTONS_NUMBER
 > 0Ë&& !(
deföed
 
BSP_SIMPLE
)

461 
m_ªgi°îed_ˇŒback
 = 
ˇŒback
;

464 i‡(
ty≥
 & 
BSP_INIT_BUTTONS
)

466 
uöt32_t
 
num
;

468 
num
 = 0; (“um < 
BUTTONS_NUMBER
Ë&& (
îr_code
 =
NRF_SUCCESS
));Çum++)

470 
îr_code
 = 
	`b•_evít_to_buâ⁄_a˘i⁄_assign
(
num
, 
BSP_BUTTON_ACTION_PUSH
, 
BSP_EVENT_DEFAULT
);

473 i‡(
îr_code
 =
NRF_SUCCESS
)

475 
îr_code
 = 
	`≠p_buâ⁄_öô
((
≠p_buâ⁄_cfg_t
 *)
≠p_buâ⁄s
,

476 
BUTTONS_NUMBER
,

477 
ticks_≥r_100ms
 / 2);

480 i‡(
îr_code
 =
NRF_SUCCESS
)

482 
îr_code
 = 
	`≠p_buâ⁄_íabÀ
();

485 i‡(
îr_code
 =
NRF_SUCCESS
)

487 
îr_code
 = 
	`≠p_timî_¸óã
(&
m_buâ⁄_timî_id
,

488 
APP_TIMER_MODE_SINGLE_SHOT
,

489 
buâ⁄_timî_h™dÀr
);

492 #ñi‡(
BUTTONS_NUMBER
 > 0Ë&& (
deföed
 
BSP_SIMPLE
)

494 i‡(
ty≥
 & 
BSP_INIT_BUTTONS
)

496 
	`b•_bﬂrd_buâ⁄s_öô
();

500 #i‡
LEDS_NUMBER
 > 0 && !(
deföed
 
BSP_SIMPLE
)

502 i‡(
ty≥
 & 
BSP_INIT_LED
)

504 
	`b•_bﬂrd_Àds_öô
();

508 i‡(
îr_code
 =
NRF_SUCCESS
)

510 
îr_code
 =

511 
	`≠p_timî_¸óã
(&
m_Àds_timî_id
, 
APP_TIMER_MODE_SINGLE_SHOT
, 
Àds_timî_h™dÀr
);

514 i‡(
îr_code
 =
NRF_SUCCESS
)

516 
îr_code
 =

517 
	`≠p_timî_¸óã
(&
m_Æît_timî_id
, 
APP_TIMER_MODE_REPEATED
, 
Æît_timî_h™dÀr
);

521  
îr_code
;

522 
	}
}

525 #i‚de‡
BSP_SIMPLE


528 
uöt32_t
 
	$b•_evít_to_buâ⁄_a˘i⁄_assign
(
uöt32_t
 
buâ⁄
, 
b•_buâ⁄_a˘i⁄_t
 
a˘i⁄
, 
b•_evít_t
 
evít
)

530 
uöt32_t
 
îr_code
 = 
NRF_SUCCESS
;

532 #i‡
BUTTONS_NUMBER
 > 0

533 i‡(
buâ⁄
 < 
BUTTONS_NUMBER
)

535 i‡(
evít
 =
BSP_EVENT_DEFAULT
)

538 
evít
 = (
a˘i⁄
 =
BSP_BUTTON_ACTION_PUSH
Ë? (
b•_evít_t
)(
BSP_EVENT_KEY_0
 + 
buâ⁄
Ë: 
BSP_EVENT_NOTHING
;

540 
a˘i⁄
)

542 
BSP_BUTTON_ACTION_PUSH
:

543 
m_evíts_li°
[
buâ⁄
].
push_evít
 = 
evít
;

545 
BSP_BUTTON_ACTION_LONG_PUSH
:

546 
m_evíts_li°
[
buâ⁄
].
l⁄g_push_evít
 = 
evít
;

548 
BSP_BUTTON_ACTION_RELEASE
:

549 
m_evíts_li°
[
buâ⁄
].
ªÀa£_evít
 = 
evít
;

552 
îr_code
 = 
NRF_ERROR_INVALID_PARAM
;

558 
îr_code
 = 
NRF_ERROR_INVALID_PARAM
;

561 
îr_code
 = 
NRF_ERROR_INVALID_PARAM
;

564  
îr_code
;

565 
	}
}

570 
uöt32_t
 
	$b•_buâ⁄s_íabÀ
()

572 #i‡(
BUTTONS_NUMBER
 > 0Ë&& !
	`deföed
(
BSP_SIMPLE
)

573  
	`≠p_buâ⁄_íabÀ
();

575  
NRF_ERROR_NOT_SUPPORTED
;

577 
	}
}

579 
uöt32_t
 
	$b•_buâ⁄s_dißbÀ
()

581 #i‡(
BUTTONS_NUMBER
 > 0Ë&& !
	`deföed
(
BSP_SIMPLE
)

582  
	`≠p_buâ⁄_dißbÀ
();

584  
NRF_ERROR_NOT_SUPPORTED
;

586 
	}
}

588 
uöt32_t
 
	$b•_wakeup_buâ⁄_íabÀ
(
uöt32_t
 
buâ⁄_idx
)

590 #i‡(
BUTTONS_NUMBER
 > 0Ë&& !
	`deföed
(
BSP_SIMPLE
)

591 
	`ƒf_gpio_cfg_£n£_£t
(
	`b•_bﬂrd_buâ⁄_idx_to_pö
(
buâ⁄_idx
),

592 
BUTTONS_ACTIVE_STATE
 ? 
NRF_GPIO_PIN_SENSE_HIGH
 :
NRF_GPIO_PIN_SENSE_LOW
);

593  
NRF_SUCCESS
;

595 
	`UNUSED_PARAMETER
(
buâ⁄_idx
);

596  
NRF_ERROR_NOT_SUPPORTED
;

598 
	}
}

600 
uöt32_t
 
	$b•_wakeup_buâ⁄_dißbÀ
(
uöt32_t
 
buâ⁄_idx
)

602 #i‡(
BUTTONS_NUMBER
 > 0Ë&& !
	`deföed
(
BSP_SIMPLE
)

603 
	`ƒf_gpio_cfg_£n£_£t
(
	`b•_bﬂrd_buâ⁄_idx_to_pö
(
buâ⁄_idx
),

604 
NRF_GPIO_PIN_NOSENSE
);

605  
NRF_SUCCESS
;

607 
	`UNUSED_PARAMETER
(
buâ⁄_idx
);

608  
NRF_ERROR_NOT_SUPPORTED
;

610 
	}
}

	@D:\Private\Programing\MCU\Nordic\ble_app_template\nRF5_SDK_12.3.0_d7731ad\components\libraries\bsp\bsp_btn_ble.c

42 
	~"b•_bä_bÀ.h
"

43 
	~<°döt.h
>

44 
	~<°dboﬁ.h
>

45 
	~<°ddef.h
>

46 
	~"bÀ.h
"

47 
	~"b•.h
"

50 
	#BTN_ID_WAKEUP
 0

	)

51 
	#BTN_ID_SLEEP
 0

	)

52 
	#BTN_ID_DISCONNECT
 0

	)

53 
	#BTN_ID_WAKEUP_BOND_DELETE
 1

	)

54 
	#BTN_ID_WHITELIST_OFF
 1

	)

56 
	#BTN_ACTION_SLEEP
 
BSP_BUTTON_ACTION_RELEASE


	)

57 
	#BTN_ACTION_DISCONNECT
 
BSP_BUTTON_ACTION_LONG_PUSH


	)

58 
	#BTN_ACTION_WHITELIST_OFF
 
BSP_BUTTON_ACTION_LONG_PUSH


	)

65 
	#RETURN_ON_ERROR
(
îr_code
) \

68 i‡((
îr_code
Ë!
NRF_SUCCESS
) \

70  
îr_code
; \

73 0)

	)

79 
	#RETURN_ON_ERROR_NOT_INVALID_PARAM
(
îr_code
) \

82 i‡(((
îr_code
Ë!
NRF_SUCCESS
Ë&& (”º_codeË!
NRF_ERROR_INVALID_PARAM
)) \

84  
îr_code
; \

87 0)

	)

93 
	#RETURN_ON_ERROR_NOT_NOT_SUPPORTED
(
îr_code
) \

96 i‡(((
îr_code
Ë!
NRF_SUCCESS
Ë&& (”º_codeË!
NRF_ERROR_NOT_SUPPORTED
)) \

98  
îr_code
; \

101 0)

	)

107 
	#CALL_HANDLER_ON_ERROR
(
îr_code
) \

110 i‡(((
îr_code
Ë!
NRF_SUCCESS
Ë&& (
m_îr‹_h™dÀr
 !
NULL
)) \

112 
	`m_îr‹_h™dÀr
(
îr_code
); \

115 0)

	)

118 
b•_bä_bÀ_îr‹_h™dÀr_t
 
	gm_îr‹_h™dÀr
 = 
NULL
;

119 
uöt32_t
 
	gm_num_c⁄√˘i⁄s
 = 0;

127 
uöt32_t
 
	$c⁄√˘i⁄_buâ⁄s_c⁄figuª
()

129 
uöt32_t
 
îr_code
;

131 
îr_code
 = 
	`b•_evít_to_buâ⁄_a˘i⁄_assign
(
BTN_ID_SLEEP
,

132 
BTN_ACTION_SLEEP
,

133 
BSP_EVENT_DEFAULT
);

134 
	`RETURN_ON_ERROR_NOT_INVALID_PARAM
(
îr_code
);

136 
îr_code
 = 
	`b•_evít_to_buâ⁄_a˘i⁄_assign
(
BTN_ID_WHITELIST_OFF
,

137 
BTN_ACTION_WHITELIST_OFF
,

138 
BSP_EVENT_WHITELIST_OFF
);

139 
	`RETURN_ON_ERROR_NOT_INVALID_PARAM
(
îr_code
);

141 
îr_code
 = 
	`b•_evít_to_buâ⁄_a˘i⁄_assign
(
BTN_ID_DISCONNECT
,

142 
BTN_ACTION_DISCONNECT
,

143 
BSP_EVENT_DISCONNECT
);

144 
	`RETURN_ON_ERROR_NOT_INVALID_PARAM
(
îr_code
);

146  
NRF_SUCCESS
;

147 
	}
}

155 
uöt32_t
 
	$advîtisög_buâ⁄s_c⁄figuª
()

157 
uöt32_t
 
îr_code
;

159 
îr_code
 = 
	`b•_evít_to_buâ⁄_a˘i⁄_assign
(
BTN_ID_DISCONNECT
,

160 
BTN_ACTION_DISCONNECT
,

161 
BSP_EVENT_DEFAULT
);

162 
	`RETURN_ON_ERROR_NOT_INVALID_PARAM
(
îr_code
);

164 
îr_code
 = 
	`b•_evít_to_buâ⁄_a˘i⁄_assign
(
BTN_ID_WHITELIST_OFF
,

165 
BTN_ACTION_WHITELIST_OFF
,

166 
BSP_EVENT_WHITELIST_OFF
);

167 
	`RETURN_ON_ERROR_NOT_INVALID_PARAM
(
îr_code
);

169 
îr_code
 = 
	`b•_evít_to_buâ⁄_a˘i⁄_assign
(
BTN_ID_SLEEP
,

170 
BTN_ACTION_SLEEP
,

171 
BSP_EVENT_SLEEP
);

172 
	`RETURN_ON_ERROR_NOT_INVALID_PARAM
(
îr_code
);

174  
NRF_SUCCESS
;

175 
	}
}

186 
	$°¨tup_evít_exåa˘
(
b•_evít_t
 * 
p_°¨tup_evít
)

189 i‡(
	`b•_buâ⁄_is_¥es£d
(
BTN_ID_WAKEUP_BOND_DELETE
))

191 *
p_°¨tup_evít
 = 
BSP_EVENT_CLEAR_BONDING_DATA
;

193 i‡(
	`b•_buâ⁄_is_¥es£d
(
BTN_ID_WAKEUP
))

195 *
p_°¨tup_evít
 = 
BSP_EVENT_WAKEUP
;

199 *
p_°¨tup_evít
 = 
BSP_EVENT_NOTHING
;

201 
	}
}

204 
uöt32_t
 
	$b•_bä_bÀ_¶ìp_mode_¥ï¨e
()

206 
uöt32_t
 
îr_code
 = 
	`b•_wakeup_buâ⁄_íabÀ
(
BTN_ID_WAKEUP
);

207 
	`RETURN_ON_ERROR_NOT_NOT_SUPPORTED
(
îr_code
);

209 
îr_code
 = 
	`b•_wakeup_buâ⁄_íabÀ
(
BTN_ID_WAKEUP_BOND_DELETE
);

210 
	`RETURN_ON_ERROR_NOT_NOT_SUPPORTED
(
îr_code
);

212  
NRF_SUCCESS
;

213 
	}
}

216 
	$b•_bä_bÀ_⁄_bÀ_evt
(
bÀ_evt_t
 * 
p_bÀ_evt
)

218 
uöt32_t
 
îr_code
;

220 
p_bÀ_evt
->
hódî
.
evt_id
)

222 
BLE_GAP_EVT_CONNECTED
:

223 i‡(
m_num_c⁄√˘i⁄s
 == 0)

225 
îr_code
 = 
	`c⁄√˘i⁄_buâ⁄s_c⁄figuª
();

226 
	`CALL_HANDLER_ON_ERROR
(
îr_code
);

229 
m_num_c⁄√˘i⁄s
++;

232 
BLE_GAP_EVT_DISCONNECTED
:

233 
m_num_c⁄√˘i⁄s
--;

235 i‡(
m_num_c⁄√˘i⁄s
 == 0)

237 
îr_code
 = 
	`advîtisög_buâ⁄s_c⁄figuª
();

238 
	`CALL_HANDLER_ON_ERROR
(
îr_code
);

245 
	}
}

248 
uöt32_t
 
	$b•_bä_bÀ_öô
(
b•_bä_bÀ_îr‹_h™dÀr_t
 
îr‹_h™dÀr
, 
b•_evít_t
 * 
p_°¨tup_b•_evt
)

250 
uöt32_t
 
îr_code
 = 
NRF_SUCCESS
;

252 
m_îr‹_h™dÀr
 = 
îr‹_h™dÀr
;

254 i‡(
p_°¨tup_b•_evt
 !
NULL
)

256 
	`°¨tup_evít_exåa˘
(
p_°¨tup_b•_evt
);

259 i‡(
m_num_c⁄√˘i⁄s
 == 0)

261 
îr_code
 = 
	`advîtisög_buâ⁄s_c⁄figuª
();

264  
îr_code
;

265 
	}
}

	@D:\Private\Programing\MCU\Nordic\ble_app_template\nRF5_SDK_12.3.0_d7731ad\components\libraries\bsp\bsp_nfc.c

41 
	~"b•_nfc.h
"

42 
	~"b•.h
"

43 
	~"ƒf_≥rùhîÆs.h
"

45 #i‚de‡
BSP_SIMPLE


46 
	#BTN_ACTION_SLEEP
 
BSP_BUTTON_ACTION_RELEASE


	)

48 
ªt_code_t
 
	$b•_nfc_bä_öô
(
uöt32_t
 
¶ìp_buâ⁄
)

50 
uöt32_t
 
îr_code
 = 
	`b•_evít_to_buâ⁄_a˘i⁄_assign
(
¶ìp_buâ⁄
,

51 
BTN_ACTION_SLEEP
,

52 
BSP_EVENT_SLEEP
);

53  
îr_code
;

54 
	}
}

56 
ªt_code_t
 
	$b•_nfc_bä_deöô
(
uöt32_t
 
¶ìp_buâ⁄
)

58 
uöt32_t
 
îr_code
 = 
	`b•_evít_to_buâ⁄_a˘i⁄_assign
(
¶ìp_buâ⁄
,

59 
BTN_ACTION_SLEEP
,

60 
BSP_EVENT_DEFAULT
);

61  
îr_code
;

62 
	}
}

64 
ªt_code_t
 
	$b•_nfc_¶ìp_mode_¥ï¨e
()

66 #i‡
	`deföed
(
NFCT_PRESENT
)

67 
NRF_NFCT
->
TASKS_SENSE
 = 1;

68  
NRF_SUCCESS
;

70  
NRF_ERROR_NOT_SUPPORTED
;

72 
	}
}

	@D:\Private\Programing\MCU\Nordic\ble_app_template\nRF5_SDK_12.3.0_d7731ad\components\libraries\button\app_button.c

40 
	~"sdk_comm⁄.h
"

41 #i‡
NRF_MODULE_ENABLED
(
BUTTON
)

42 
	~"≠p_buâ⁄.h
"

43 
	~"≠p_timî.h
"

44 
	~"≠p_îr‹.h
"

45 
	~"ƒf_drv_gpiŸe.h
"

46 
	~"ƒf_as£π.h
"

49 
≠p_buâ⁄_cfg_t
 c⁄° * 
	gmp_buâ⁄s
 = 
NULL
;

50 
uöt8_t
 
	gm_buâ⁄_cou¡
;

51 
uöt32_t
 
	gm_dëe˘i⁄_dñay
;

52 
APP_TIMER_DEF
(
m_dëe˘i⁄_dñay_timî_id
);

55 
uöt32_t
 
	gm_pö_°©e
;

56 
uöt32_t
 
	gm_pö_å™sôi⁄
;

70 
	$dëe˘i⁄_dñay_timeout_h™dÀr
(* 
p_c⁄ãxt
)

72 
uöt8_t
 
i
;

75 
i
 = 0; i < 
m_buâ⁄_cou¡
; i++)

77 
≠p_buâ⁄_cfg_t
 c⁄° * 
p_bä
 = &
mp_buâ⁄s
[
i
];

78 
uöt32_t
 
bä_mask
 = 1 << 
p_bä
->
pö_no
;

79 i‡(
bä_mask
 & 
m_pö_å™sôi⁄
)

81 
m_pö_å™sôi⁄
 &~
bä_mask
;

82 
boﬁ
 
pö_is_£t
 = 
	`ƒf_drv_gpiŸe_ö_is_£t
(
p_bä
->
pö_no
);

83 i‡((
m_pö_°©e
 & (1 << 
p_bä
->
pö_no
)Ë=(
pö_is_£t
 <<Ö_btn->pin_no))

85 
uöt32_t
 
å™sôi⁄
 = !(
pö_is_£t
 ^ (
p_bä
->
a˘ive_°©e
 =
APP_BUTTON_ACTIVE_HIGH
));

87 i‡(
p_bä
->
buâ⁄_h™dÀr
)

89 
p_bä
->
	`buâ⁄_h™dÀr
’_bä->
pö_no
, 
å™sôi⁄
);

94 
	}
}

96 
	$gpiŸe_evít_h™dÀr
(
ƒf_drv_gpiŸe_pö_t
 
pö
, 
ƒf_gpiŸe_pﬁ¨ôy_t
 
a˘i⁄
)

98 
uöt32_t
 
îr_code
;

99 
uöt32_t
 
pö_mask
 = 1 << 
pö
;

105 
îr_code
 = 
	`≠p_timî_°›
(
m_dëe˘i⁄_dñay_timî_id
);

106 i‡(
îr_code
 !
NRF_SUCCESS
)

113 i‡(!(
m_pö_å™sôi⁄
 & 
pö_mask
))

115 i‡(
	`ƒf_drv_gpiŸe_ö_is_£t
(
pö
))

117 
m_pö_°©e
 |
pö_mask
;

121 
m_pö_°©e
 &~(
pö_mask
);

123 
m_pö_å™sôi⁄
 |(
pö_mask
);

125 
îr_code
 = 
	`≠p_timî_°¨t
(
m_dëe˘i⁄_dñay_timî_id
, 
m_dëe˘i⁄_dñay
, 
NULL
);

126 i‡(
îr_code
 !
NRF_SUCCESS
)

134 
m_pö_å™sôi⁄
 &~
pö_mask
;

136 
	}
}

138 
uöt32_t
 
	$≠p_buâ⁄_öô
(
≠p_buâ⁄_cfg_t
 c⁄° * 
p_buâ⁄s
,

139 
uöt8_t
 
buâ⁄_cou¡
,

140 
uöt32_t
 
dëe˘i⁄_dñay
)

142 
uöt32_t
 
îr_code
;

144 i‡(
dëe˘i⁄_dñay
 < 
APP_TIMER_MIN_TIMEOUT_TICKS
)

146  
NRF_ERROR_INVALID_PARAM
;

149 i‡(!
	`ƒf_drv_gpiŸe_is_öô
())

151 
îr_code
 = 
	`ƒf_drv_gpiŸe_öô
();

152 
	`VERIFY_SUCCESS
(
îr_code
);

156 
mp_buâ⁄s
 = 
p_buâ⁄s
;

157 
m_buâ⁄_cou¡
 = 
buâ⁄_cou¡
;

158 
m_dëe˘i⁄_dñay
 = 
dëe˘i⁄_dñay
;

160 
m_pö_°©e
 = 0;

161 
m_pö_å™sôi⁄
 = 0;

163 
buâ⁄_cou¡
--)

165 
≠p_buâ⁄_cfg_t
 c⁄° * 
p_bä
 = &
p_buâ⁄s
[
buâ⁄_cou¡
];

167 
ƒf_drv_gpiŸe_ö_c⁄fig_t
 
c⁄fig
 = 
	`GPIOTE_CONFIG_IN_SENSE_TOGGLE
(
Ál£
);

168 
c⁄fig
.
puŒ
 = 
p_bä
->
puŒ_cfg
;

170 
îr_code
 = 
	`ƒf_drv_gpiŸe_ö_öô
(
p_bä
->
pö_no
, &
c⁄fig
, 
gpiŸe_evít_h™dÀr
);

171 
	`VERIFY_SUCCESS
(
îr_code
);

175  
	`≠p_timî_¸óã
(&
m_dëe˘i⁄_dñay_timî_id
,

176 
APP_TIMER_MODE_SINGLE_SHOT
,

177 
dëe˘i⁄_dñay_timeout_h™dÀr
);

178 
	}
}

180 
uöt32_t
 
	$≠p_buâ⁄_íabÀ
()

182 
	`ASSERT
(
mp_buâ⁄s
);

184 
uöt32_t
 
i
;

185 
i
 = 0; i < 
m_buâ⁄_cou¡
; i++)

187 
	`ƒf_drv_gpiŸe_ö_evít_íabÀ
(
mp_buâ⁄s
[
i
].
pö_no
, 
åue
);

190  
NRF_SUCCESS
;

191 
	}
}

194 
uöt32_t
 
	$≠p_buâ⁄_dißbÀ
()

196 
	`ASSERT
(
mp_buâ⁄s
);

198 
uöt32_t
 
i
;

199 
i
 = 0; i < 
m_buâ⁄_cou¡
; i++)

201 
	`ƒf_drv_gpiŸe_ö_evít_dißbÀ
(
mp_buâ⁄s
[
i
].
pö_no
);

205  
	`≠p_timî_°›
(
m_dëe˘i⁄_dñay_timî_id
);

206 
	}
}

209 
boﬁ
 
	$≠p_buâ⁄_is_pushed
(
uöt8_t
 
buâ⁄_id
)

211 
	`ASSERT
(
buâ⁄_id
 <
m_buâ⁄_cou¡
);

212 
	`ASSERT
(
mp_buâ⁄s
 !
NULL
);

214 
≠p_buâ⁄_cfg_t
 c⁄° * 
p_bä
 = &
mp_buâ⁄s
[
buâ⁄_id
];

215 
boﬁ
 
is_£t
 = 
	`ƒf_drv_gpiŸe_ö_is_£t
(
p_bä
->
pö_no
);

217  !(
is_£t
 ^ (
p_bä
->
a˘ive_°©e
 =
APP_BUTTON_ACTIVE_HIGH
));

218 
	}
}

	@D:\Private\Programing\MCU\Nordic\ble_app_template\nRF5_SDK_12.3.0_d7731ad\components\libraries\crc16\crc16.c

40 
	~"sdk_comm⁄.h
"

41 #i‡
NRF_MODULE_ENABLED
(
CRC16
)

42 
	~"¸c16.h
"

44 
	~<°dlib.h
>

46 
uöt16_t
 
	$¸c16_compuã
(
uöt8_t
 c⁄° * 
p_d©a
, 
uöt32_t
 
size
, 
uöt16_t
 c⁄° * 
p_¸c
)

48 
uöt16_t
 
¸c
 = (
p_¸c
 =
NULL
) ? 0xFFFF : *p_crc;

50 
uöt32_t
 
i
 = 0; i < 
size
; i++)

52 
¸c
 = (
uöt8_t
)(crc >> 8) | (crc << 8);

53 
¸c
 ^
p_d©a
[
i
];

54 
¸c
 ^(
uöt8_t
)(crc & 0xFF) >> 4;

55 
¸c
 ^= (crc << 8) << 4;

56 
¸c
 ^= ((crc & 0xFF) << 4) << 1;

59  
¸c
;

60 
	}
}

	@D:\Private\Programing\MCU\Nordic\ble_app_template\nRF5_SDK_12.3.0_d7731ad\components\libraries\fds\fds.c

40 
	~"sdk_comm⁄.h
"

41 #i‡
NRF_MODULE_ENABLED
(
FDS
)

42 
	~"fds.h
"

43 
	~"fds_öã∫Æ_defs.h
"

45 
	~<°döt.h
>

46 
	~<°rög.h
>

47 
	~<°dboﬁ.h
>

48 
	~"f°‹age.h
"

49 
	~"ƒf_îr‹.h
"

51 #i‡
deföed
(
FDS_CRC_ENABLED
)

52 
	~"¸c16.h
"

56 
fs_evít_h™dÀr
(
fs_evt_t
 c⁄° * c⁄° 
evt
, 
fs_ªt_t
 
ªsu…
);

59 
FS_REGISTER_CFG
(
fs_c⁄fig_t
 
fs_c⁄fig
) =

61 .
ˇŒback
 = 
fs_evít_h™dÀr
,

62 .
	gnum_∑ges
 = 
FDS_PHY_PAGES
,

65 .
	g¥i‹ôy
 = 0xFF

70 
	$__ALIGN
(4Ë
fds_é_t
 c⁄° 
m_fds_é_dúty
 =

72 .
ªc‹d_key
 = 
FDS_RECORD_KEY_DIRTY
,

73 .
Àngth_w‹ds
 = 0xFFFF

74 
	}
};

77 
uöt8_t
 
	gm_Êags
;

80 
uöt8_t
 
	gm_u£rs
;

81 
fds_cb_t
 
	gm_cb_èbÀ
[
FDS_MAX_USERS
];

84 
uöt32_t
 
	gm_œã°_ªc_id
;

87 
fds_›_queue_t
 
	gm_›_queue
;

88 
fds_chunk_queue_t
 
	gm_chunk_queue
;

91 
fds_∑ge_t
 
	gm_∑ges
[
FDS_MAX_PAGES
];

92 
fds_sw≠_∑ge_t
 
	gm_sw≠_∑ge
;

95 
fds_gc_d©a_t
 
	gm_gc
;

98 
	$Êag_£t
(
fds_Êags_t
 
Êag
)

100 
	`CRITICAL_SECTION_ENTER
();

101 
m_Êags
 |
Êag
;

102 
	`CRITICAL_SECTION_EXIT
();

103 
	}
}

106 
	$Êag_˛ór
(
fds_Êags_t
 
Êag
)

108 
	`CRITICAL_SECTION_ENTER
();

109 
m_Êags
 &~(
Êag
);

110 
	`CRITICAL_SECTION_EXIT
();

111 
	}
}

114 
boﬁ
 
	$Êag_is_£t
(
fds_Êags_t
 
Êag
)

116  (
m_Êags
 & 
Êag
);

117 
	}
}

120 
	$evít_£nd
(
fds_evt_t
 c⁄° * c⁄° 
p_evt
)

122 
uöt32_t
 
u£r
 = 0; u£∏< 
FDS_MAX_USERS
; user++)

124 i‡(
m_cb_èbÀ
[
u£r
] !
NULL
)

126 
m_cb_èbÀ
[
u£r
](
p_evt
);

129 
	}
}

132 
	$evít_¥ï¨e
(
fds_›_t
 c⁄° * c⁄° 
p_›
, 
fds_evt_t
 * c⁄° 
p_evt
)

134 
p_›
->
›_code
)

136 
FDS_OP_INIT
:

137 
p_evt
->
id
 = 
FDS_EVT_INIT
;

140 
FDS_OP_WRITE
:

141 
p_evt
->
id
 = 
FDS_EVT_WRITE
;

142 
p_evt
->
wrôe
.
fûe_id
 = 
p_›
->wrôe.
hódî
.
ic
.file_id;

143 
p_evt
->
wrôe
.
ªc‹d_key
 = 
p_›
->wrôe.
hódî
.
é
.record_key;

144 
p_evt
->
wrôe
.
ªc‹d_id
 = 
p_›
->wrôe.
hódî
.record_id;

147 
FDS_OP_UPDATE
:

148 
p_evt
->
id
 = 
FDS_EVT_UPDATE
;

149 
p_evt
->
wrôe
.
fûe_id
 = 
p_›
->wrôe.
hódî
.
ic
.file_id;

150 
p_evt
->
wrôe
.
ªc‹d_key
 = 
p_›
->wrôe.
hódî
.
é
.record_key;

151 
p_evt
->
wrôe
.
ªc‹d_id
 = 
p_›
->wrôe.
hódî
.record_id;

152 
p_evt
->
wrôe
.
is_ªc‹d_upd©ed
 = (
p_›
->wrôe.
°ï
 =
FDS_OP_WRITE_DONE
);

155 
FDS_OP_DEL_RECORD
:

156 
p_evt
->
id
 = 
FDS_EVT_DEL_RECORD
;

157 
p_evt
->
dñ
.
fûe_id
 = 
p_›
->del.file_id;

158 
p_evt
->
dñ
.
ªc‹d_key
 = 
p_›
->del.record_key;

159 
p_evt
->
dñ
.
ªc‹d_id
 = 
p_›
->dñ.
ªc‹d_to_dñëe
;

162 
FDS_OP_DEL_FILE
:

163 
p_evt
->
id
 = 
FDS_EVT_DEL_FILE
;

164 
p_evt
->
dñ
.
fûe_id
 = 
p_›
->del.file_id;

165 
p_evt
->
dñ
.
ªc‹d_key
 = 
FDS_RECORD_KEY_DIRTY
;

168 
FDS_OP_GC
:

169 
p_evt
->
id
 = 
FDS_EVT_GC
;

176 
	}
}

179 
boﬁ
 
	$hódî_is_vÆid
(
fds_hódî_t
 c⁄° * c⁄° 
p_hódî
)

181  ((
p_hódî
->
ic
.
fûe_id
 !
FDS_FILE_ID_INVALID
) &&

182 (
p_hódî
->
é
.
ªc‹d_key
 !
FDS_RECORD_KEY_DIRTY
));

183 
	}
}

186 
boﬁ
 
	$addªss_is_vÆid
(
uöt32_t
 c⁄° * c⁄° 
p_addr
)

188  ((
p_addr
 !
NULL
) &&

189 (
p_addr
 >
fs_c⁄fig
.
p_°¨t_addr
) &&

190 (
p_addr
 <
fs_c⁄fig
.
p_íd_addr
) &&

191 (
	`is_w‹d_Æig√d
(
p_addr
)));

192 
	}
}

195 
boﬁ
 
	$chunk_is_Æig√d
(
fds_ªc‹d_chunk_t
 c⁄° * c⁄° 
p_chunk
, 
uöt32_t
 
num_chunks
)

197 
uöt32_t
 
i
 = 0; i < 
num_chunks
; i++)

199 i‡(!
	`is_w‹d_Æig√d
(
p_chunk
[
i
].
p_d©a
))

201  
Ál£
;

204  
åue
;

205 
	}
}

209 
fds_∑ge_ty≥_t
 
	$∑ge_idítify
(
uöt32_t
 c⁄° * c⁄° 
p_∑ge_addr
)

211 i‡(
p_∑ge_addr
[
FDS_PAGE_TAG_WORD_0
] !
FDS_PAGE_TAG_MAGIC
)

213  
FDS_PAGE_UNDEFINED
;

216 
p_∑ge_addr
[
FDS_PAGE_TAG_WORD_1
])

218 
FDS_PAGE_TAG_SWAP
:

219  
FDS_PAGE_SWAP
;

221 
FDS_PAGE_TAG_DATA
:

222  
FDS_PAGE_DATA
;

225  
FDS_PAGE_UNDEFINED
;

227 
	}
}

230 
boﬁ
 
	$∑ge_is_îa£d
(
uöt32_t
 c⁄° * c⁄° 
p_∑ge_addr
)

232 
uöt32_t
 
i
 = 0; i < 
FDS_PAGE_SIZE
; i++)

234 i‡(*(
p_∑ge_addr
 + 
i
Ë!
FDS_ERASED_WORD
)

236  
Ál£
;

240  
åue
;

241 
	}
}

245 
boﬁ
 
	$∑ge_has_•a˚
(
uöt16_t
 
∑ge
, uöt16_à
Àngth_w‹ds
)

247 
Àngth_w‹ds
 +
m_∑ges
[
∑ge
].
wrôe_off£t
;

248 
Àngth_w‹ds
 +
m_∑ges
[
∑ge
].
w‹ds_ª£rved
;

249  (
Àngth_w‹ds
 < 
FDS_PAGE_SIZE
);

250 
	}
}

255 
ªt_code_t
 
	$∑ge_‰om_ªc‹d
(
uöt16_t
 * c⁄° 
p_∑ge
, 
uöt32_t
 c⁄° * c⁄° 
p_ªc
)

257 
ªt_code_t
 
ªt
 = 
FDS_ERR_NOT_FOUND
;

259 
	`CRITICAL_SECTION_ENTER
();

260 
uöt16_t
 
i
 = 0; i < 
FDS_MAX_PAGES
; i++)

262 i‡((
p_ªc
 > 
m_∑ges
[
i
].
p_addr
) &&

263 (
p_ªc
 < 
m_∑ges
[
i
].
p_addr
 + 
FDS_PAGE_SIZE
))

265 
ªt
 = 
FDS_SUCCESS
;

266 *
p_∑ge
 = 
i
;

270 
	`CRITICAL_SECTION_EXIT
();

272  
ªt
;

273 
	}
}

280 
	$∑ge_sˇn
(
uöt32_t
 c⁄° * 
p_addr
,

281 
uöt16_t
 * c⁄° 
w‹ds_wrôãn
,

282 
boﬁ
 * c⁄° 
ˇn_gc
)

284 
uöt32_t
 c⁄° * c⁄° 
p_íd_addr
 = 
p_addr
 + 
FDS_PAGE_SIZE
;

285 
boﬁ
 
dúty_ªc‹d_found
 = 
Ál£
;

287 
p_addr
 +
FDS_PAGE_TAG_SIZE
;

288 *
w‹ds_wrôãn
 = 
FDS_PAGE_TAG_SIZE
;

290 (
p_addr
 < 
p_íd_addr
Ë&& (*p_add∏!
FDS_ERASED_WORD
))

293 
fds_hódî_t
 c⁄° * c⁄° 
p_hódî
 = (fds_hódî_t*)
p_addr
;

295 i‡(!
	`hódî_is_vÆid
(
p_hódî
))

297 
dúty_ªc‹d_found
 = 
åue
;

302 i‡(
p_hódî
->
ªc‹d_id
 > 
m_œã°_ªc_id
)

304 
m_œã°_ªc_id
 = 
p_hódî
->
ªc‹d_id
;

309 
p_addr
 +(
FDS_HEADER_SIZE
 + 
p_hódî
->
é
.
Àngth_w‹ds
);

310 *
w‹ds_wrôãn
 +(
FDS_HEADER_SIZE
 + 
p_hódî
->
é
.
Àngth_w‹ds
);

313 i‡(
ˇn_gc
 !
NULL
)

315 *
ˇn_gc
 = 
dúty_ªc‹d_found
;

317 
	}
}

320 
	$∑ge_off£ts_upd©e
(
fds_∑ge_t
 * c⁄° 
p_∑ge
, 
uöt16_t
 
Àngth_w‹ds
)

322 
p_∑ge
->
wrôe_off£t
 +(
FDS_HEADER_SIZE
 + 
Àngth_w‹ds
);

323 
p_∑ge
->
w‹ds_ª£rved
 -(
FDS_HEADER_SIZE
 + 
Àngth_w‹ds
);

324 
	}
}

328 
ªt_code_t
 
	$∑ge_èg_wrôe_sw≠
()

331 
uöt32_t
 c⁄° 
∑ge_èg_sw≠
[] = {
FDS_PAGE_TAG_MAGIC
, 
FDS_PAGE_TAG_SWAP
};

332  
	`fs_°‹e
(&
fs_c⁄fig
, 
m_sw≠_∑ge
.
p_addr
, 
∑ge_èg_sw≠
, 
FDS_PAGE_TAG_SIZE
, 
NULL
);

333 
	}
}

337 
ªt_code_t
 
	$∑ge_èg_wrôe_d©a
(
uöt32_t
 c⁄° * c⁄° 
p_∑ge_addr
)

340 
uöt32_t
 c⁄° 
∑ge_èg_d©a
[] = {
FDS_PAGE_TAG_MAGIC
, 
FDS_PAGE_TAG_DATA
};

341  
	`fs_°‹e
(&
fs_c⁄fig
, 
p_∑ge_addr
, 
∑ge_èg_d©a
, 
FDS_PAGE_TAG_SIZE
, 
NULL
);

342 
	}
}

347 
ªt_code_t
 
	$wrôe_•a˚_ª£rve
(
uöt16_t
 
Àngth_w‹ds
, uöt16_à* 
p_∑ge
)

349 
boﬁ
 
•a˚_ª£rved
 = 
Ál£
;

350 
uöt16_t
 c⁄° 
tŸÆ_Àn_w‹ds
 = 
Àngth_w‹ds
 + 
FDS_HEADER_SIZE
;

352 i‡(
tŸÆ_Àn_w‹ds
 >
FDS_PAGE_SIZE
 - 
FDS_PAGE_TAG_SIZE
)

354  
FDS_ERR_RECORD_TOO_LARGE
;

357 
	`CRITICAL_SECTION_ENTER
();

358 
uöt16_t
 
∑ge
 = 0;Öagê< 
FDS_MAX_PAGES
;Öage++)

360 i‡((
m_∑ges
[
∑ge
].
∑ge_ty≥
 =
FDS_PAGE_DATA
) &&

361 (
	`∑ge_has_•a˚
(
∑ge
, 
tŸÆ_Àn_w‹ds
)))

363 
•a˚_ª£rved
 = 
åue
;

364 *
p_∑ge
 = 
∑ge
;

366 
m_∑ges
[
∑ge
].
w‹ds_ª£rved
 +
tŸÆ_Àn_w‹ds
;

370 
	`CRITICAL_SECTION_EXIT
();

372  (
•a˚_ª£rved
Ë? 
FDS_SUCCESS
 : 
FDS_ERR_NO_SPACE_IN_FLASH
;

373 
	}
}

378 
	$wrôe_•a˚_‰ì
(
uöt16_t
 
Àngth_w‹ds
, uöt16_à
∑ge
)

380 
m_∑ges
[
∑ge
].
w‹ds_ª£rved
 -(
Àngth_w‹ds
 + 
FDS_HEADER_SIZE
);

381 
	}
}

384 
uöt32_t
 
	$ªc‹d_id_√w
()

386 
	`CRITICAL_SECTION_ENTER
();

387 
m_œã°_ªc_id
++;

388 
	`CRITICAL_SECTION_EXIT
();

389  
m_œã°_ªc_id
;

390 
	}
}

397 
boﬁ
 
	$ªc‹d_föd_√xt
(
uöt16_t
 
∑ge
, 
uöt32_t
 c⁄° ** 
p_ªc‹d
)

399 
fds_hódî_t
 c⁄° * 
p_hódî
;

400 
uöt32_t
 c⁄° * 
p_√xt_ªc
 = (*
p_ªc‹d
);

404 i‡(
p_√xt_ªc
 !
NULL
)

406 
p_hódî
 = ((
fds_hódî_t
*)
p_√xt_ªc
);

407 
p_√xt_ªc
 +(
FDS_HEADER_SIZE
 + 
p_hódî
->
é
.
Àngth_w‹ds
);

411 
p_√xt_ªc
 = 
m_∑ges
[
∑ge
].
p_addr
 + 
FDS_PAGE_TAG_SIZE
;

416 (
p_√xt_ªc
 < (
m_∑ges
[
∑ge
].
p_addr
 + 
FDS_PAGE_SIZE
) &&

417 *
p_√xt_ªc
 !
FDS_ERASED_WORD
))

419 
p_hódî
 = (
fds_hódî_t
*)
p_√xt_ªc
;

421 i‡(
	`hódî_is_vÆid
(
p_hódî
))

423 *
p_ªc‹d
 = 
p_√xt_ªc
;

424  
åue
;

429 
p_√xt_ªc
 +(
FDS_HEADER_SIZE
 + (
p_hódî
->
é
.
Àngth_w‹ds
));

434  
Ál£
;

435 
	}
}

440 
boﬁ
 
	$ªc‹d_föd_by_desc
(
fds_ªc‹d_desc_t
 * c⁄° 
p_desc
, 
uöt16_t
 * c⁄° 
p_∑ge
)

446 i‡((
	`addªss_is_vÆid
(
p_desc
->
p_ªc‹d
)) &&

447 (
p_desc
->
gc_run_cou¡
 =
m_gc
.
run_cou¡
) &&

448 (
p_desc
->
ªc‹d_id
 =((
fds_hódî_t
*Ì_desc->
p_ªc‹d
)->record_id))

450  (
	`∑ge_‰om_ªc‹d
(
p_∑ge
, 
p_desc
->
p_ªc‹d
Ë=
FDS_SUCCESS
);

454 *
p_∑ge
 = 0; *p_∑gê< 
FDS_MAX_PAGES
; (*p_page)++)

457 
uöt32_t
 c⁄° * 
p_ªc‹d
 = 
NULL
;

459 
	`ªc‹d_föd_√xt
(*
p_∑ge
, &
p_ªc‹d
))

461 
fds_hódî_t
 c⁄° * c⁄° 
p_hódî
 = (fds_hódî_t*)
p_ªc‹d
;

462 i‡(
p_hódî
->
ªc‹d_id
 =
p_desc
->record_id)

464 
p_desc
->
p_ªc‹d
 =Ö_record;

465 
p_desc
->
gc_run_cou¡
 = 
m_gc
.
run_cou¡
;

466  
åue
;

471  
Ál£
;

472 
	}
}

479 
ªt_code_t
 
	$ªc‹d_föd
(
uöt16_t
 c⁄° * c⁄° 
p_fûe_id
,

480 
uöt16_t
 c⁄° * c⁄° 
p_ªc‹d_key
,

481 
fds_ªc‹d_desc_t
 * c⁄° 
p_desc
,

482 
fds_föd_tokí_t
 * c⁄° 
p_tokí
)

484 i‡(!
	`Êag_is_£t
(
FDS_FLAG_INITIALIZED
))

486  
FDS_ERR_NOT_INITIALIZED
;

489 i‡(
p_desc
 =
NULL
 || 
p_tokí
 == NULL)

491  
FDS_ERR_NULL_ARG
;

495 ; 
p_tokí
->
∑ge
 < 
FDS_MAX_PAGES
;Ö_token->page++)

497 i‡(
m_∑ges
[
p_tokí
->
∑ge
].
∑ge_ty≥
 !
FDS_PAGE_DATA
)

503 
	`ªc‹d_föd_√xt
(
p_tokí
->
∑ge
, &p_tokí->
p_addr
))

505 
fds_hódî_t
 c⁄° * c⁄° 
p_hódî
 = (fds_hódî_t*)
p_tokí
->
p_addr
;

508 i‡((
p_fûe_id
 !
NULL
) &&

509 (
p_hódî
->
ic
.
fûe_id
 !*
p_fûe_id
))

514 i‡((
p_ªc‹d_key
 !
NULL
) &&

515 (
p_hódî
->
é
.
ªc‹d_key
 !*
p_ªc‹d_key
))

521 
p_desc
->
ªc‹d_id
 = 
p_hódî
->record_id;

522 
p_desc
->
p_ªc‹d
 = 
p_tokí
->
p_addr
;

523 
p_desc
->
gc_run_cou¡
 = 
m_gc
.
run_cou¡
;

525  
FDS_SUCCESS
;

530 
p_tokí
->
p_addr
 = 
NULL
;

533  
FDS_ERR_NOT_FOUND
;

534 
	}
}

538 
	$dúty_ªc‹ds_°©
(
uöt16_t
 
∑ge
,

539 
uöt16_t
 * c⁄° 
p_dúty_ªc‹ds
,

540 
uöt16_t
 * c⁄° 
p_w‹d_cou¡
)

542 
fds_hódî_t
 c⁄° * 
p_hódî
;

543 
uöt32_t
 c⁄° * 
p_ªc
;

545 
p_ªc
 = 
m_∑ges
[
∑ge
].
p_addr
 + 
FDS_PAGE_TAG_SIZE
;

547 (
p_ªc
 < (
m_∑ges
[
∑ge
].
p_addr
 + 
FDS_PAGE_SIZE
)) &&

548 (*
p_ªc
 !
FDS_ERASED_WORD
))

550 
p_hódî
 = (
fds_hódî_t
*)
p_ªc
;

552 i‡(!
	`hódî_is_vÆid
(
p_hódî
))

554 (*
p_dúty_ªc‹ds
) += 1;

555 (*
p_w‹d_cou¡
Ë+
FDS_HEADER_SIZE
 + 
p_hódî
->
é
.
Àngth_w‹ds
;

558 
p_ªc
 +(
FDS_HEADER_SIZE
 + (
p_hódî
->
é
.
Àngth_w‹ds
));

560 
	}
}

565 
boﬁ
 
	$queue_adv™˚
()

568 
	`mem£t
(&
m_›_queue
.
›
[m_›_queue.
Ω
], 0x00, (
fds_›_t
));

570 i‡(
m_›_queue
.
cou¡
 != 0)

573 
m_›_queue
.
Ω
 = (m_›_queue.Ω + 1Ë% 
FDS_OP_QUEUE_SIZE
;

574 
m_›_queue
.
cou¡
--;

577  (
m_›_queue
.
cou¡
 != 0);

578 
	}
}

583 
	$chunk_queue_√xt
(
fds_ªc‹d_chunk_t
 ** 
µ_chunk
)

585 i‡((*
µ_chunk
Ë!&
m_chunk_queue
.
chunk
[
FDS_CHUNK_QUEUE_SIZE
 - 1])

587 (*
µ_chunk
)++;

591 *
µ_chunk
 = &
m_chunk_queue
.
chunk
[0];

592 
	}
}

596 
	$chunk_queue_gë_™d_adv™˚
(
fds_ªc‹d_chunk_t
 ** 
µ_chunk
)

598 i‡(
m_chunk_queue
.
cou¡
 != 0)

601 *
µ_chunk
 = &
m_chunk_queue
.
chunk
[m_chunk_queue.
Ω
];

603 
m_chunk_queue
.
Ω
 = (m_chunk_queue.Ω + 1Ë% 
FDS_CHUNK_QUEUE_SIZE
;

604 
m_chunk_queue
.
cou¡
--;

606 
	}
}

609 
	$chunk_queue_skù
(
fds_›_t
 c⁄° * c⁄° 
p_›
)

611 i‡((
p_›
->
›_code
 =
FDS_OP_WRITE
) ||

612 (
p_›
->
›_code
 =
FDS_OP_UPDATE
))

614 
m_chunk_queue
.
Ω
 +
p_›
->
wrôe
.
chunk_cou¡
;

615 
m_chunk_queue
.
cou¡
 -
p_›
->
wrôe
.
chunk_cou¡
;

617 
	}
}

621 
boﬁ
 
	$›_íqueue
(
fds_›_t
 c⁄° * c⁄° 
p_›
,

622 
uöt32_t
 
num_chunks
,

623 
fds_ªc‹d_chunk_t
 c⁄° * c⁄° 
p_chunk
)

625 
uöt32_t
 
idx
;

626 
boﬁ
 
ªt
 = 
Ál£
;

628 
	`CRITICAL_SECTION_ENTER
();

629 i‡((
m_›_queue
.
cou¡
 <
FDS_OP_QUEUE_SIZE
 - 1) &&

630 (
m_chunk_queue
.
cou¡
 <
FDS_CHUNK_QUEUE_SIZE
 - 
num_chunks
))

632 
idx
 = (
m_›_queue
.
cou¡
 + m_›_queue.
Ω
Ë% 
FDS_OP_QUEUE_SIZE
;

634 
m_›_queue
.
›
[
idx
] = *
p_›
;

635 
m_›_queue
.
cou¡
++;

637 i‡(
num_chunks
 != 0)

639 
idx
 = (
m_chunk_queue
.
cou¡
 + m_chunk_queue.
Ω
Ë% 
FDS_CHUNK_QUEUE_SIZE
;

641 
fds_ªc‹d_chunk_t
 * 
p_chunk_d°
;

642 
p_chunk_d°
 = &
m_chunk_queue
.
chunk
[
idx
];

644 
uöt32_t
 
i
 = 0; i < 
num_chunks
; i++)

646 *
p_chunk_d°
 = 
p_chunk
[
i
];

647 
	`chunk_queue_√xt
(&
p_chunk_d°
);

650 
m_chunk_queue
.
cou¡
 +
num_chunks
;

653 
ªt
 = 
åue
;

655 
	`CRITICAL_SECTION_EXIT
();

657  
ªt
;

658 
	}
}

663 
fds_öô_›ts_t
 
	$∑ges_öô
()

665 
uöt32_t
 
ªt
 = 
NO_PAGES
;

667 
uöt16_t
 
∑ge
 = 0;

668 
boﬁ
 
sw≠_£t_but_nŸ_found
 = 
Ál£
;

670 
uöt16_t
 
i
 = 0; i < 
FDS_VIRTUAL_PAGES
; i++)

672 
uöt32_t
 c⁄° * c⁄° 
p_∑ge_addr
 = 
fs_c⁄fig
.
p_°¨t_addr
 + (
i
 * 
FDS_PAGE_SIZE
);

673 
fds_∑ge_ty≥_t
 c⁄° 
∑ge_ty≥
 = 
	`∑ge_idítify
(
p_∑ge_addr
);

675 
∑ge_ty≥
)

677 
FDS_PAGE_UNDEFINED
:

678 i‡(
	`∑ge_is_îa£d
(
p_∑ge_addr
))

680 i‡(
m_sw≠_∑ge
.
p_addr
 !
NULL
)

684 
m_∑ges
[
∑ge
].
∑ge_ty≥
 = 
FDS_PAGE_ERASED
;

685 
m_∑ges
[
∑ge
].
p_addr
 = 
p_∑ge_addr
;

686 
m_∑ges
[
∑ge
].
wrôe_off£t
 = 
FDS_PAGE_TAG_SIZE
;

690 
m_gc
.
cur_∑ge
 = 
∑ge
;

691 
∑ge
++;

696 
m_sw≠_∑ge
.
p_addr
 = 
p_∑ge_addr
;

697 
m_sw≠_∑ge
.
wrôe_off£t
 = 
FDS_PAGE_TAG_SIZE
;

698 
sw≠_£t_but_nŸ_found
 = 
åue
;

701 
ªt
 |
PAGE_ERASED
;

706 
m_∑ges
[
∑ge
++].
∑ge_ty≥
 = 
FDS_PAGE_UNDEFINED
;

710 
FDS_PAGE_DATA
:

711 
m_∑ges
[
∑ge
].
∑ge_ty≥
 = 
FDS_PAGE_DATA
;

712 
m_∑ges
[
∑ge
].
p_addr
 = 
p_∑ge_addr
;

715 
	`∑ge_sˇn
(
p_∑ge_addr
, &
m_∑ges
[
∑ge
].
wrôe_off£t
, &m_∑ges[∑ge].
ˇn_gc
);

717 
ªt
 |
PAGE_DATA
;

718 
∑ge
++;

722 
FDS_PAGE_SWAP
:

723 i‡(
sw≠_£t_but_nŸ_found
)

725 
m_∑ges
[
∑ge
].
∑ge_ty≥
 = 
FDS_PAGE_ERASED
;

726 
m_∑ges
[
∑ge
].
p_addr
 = 
m_sw≠_∑ge
.p_addr;

727 
m_∑ges
[
∑ge
].
wrôe_off£t
 = 
FDS_PAGE_TAG_SIZE
;

729 
∑ge
++;

732 
m_sw≠_∑ge
.
p_addr
 = 
p_∑ge_addr
;

735 
	`∑ge_sˇn
(
p_∑ge_addr
, &
m_sw≠_∑ge
.
wrôe_off£t
, 
NULL
);

737 
ªt
 |(
m_sw≠_∑ge
.
wrôe_off£t
 =
FDS_PAGE_TAG_SIZE
) ?

738 
PAGE_SWAP_CLEAN
 : 
PAGE_SWAP_DIRTY
;

747  (
fds_öô_›ts_t
)
ªt
;

748 
	}
}

752 
ªt_code_t
 
	$ªc‹d_hódî_wrôe_begö
(
fds_›_t
 * c⁄° 
p_›
, 
uöt32_t
 * c⁄° 
p_addr
)

754 
ªt_code_t
 
ªt
;

755 
ªt
 = 
	`fs_°‹e
(&
fs_c⁄fig
, 
p_addr
 + 
FDS_OFFSET_TL
,

756 (
uöt32_t
*)&
p_›
->
wrôe
.
hódî
.
é
, 
FDS_HEADER_SIZE_TL
, 
NULL
);

759 
p_›
->
wrôe
.
°ï
 = 
FDS_OP_WRITE_RECORD_ID
;

761  (
ªt
 =
FS_SUCCESS
Ë? 
FDS_SUCCESS
 : 
FDS_ERR_BUSY
;

762 
	}
}

765 
ªt_code_t
 
	$ªc‹d_hódî_wrôe_id
(
fds_›_t
 * c⁄° 
p_›
, 
uöt32_t
 * c⁄° 
p_addr
)

767 
ªt_code_t
 
ªt
;

768 
ªt
 = 
	`fs_°‹e
(&
fs_c⁄fig
, 
p_addr
 + 
FDS_OFFSET_ID
,

769 (
uöt32_t
*)&
p_›
->
wrôe
.
hódî
.
ªc‹d_id
, 
FDS_HEADER_SIZE_ID
, 
NULL
);

773 
p_›
->
wrôe
.
°ï
 = (p_›->wrôe.
chunk_cou¡
 !0Ë? 
FDS_OP_WRITE_CHUNKS
 :

774 
FDS_OP_WRITE_HEADER_FINALIZE
;

776  (
ªt
 =
FS_SUCCESS
Ë? 
FDS_SUCCESS
 : 
FDS_ERR_BUSY
;

777 
	}
}

780 
ªt_code_t
 
	$ªc‹d_hódî_wrôe_föÆize
(
fds_›_t
 * c⁄° 
p_›
, 
uöt32_t
 * c⁄° 
p_addr
)

782 
ªt_code_t
 
ªt
;

783 
ªt
 = 
	`fs_°‹e
(&
fs_c⁄fig
, 
p_addr
 + 
FDS_OFFSET_IC
,

784 (
uöt32_t
*)&
p_›
->
wrôe
.
hódî
.
ic
, 
FDS_HEADER_SIZE_IC
, 
NULL
);

788 
p_›
->
wrôe
.
°ï
 = (p_›->
›_code
 =
FDS_OP_UPDATE
Ë? 
FDS_OP_WRITE_FLAG_DIRTY
 :

789 
FDS_OP_WRITE_DONE
;

791  (
ªt
 =
FS_SUCCESS
Ë? 
FDS_SUCCESS
 : 
FDS_ERR_BUSY
;

792 
	}
}

795 
ªt_code_t
 
	$ªc‹d_hódî_Êag_dúty
(
uöt32_t
 * c⁄° 
p_ªc‹d
, 
uöt16_t
 
∑ge_to_gc
)

798 
fs_ªt_t
 
ªt
 = 
	`fs_°‹e
(&
fs_c⁄fig
, 
p_ªc‹d
,

799 (
uöt32_t
*)&
m_fds_é_dúty
, 
FDS_HEADER_SIZE_TL
, 
NULL
);

801 i‡(
ªt
 !
FS_SUCCESS
)

803  
FDS_ERR_BUSY
;

806 
m_∑ges
[
∑ge_to_gc
].
ˇn_gc
 = 
åue
;

808  
FDS_SUCCESS
;

809 
	}
}

812 
ªt_code_t
 
	$ªc‹d_föd_™d_dñëe
(
fds_›_t
 * c⁄° 
p_›
)

814 
ªt_code_t
 
ªt
;

815 
uöt16_t
 
∑ge
;

816 
fds_ªc‹d_desc_t
 
desc
 = {0};

818 
desc
.
ªc‹d_id
 = 
p_›
->
dñ
.
ªc‹d_to_dñëe
;

820 i‡(
	`ªc‹d_föd_by_desc
(&
desc
, &
∑ge
))

822 
fds_hódî_t
 c⁄° * c⁄° 
p_hódî
 = (fds_hódî_àc⁄° *)
desc
.
p_ªc‹d
;

829 
p_›
->
dñ
.
fûe_id
 = 
p_hódî
->
ic
.file_id;

830 
p_›
->
dñ
.
ªc‹d_key
 = 
p_hódî
->
é
.record_key;

833 
ªt
 = 
	`ªc‹d_hódî_Êag_dúty
((
uöt32_t
*)
desc
.
p_ªc‹d
, 
∑ge
);

838 
ªt
 = 
FDS_ERR_NOT_FOUND
;

841  
ªt
;

842 
	}
}

846 
ªt_code_t
 
	$fûe_föd_™d_dñëe
(
fds_›_t
 * c⁄° 
p_›
)

848 
ªt_code_t
 
ªt
;

849 
fds_ªc‹d_desc_t
 
desc
;

852 
fds_föd_tokí_t
 
tok
 = {0};

855 
ªt
 = 
	`ªc‹d_föd
(&
p_›
->
dñ
.
fûe_id
, 
NULL
, &
desc
, &
tok
);

857 i‡(
ªt
 =
FDS_SUCCESS
)

860 
ªt
 = 
	`ªc‹d_hódî_Êag_dúty
((
uöt32_t
*)
desc
.
p_ªc‹d
, 
tok
.
∑ge
);

865 
	`mem£t
(&
tok
, 0x00, (
fds_föd_tokí_t
));

868  
ªt
;

869 
	}
}

874 
ªt_code_t
 
	$ªc‹d_wrôe_chunk
(
fds_›_t
 * c⁄° 
p_›
, 
uöt32_t
 * c⁄° 
p_addr
)

876 
ªt_code_t
 
ªt
;

877 
fds_ªc‹d_chunk_t
 * 
p_chunk
 = 
NULL
;

880 
	`chunk_queue_gë_™d_adv™˚
(&
p_chunk
);

882 
ªt
 = 
	`fs_°‹e
(&
fs_c⁄fig
, 
p_addr
 + 
p_›
->
wrôe
.
chunk_off£t
,

883 
p_chunk
->
p_d©a
,Ö_chunk->
Àngth_w‹ds
, 
NULL
);

886 
p_›
->
wrôe
.
chunk_off£t
 +
p_chunk
->
Àngth_w‹ds
;

891 
p_›
->
wrôe
.
chunk_cou¡
--;

893 i‡(
p_›
->
wrôe
.
chunk_cou¡
 == 0)

897 
p_›
->
wrôe
.
°ï
 = 
FDS_OP_WRITE_HEADER_FINALIZE
;

900  (
ªt
 =
NRF_SUCCESS
Ë? 
FDS_SUCCESS
 : 
FDS_ERR_BUSY
;

901 
	}
}

904 #i‡
deföed
(
FDS_CRC_ENABLED
)

906 
boﬁ
 
	$¸c_vîify_suc˚ss
(
uöt16_t
 
¸c
, uöt16_à
Àn_w‹ds
, 
uöt32_t
 c⁄° * c⁄° 
p_d©a
)

908 
uöt16_t
 
compuãd_¸c
;

914 
compuãd_¸c
 = 
	`¸c16_compuã
((
uöt8_t
 c⁄° *)
p_d©a
, 6, 
NULL
);

915 
compuãd_¸c
 = 
	`¸c16_compuã
((
uöt8_t
 c⁄° *)
p_d©a
 + 8,

916 (
FDS_HEADER_SIZE_ID
 + 
Àn_w‹ds
Ë* (
uöt32_t
),

917 &
compuãd_¸c
);

919  (
compuãd_¸c
 =
¸c
);

920 
	}
}

925 
	$gc_öô
()

927 
m_gc
.
run_cou¡
++;

928 
m_gc
.
cur_∑ge
 = 0;

929 
m_gc
.
ªsume
 = 
Ál£
;

933 
uöt16_t
 
i
 = 0; i < 
FDS_MAX_PAGES
; i++)

935 
m_gc
.
do_gc_∑ge
[
i
] = (
m_∑ges
[i].
∑ge_ty≥
 =
FDS_PAGE_DATA
);

937 
	}
}

942 
boﬁ
 
	$gc_∑ge_√xt
(
uöt16_t
 * c⁄° 
p_√xt_∑ge
)

944 
boﬁ
 
ªt
 = 
Ál£
;

946 
uöt16_t
 
i
 = 0; i < 
FDS_MAX_PAGES
; i++)

948 i‡(
m_gc
.
do_gc_∑ge
[
i
])

951 
m_gc
.
do_gc_∑ge
[
i
] = 
Ál£
;

954 i‡((
m_∑ges
[
i
].
ªc‹ds_›í
 =0Ë&& (m_∑ges[i].
ˇn_gc
 =
åue
))

956 *
p_√xt_∑ge
 = 
i
;

957 
ªt
 = 
åue
;

963  
ªt
;

964 
	}
}

967 
ªt_code_t
 
	$gc_sw≠_îa£
()

969 
m_gc
.
°©e
 = 
GC_DISCARD_SWAP
;

970 
m_sw≠_∑ge
.
wrôe_off£t
 = 
FDS_PAGE_TAG_SIZE
;

972  
	`fs_îa£
(&
fs_c⁄fig
, 
m_sw≠_∑ge
.
p_addr
, 
FDS_PHY_PAGES_IN_VPAGE
, 
NULL
);

973 
	}
}

978 
ªt_code_t
 
	$gc_∑ge_îa£
()

980 
uöt32_t
 
ªt
;

981 
uöt16_t
 c⁄° 
gc
 = 
m_gc
.
cur_∑ge
;

983 i‡(
m_∑ges
[
gc
].
ªc‹ds_›í
 == 0)

985 
ªt
 = 
	`fs_îa£
(&
fs_c⁄fig
, 
m_∑ges
[
gc
].
p_addr
, 
FDS_PHY_PAGES_IN_VPAGE
, 
NULL
);

986 
m_gc
.
°©e
 = 
GC_ERASE_PAGE
;

992 
ªt
 = 
	`gc_sw≠_îa£
();

995  
ªt
;

996 
	}
}

1000 
ªt_code_t
 
	$gc_ªc‹d_c›y
()

1002 
fds_hódî_t
 c⁄° * c⁄° 
p_hódî
 = (fds_hódî_t*)
m_gc
.
p_ªc‹d_§c
;

1003 
uöt32_t
 c⁄° * c⁄° 
p_de°
 = 
m_sw≠_∑ge
.
p_addr
 + m_sw≠_∑ge.
wrôe_off£t
;

1004 
uöt16_t
 c⁄° 
ªc‹d_Àn
 = 
FDS_HEADER_SIZE
 + 
p_hódî
->
é
.
Àngth_w‹ds
;

1006 
m_gc
.
°©e
 = 
GC_COPY_RECORD
;

1010  
	`fs_°‹e
(&
fs_c⁄fig
, 
p_de°
, 
m_gc
.
p_ªc‹d_§c
, 
ªc‹d_Àn
, 
NULL
);

1011 
	}
}

1014 
ªt_code_t
 
	$gc_ªc‹d_föd_√xt
()

1016 
ªt_code_t
 
ªt
;

1019 i‡(
	`ªc‹d_föd_√xt
(
m_gc
.
cur_∑ge
, &m_gc.
p_ªc‹d_§c
))

1021 
ªt
 = 
	`gc_ªc‹d_c›y
();

1026 
ªt
 = 
	`gc_∑ge_îa£
();

1029  
ªt
;

1030 
	}
}

1034 
ªt_code_t
 
	$gc_sw≠_¥omŸe
()

1036 
m_gc
.
°©e
 = 
GC_PROMOTE_SWAP
;

1037  
	`∑ge_èg_wrôe_d©a
(
m_∑ges
[
m_gc
.
cur_∑ge
].
p_addr
);

1038 
	}
}

1042 
ªt_code_t
 
	$gc_èg_√w_sw≠
()

1044 
m_gc
.
°©e
 = 
GC_TAG_NEW_SWAP
;

1045 
m_gc
.
p_ªc‹d_§c
 = 
NULL
;

1046  
	`∑ge_èg_wrôe_sw≠
();

1047 
	}
}

1050 
ªt_code_t
 
	$gc_√xt_∑ge
()

1052 i‡(!
	`gc_∑ge_√xt
(&
m_gc
.
cur_∑ge
))

1055 
m_gc
.
°©e
 = 
GC_BEGIN
;

1056 
m_gc
.
cur_∑ge
 = 0;

1057 
m_gc
.
p_ªc‹d_§c
 = 
NULL
;

1059  
FDS_OP_COMPLETED
;

1062  
	`gc_ªc‹d_föd_√xt
();

1063 
	}
}

1067 
	$gc_upd©e_sw≠_off£t
()

1069 
fds_hódî_t
 c⁄° * c⁄° 
p_hódî
 = (fds_hódî_t*)
m_gc
.
p_ªc‹d_§c
;

1070 
uöt16_t
 c⁄° 
ªc‹d_Àn
 = 
FDS_HEADER_SIZE
 + 
p_hódî
->
é
.
Àngth_w‹ds
;

1072 
m_sw≠_∑ge
.
wrôe_off£t
 +
ªc‹d_Àn
;

1073 
	}
}

1076 
	$gc_sw≠_∑ges
()

1080 
uöt32_t
 c⁄° * c⁄° 
p_addr
 = 
m_sw≠_∑ge
.p_addr;

1082 
m_sw≠_∑ge
.
p_addr
 = 
m_∑ges
[
m_gc
.
cur_∑ge
].p_addr;

1083 
m_∑ges
[
m_gc
.
cur_∑ge
].
p_addr
 =Ö_addr;

1086 
m_∑ges
[
m_gc
.
cur_∑ge
].
wrôe_off£t
 = 
m_sw≠_∑ge
.write_offset;

1087 
m_sw≠_∑ge
.
wrôe_off£t
 = 
FDS_PAGE_TAG_SIZE
;

1088 
	}
}

1091 
	$gc_°©e_adv™˚
()

1093 
m_gc
.
°©e
)

1095 
GC_BEGIN
:

1096 
	`gc_öô
();

1097 
m_gc
.
°©e
 = 
GC_NEXT_PAGE
;

1101 
GC_COPY_RECORD
:

1102 
	`gc_upd©e_sw≠_off£t
();

1103 
m_gc
.
°©e
 = 
GC_FIND_NEXT_RECORD
;

1107 
GC_ERASE_PAGE
:

1108 
	`gc_sw≠_∑ges
();

1109 
m_gc
.
°©e
 = 
GC_PROMOTE_SWAP
;

1113 
GC_DISCARD_SWAP
:

1115 
GC_PROMOTE_SWAP
:

1117 
m_gc
.
°©e
 = 
GC_TAG_NEW_SWAP
;

1120 
GC_TAG_NEW_SWAP
:

1121 
m_gc
.
°©e
 = 
GC_NEXT_PAGE
;

1128 
	}
}

1132 
ªt_code_t
 
	$öô_execuã
(
uöt32_t
 
¥ev_ªt
, 
fds_›_t
 * c⁄° 
p_›
)

1134 
ªt_code_t
 
ªt
 = 
FDS_ERR_INTERNAL
;

1136 i‡(
¥ev_ªt
 !
FS_SUCCESS
)

1139 
	`Êag_˛ór
(
FDS_FLAG_INITIALIZING
);

1140  
FDS_ERR_OPERATION_TIMEOUT
;

1143 
p_›
->
öô
.
°ï
)

1145 
FDS_OP_INIT_TAG_SWAP
:

1147 
ªt
 = 
	`∑ge_èg_wrôe_sw≠
();

1148 
p_›
->
öô
.
°ï
 = 
FDS_OP_INIT_TAG_DATA
;

1151 
FDS_OP_INIT_TAG_DATA
:

1154 
boﬁ
 
wrôe_ªqd
 = 
Ál£
;

1155 
uöt16_t
 
i
 = 0; i < 
FDS_MAX_PAGES
; i++)

1157 i‡(
m_∑ges
[
i
].
∑ge_ty≥
 =
FDS_PAGE_ERASED
)

1159 
ªt
 = 
	`∑ge_èg_wrôe_d©a
(
m_∑ges
[
i
].
p_addr
);

1160 
m_∑ges
[
i
].
∑ge_ty≥
 = 
FDS_PAGE_DATA
;

1161 
wrôe_ªqd
 = 
åue
;

1165 i‡(!
wrôe_ªqd
)

1167 
	`Êag_£t
(
FDS_FLAG_INITIALIZED
);

1168 
	`Êag_˛ór
(
FDS_FLAG_INITIALIZING
);

1169  
FDS_OP_COMPLETED
;

1174 
FDS_OP_INIT_ERASE_SWAP
:

1175 
ªt
 = 
	`fs_îa£
(&
fs_c⁄fig
, 
m_sw≠_∑ge
.
p_addr
, 
FDS_PHY_PAGES_IN_VPAGE
, 
NULL
);

1177 
m_sw≠_∑ge
.
wrôe_off£t
 = 
FDS_PAGE_TAG_SIZE
;

1178 
p_›
->
öô
.
°ï
 = 
FDS_OP_INIT_TAG_SWAP
;

1181 
FDS_OP_INIT_PROMOTE_SWAP
:

1184 
ªt
 = 
	`∑ge_èg_wrôe_d©a
(
m_sw≠_∑ge
.
p_addr
);

1186 
uöt16_t
 c⁄° 
gc
 = 
m_gc
.
cur_∑ge
;

1187 
uöt32_t
 c⁄° * c⁄° 
p_ﬁd_sw≠
 = 
m_sw≠_∑ge
.
p_addr
;

1190 
m_sw≠_∑ge
.
p_addr
 = 
m_∑ges
[
gc
].p_addr;

1191 
m_∑ges
[
gc
].
p_addr
 = 
p_ﬁd_sw≠
;

1194 
m_∑ges
[
gc
].
wrôe_off£t
 = 
m_sw≠_∑ge
.write_offset;

1195 
m_sw≠_∑ge
.
wrôe_off£t
 = 
FDS_PAGE_TAG_SIZE
;

1197 
m_∑ges
[
gc
].
∑ge_ty≥
 = 
FDS_PAGE_DATA
;

1198 
p_›
->
öô
.
°ï
 = 
FDS_OP_INIT_TAG_SWAP
;

1207 i‡(
ªt
 !
FDS_SUCCESS
)

1210 
	`Êag_˛ór
(
FDS_FLAG_INITIALIZING
);

1211  
FDS_ERR_BUSY
;

1214  
FDS_OP_EXECUTING
;

1215 
	}
}

1219 
ªt_code_t
 
	$wrôe_execuã
(
uöt32_t
 
¥ev_ªt
, 
fds_›_t
 * c⁄° 
p_›
)

1221 
ªt_code_t
 
ªt
;

1222 
uöt32_t
 * 
p_wrôe_addr
;

1223 
fds_∑ge_t
 * c⁄° 
p_∑ge
 = &
m_∑ges
[
p_›
->
wrôe
.
∑ge
];

1226 
fds_ªc‹d_desc_t
 
desc
 = {0};

1230 
uöt16_t
 
∑ge
;

1232 i‡(
¥ev_ªt
 !
FS_SUCCESS
)

1235 
	`∑ge_off£ts_upd©e
(
p_∑ge
, 
p_›
->
wrôe
.
hódî
.
é
.
Àngth_w‹ds
);

1236  
FDS_ERR_OPERATION_TIMEOUT
;

1240 
p_wrôe_addr
 = (
uöt32_t
*)(
p_∑ge
->
p_addr
 +Ö_∑ge->
wrôe_off£t
);

1243 
p_›
->
wrôe
.
°ï
)

1245 
FDS_OP_WRITE_FIND_RECORD
:

1250 
desc
.
p_ªc‹d
 = 
NULL
;

1251 
desc
.
ªc‹d_id
 = 
p_›
->
wrôe
.
ªc‹d_to_dñëe
;

1253 i‡(!
	`ªc‹d_föd_by_desc
(&
desc
, &
∑ge
))

1255  
FDS_ERR_NOT_FOUND
;

1261 
FDS_OP_WRITE_HEADER_BEGIN
:

1262 
ªt
 = 
	`ªc‹d_hódî_wrôe_begö
(
p_›
, 
p_wrôe_addr
);

1265 
FDS_OP_WRITE_RECORD_ID
:

1266 
ªt
 = 
	`ªc‹d_hódî_wrôe_id
(
p_›
, 
p_wrôe_addr
);

1269 
FDS_OP_WRITE_CHUNKS
:

1270 
ªt
 = 
	`ªc‹d_wrôe_chunk
(
p_›
, 
p_wrôe_addr
);

1273 
FDS_OP_WRITE_HEADER_FINALIZE
:

1274 
ªt
 = 
	`ªc‹d_hódî_wrôe_föÆize
(
p_›
, 
p_wrôe_addr
);

1277 
FDS_OP_WRITE_FLAG_DIRTY
:

1278 
ªt
 = 
	`ªc‹d_hódî_Êag_dúty
((
uöt32_t
*)
desc
.
p_ªc‹d
, 
∑ge
);

1279 
p_›
->
wrôe
.
°ï
 = 
FDS_OP_WRITE_DONE
;

1282 
FDS_OP_WRITE_DONE
:

1283 
ªt
 = 
FDS_OP_COMPLETED
;

1285 #i‡
	`deföed
(
FDS_CRC_ENABLED
)

1286 i‡(
	`Êag_is_£t
(
FDS_FLAG_VERIFY_CRC
))

1288 i‡(!
	`¸c_vîify_suc˚ss
(
p_›
->
wrôe
.
hódî
.
ic
.
¸c16
,

1289 
p_›
->
wrôe
.
hódî
.
é
.
Àngth_w‹ds
,

1290 
p_wrôe_addr
))

1292 
ªt
 = 
FDS_ERR_CRC_CHECK_FAILED
;

1299 
ªt
 = 
FDS_ERR_INTERNAL
;

1305 i‡(
ªt
 !
FDS_OP_EXECUTING
)

1308 
	`∑ge_off£ts_upd©e
(
p_∑ge
, 
p_›
->
wrôe
.
hódî
.
é
.
Àngth_w‹ds
);

1311  
ªt
;

1312 
	}
}

1315 
ªt_code_t
 
	$dñëe_execuã
(
uöt32_t
 
¥ev_ªt
, 
fds_›_t
 * c⁄° 
p_›
)

1317 
ªt_code_t
 
ªt
;

1319 i‡(
¥ev_ªt
 !
FS_SUCCESS
)

1321  
FDS_ERR_OPERATION_TIMEOUT
;

1324 
p_›
->
dñ
.
°ï
)

1326 
FDS_OP_DEL_RECORD_FLAG_DIRTY
:

1327 
ªt
 = 
	`ªc‹d_föd_™d_dñëe
(
p_›
);

1328 
p_›
->
dñ
.
°ï
 = 
FDS_OP_DEL_DONE
;

1331 
FDS_OP_DEL_FILE_FLAG_DIRTY
:

1332 
ªt
 = 
	`fûe_föd_™d_dñëe
(
p_›
);

1333 i‡(
ªt
 =
FDS_ERR_NOT_FOUND
)

1337 
ªt
 = 
FDS_OP_COMPLETED
;

1341 
FDS_OP_DEL_DONE
:

1342 
ªt
 = 
FDS_OP_COMPLETED
;

1346 
ªt
 = 
FDS_ERR_INTERNAL
;

1350  
ªt
;

1351 
	}
}

1354 
ªt_code_t
 
	$gc_execuã
(
uöt32_t
 
¥ev_ªt
)

1356 
ªt_code_t
 
ªt
;

1358 i‡(
¥ev_ªt
 !
FS_SUCCESS
)

1360  
FDS_ERR_OPERATION_TIMEOUT
;

1363 i‡(
m_gc
.
ªsume
)

1365 
m_gc
.
ªsume
 = 
Ál£
;

1369 
	`gc_°©e_adv™˚
();

1372 
m_gc
.
°©e
)

1374 
GC_NEXT_PAGE
:

1375 
ªt
 = 
	`gc_√xt_∑ge
();

1378 
GC_FIND_NEXT_RECORD
:

1379 
ªt
 = 
	`gc_ªc‹d_föd_√xt
();

1382 
GC_COPY_RECORD
:

1383 
ªt
 = 
	`gc_ªc‹d_c›y
();

1386 
GC_ERASE_PAGE
:

1387 
ªt
 = 
	`gc_∑ge_îa£
();

1390 
GC_PROMOTE_SWAP
:

1391 
ªt
 = 
	`gc_sw≠_¥omŸe
();

1394 
GC_TAG_NEW_SWAP
:

1395 
ªt
 = 
	`gc_èg_√w_sw≠
();

1400 
ªt
 = 
FDS_ERR_INTERNAL
;

1405  
ªt
;

1406 
	}
}

1409 
	$queue_¥o˚ss
(
fs_ªt_t
 
ªsu…
)

1411 
ªt_code_t
 
ªt
;

1412 
fds_›_t
 * c⁄° 
p_›
 = &
m_›_queue
.
›
[m_›_queue.
Ω
];

1414 
p_›
->
›_code
)

1416 
FDS_OP_INIT
:

1417 
ªt
 = 
	`öô_execuã
(
ªsu…
, 
p_›
);

1420 
FDS_OP_WRITE
:

1421 
FDS_OP_UPDATE
:

1422 
ªt
 = 
	`wrôe_execuã
(
ªsu…
, 
p_›
);

1425 
FDS_OP_DEL_RECORD
:

1426 
FDS_OP_DEL_FILE
:

1427 
ªt
 = 
	`dñëe_execuã
(
ªsu…
, 
p_›
);

1430 
FDS_OP_GC
:

1431 
ªt
 = 
	`gc_execuã
(
ªsu…
);

1435 
ªt
 = 
FDS_ERR_INTERNAL
;

1439 i‡(
ªt
 !
FDS_OP_EXECUTING
)

1441 
fds_evt_t
 
evt
;

1443 i‡(
ªt
 =
FDS_OP_COMPLETED
)

1445 
evt
.
ªsu…
 = 
FDS_SUCCESS
;

1451 
evt
.
ªsu…
 = 
ªt
;

1454 
	`chunk_queue_skù
(
p_›
);

1457 
	`evít_¥ï¨e
(
p_›
, &
evt
);

1458 
	`evít_£nd
(&
evt
);

1461 i‡(
	`queue_adv™˚
())

1463 
	`queue_¥o˚ss
(
FS_SUCCESS
);

1469 
	`Êag_˛ór
(
FDS_FLAG_PROCESSING
);

1472 
	}
}

1475 
	$queue_°¨t
()

1477 i‡(!
	`Êag_is_£t
(
FDS_FLAG_PROCESSING
))

1479 
	`Êag_£t
(
FDS_FLAG_PROCESSING
);

1480 
	`queue_¥o˚ss
(
FS_SUCCESS
);

1482 
	}
}

1485 
	$fs_evít_h™dÀr
(
fs_evt_t
 c⁄° * c⁄° 
p_evt
, 
fs_ªt_t
 
ªsu…
)

1487 
	`queue_¥o˚ss
(
ªsu…
);

1488 
	}
}

1492 
ªt_code_t
 
	$wrôe_íqueue
(
fds_ªc‹d_desc_t
 * c⁄° 
p_desc
,

1493 
fds_ªc‹d_t
 c⁄° * c⁄° 
p_ªc‹d
,

1494 
fds_ª£rve_tokí_t
 c⁄° * c⁄° 
p_tok
,

1495 
fds_›_code_t
 
›_code
)

1497 
ªt_code_t
 
ªt
;

1498 
fds_›_t
 
›
;

1499 
uöt16_t
 
∑ge
;

1500 
uöt16_t
 
¸c
 = 0;

1501 
uöt16_t
 
Àngth_w‹ds
 = 0;

1503 i‡(!
	`Êag_is_£t
(
FDS_FLAG_INITIALIZED
))

1505  
FDS_ERR_NOT_INITIALIZED
;

1508 i‡(
p_ªc‹d
 =
NULL
)

1510  
FDS_ERR_NULL_ARG
;

1513 i‡((
p_ªc‹d
->
fûe_id
 =
FDS_FILE_ID_INVALID
) ||

1514 (
p_ªc‹d
->
key
 =
FDS_RECORD_KEY_DIRTY
))

1516  
FDS_ERR_INVALID_ARG
;

1519 i‡(!
	`chunk_is_Æig√d
(
p_ªc‹d
->
d©a
.
p_chunks
,

1520 
p_ªc‹d
->
d©a
.
num_chunks
))

1522  
FDS_ERR_UNALIGNED_ADDR
;

1526 i‡(
p_tok
 =
NULL
)

1529 
uöt32_t
 
i
 = 0; i < 
p_ªc‹d
->
d©a
.
num_chunks
; i++)

1531 
Àngth_w‹ds
 +
p_ªc‹d
->
d©a
.
p_chunks
[
i
].length_words;

1535 
ªt
 = 
	`wrôe_•a˚_ª£rve
(
Àngth_w‹ds
, &
∑ge
);

1537 i‡(
ªt
 !
FDS_SUCCESS
)

1541  
ªt
;

1546 
∑ge
 = 
p_tok
->page;

1547 
Àngth_w‹ds
 = 
p_tok
->length_words;

1551 
›
.
›_code
 = op_code;

1552 
›
.
wrôe
.
°ï
 = 
FDS_OP_WRITE_HEADER_BEGIN
;

1553 
›
.
wrôe
.
∑ge
 =Öage;

1554 
›
.
wrôe
.
chunk_cou¡
 = 
p_ªc‹d
->
d©a
.
num_chunks
;

1555 
›
.
wrôe
.
chunk_off£t
 = 
FDS_OFFSET_DATA
;

1556 
›
.
wrôe
.
hódî
.
ªc‹d_id
 = 
	`ªc‹d_id_√w
();

1557 
›
.
wrôe
.
hódî
.
ic
.
fûe_id
 = 
p_ªc‹d
->file_id;

1558 
›
.
wrôe
.
hódî
.
é
.
ªc‹d_key
 = 
p_ªc‹d
->
key
;

1559 
›
.
wrôe
.
hódî
.
é
.
Àngth_w‹ds
 =Üength_words;

1561 i‡(
›_code
 =
FDS_OP_UPDATE
)

1563 
›
.
wrôe
.
°ï
 = 
FDS_OP_WRITE_FIND_RECORD
;

1565 
›
.
wrôe
.
ªc‹d_to_dñëe
 = 
p_desc
->
ªc‹d_id
;

1568 #i‡
	`deföed
 (
FDS_CRC_ENABLED
)

1571 
¸c
 = 
	`¸c16_compuã
((
uöt8_t
*)&
›
.
wrôe
.
hódî
, 6, 
NULL
);

1572 
¸c
 = 
	`¸c16_compuã
((
uöt8_t
*)&
›
.
wrôe
.
hódî
.
ªc‹d_id
, 4, &crc);

1574 
uöt32_t
 
i
 = 0; i < 
p_ªc‹d
->
d©a
.
num_chunks
; i++)

1577 
¸c
 = 
	`¸c16_compuã
((
uöt8_t
*)
p_ªc‹d
->
d©a
.
p_chunks
[
i
].
p_d©a
,

1578 
p_ªc‹d
->
d©a
.
p_chunks
[
i
].
Àngth_w‹ds
 * (
uöt32_t
), &
¸c
);

1582 
›
.
wrôe
.
hódî
.
ic
.
¸c16
 = 
¸c
;

1585 i‡(!
	`›_íqueue
(&
›
, 
p_ªc‹d
->
d©a
.
num_chunks
,Ö_ªc‹d->d©a.
p_chunks
))

1588 
	`CRITICAL_SECTION_ENTER
();

1589 
	`wrôe_•a˚_‰ì
(
Àngth_w‹ds
, 
∑ge
);

1590 
	`CRITICAL_SECTION_EXIT
();

1592  
FDS_ERR_NO_SPACE_IN_QUEUES
;

1596 i‡(
p_desc
 !
NULL
)

1598 
p_desc
->
p_ªc‹d
 = 
NULL
;

1600 
p_desc
->
ªc‹d_id
 = 
›
.
wrôe
.
hódî
.record_id;

1601 
p_desc
->
ªc‹d_is_›í
 = 
Ál£
;

1602 
p_desc
->
gc_run_cou¡
 = 
m_gc
.
run_cou¡
;

1606 
	`queue_°¨t
();

1608  
FDS_SUCCESS
;

1609 
	}
}

1612 
ªt_code_t
 
	$fds_ªgi°î
(
fds_cb_t
 
cb
)

1614 
ªt_code_t
 
ªt
;

1616 
	`CRITICAL_SECTION_ENTER
();

1617 i‡(
m_u£rs
 =
FDS_MAX_USERS
)

1619 
ªt
 = 
FDS_ERR_USER_LIMIT_REACHED
;

1623 
m_cb_èbÀ
[
m_u£rs
] = 
cb
;

1624 
m_u£rs
++;

1626 
ªt
 = 
FDS_SUCCESS
;

1628 
	`CRITICAL_SECTION_EXIT
();

1630  
ªt
;

1631 
	}
}

1634 
ªt_code_t
 
	$fds_öô
()

1636 
fds_evt_t
 c⁄° 
evt_suc˚ss
 =

1638 .
id
 = 
FDS_EVT_INIT
,

1639 .
ªsu…
 = 
FDS_SUCCESS


1643 i‡(
	`Êag_is_£t
(
FDS_FLAG_INITIALIZED
))

1645 
	`evít_£nd
(&
evt_suc˚ss
);

1646  
FDS_SUCCESS
;

1649 i‡(
	`Êag_is_£t
(
FDS_FLAG_INITIALIZING
))

1651  
FDS_SUCCESS
;

1654 
	`Êag_£t
(
FDS_FLAG_INITIALIZING
);

1656 ()
	`fs_öô
();

1660 
fds_›_t
 
›
;

1661 
›
.
›_code
 = 
FDS_OP_INIT
;

1663 
fds_öô_›ts_t
 
öô_›ts
 = 
	`∑ges_öô
();

1665 
öô_›ts
)

1667 
NO_PAGES
:

1668 
NO_SWAP
:

1669  
FDS_ERR_NO_PAGES
;

1671 
ALREADY_INSTALLED
:

1673 
	`Êag_£t
(
FDS_FLAG_INITIALIZED
);

1674 
	`Êag_˛ór
(
FDS_FLAG_INITIALIZING
);

1675 
	`evít_£nd
(&
evt_suc˚ss
);

1676  
FDS_SUCCESS
;

1678 
FRESH_INSTALL
:

1679 
TAG_SWAP
:

1680 
›
.
öô
.
°ï
 = 
FDS_OP_INIT_TAG_SWAP
;

1683 
PROMOTE_SWAP
:

1684 
PROMOTE_SWAP_INST
:

1685 
›
.
öô
.
°ï
 = 
FDS_OP_INIT_PROMOTE_SWAP
;

1688 
DISCARD_SWAP
:

1689 
›
.
öô
.
°ï
 = 
FDS_OP_INIT_ERASE_SWAP
;

1692 
TAG_DATA
:

1693 
TAG_DATA_INST
:

1694 
›
.
öô
.
°ï
 = 
FDS_OP_INIT_TAG_DATA
;

1703 ()
	`›_íqueue
(&
›
, 0, 
NULL
);

1705 
	`queue_°¨t
();

1707  
FDS_SUCCESS
;

1708 
	}
}

1711 
ªt_code_t
 
	$fds_ªc‹d_›í
(
fds_ªc‹d_desc_t
 * c⁄° 
p_desc
,

1712 
fds_Êash_ªc‹d_t
 * c⁄° 
p_Êash_ªc
)

1714 
uöt16_t
 
∑ge
;

1716 i‡((
p_desc
 =
NULL
Ë|| (
p_Êash_ªc
 == NULL))

1718  
FDS_ERR_NULL_ARG
;

1722 i‡(
	`ªc‹d_föd_by_desc
(
p_desc
, &
∑ge
))

1724 
fds_hódî_t
 c⁄° * c⁄° 
p_hódî
 = (fds_hódî_t*)
p_desc
->
p_ªc‹d
;

1726 #i‡
	`deföed
(
FDS_CRC_ENABLED
)

1727 i‡(!
	`¸c_vîify_suc˚ss
(
p_hódî
->
ic
.
¸c16
,

1728 
p_hódî
->
é
.
Àngth_w‹ds
,

1729 
p_desc
->
p_ªc‹d
))

1731  
FDS_ERR_CRC_CHECK_FAILED
;

1735 
	`CRITICAL_SECTION_ENTER
();

1736 
m_∑ges
[
∑ge
].
ªc‹ds_›í
++;

1737 
	`CRITICAL_SECTION_EXIT
();

1740 
p_Êash_ªc
->
p_hódî
 =Ö_header;

1741 
p_Êash_ªc
->
p_d©a
 = (
p_desc
->
p_ªc‹d
 + 
FDS_HEADER_SIZE
);

1744 
p_desc
->
ªc‹d_is_›í
 = 
åue
;

1746  
FDS_SUCCESS
;

1751  
FDS_ERR_NOT_FOUND
;

1752 
	}
}

1755 
ªt_code_t
 
	$fds_ªc‹d_˛o£
(
fds_ªc‹d_desc_t
 * c⁄° 
p_desc
)

1757 
ªt_code_t
 
ªt
;

1758 
uöt16_t
 
∑ge
;

1760 i‡(
p_desc
 =
NULL
)

1762  
FDS_ERR_NULL_ARG
;

1765 i‡(
	`ªc‹d_föd_by_desc
((
fds_ªc‹d_desc_t
*)
p_desc
, &
∑ge
))

1767 
	`CRITICAL_SECTION_ENTER
();

1768 i‡((
m_∑ges
[
∑ge
].
ªc‹ds_›í
 > 0Ë&& (
p_desc
->
ªc‹d_is_›í
))

1771 
m_∑ges
[
∑ge
].
ªc‹ds_›í
--;

1772 
p_desc
->
ªc‹d_is_›í
 = 
Ál£
;

1774 
ªt
 = 
FDS_SUCCESS
;

1778 
ªt
 = 
FDS_ERR_NO_OPEN_RECORDS
;

1780 
	`CRITICAL_SECTION_EXIT
();

1784 
ªt
 = 
FDS_ERR_NOT_FOUND
;

1787  
ªt
;

1788 
	}
}

1791 
ªt_code_t
 
	$fds_ª£rve
(
fds_ª£rve_tokí_t
 * c⁄° 
p_tok
, 
uöt16_t
 
Àngth_w‹ds
)

1793 
ªt_code_t
 
ªt
;

1794 
uöt16_t
 
∑ge
;

1796 i‡(!
	`Êag_is_£t
(
FDS_FLAG_INITIALIZED
))

1798  
FDS_ERR_NOT_INITIALIZED
;

1801 i‡(
p_tok
 =
NULL
)

1803  
FDS_ERR_NULL_ARG
;

1806 
ªt
 = 
	`wrôe_•a˚_ª£rve
(
Àngth_w‹ds
, &
∑ge
);

1808 i‡(
ªt
 =
FDS_SUCCESS
)

1810 
p_tok
->
∑ge
 =Öage;

1811 
p_tok
->
Àngth_w‹ds
 =Üength_words;

1814  
ªt
;

1815 
	}
}

1818 
ªt_code_t
 
	$fds_ª£rve_ˇn˚l
(
fds_ª£rve_tokí_t
 * c⁄° 
p_tok
)

1820 
ªt_code_t
 
ªt
;

1822 i‡(!
	`Êag_is_£t
(
FDS_FLAG_INITIALIZED
))

1824  
FDS_ERR_NOT_INITIALIZED
;

1827 i‡(
p_tok
 =
NULL
)

1829  
FDS_ERR_NULL_ARG
;

1832 i‡(
p_tok
->
∑ge
 > 
FDS_MAX_PAGES
)

1835  
FDS_ERR_INVALID_ARG
;

1838 
fds_∑ge_t
 c⁄° * c⁄° 
p_∑ge
 = &
m_∑ges
[
p_tok
->
∑ge
];

1840 
	`CRITICAL_SECTION_ENTER
();

1841 i‡(
p_∑ge
->
w‹ds_ª£rved
 - (
FDS_HEADER_SIZE
 + 
p_tok
->
Àngth_w‹ds
) >= 0)

1844 
	`wrôe_•a˚_‰ì
(
p_tok
->
Àngth_w‹ds
,Ö_tok->
∑ge
);

1847 
p_tok
->
∑ge
 = 0;

1848 
p_tok
->
Àngth_w‹ds
 = 0;

1849 
ªt
 = 
FDS_SUCCESS
;

1855 
ªt
 = 
FDS_ERR_INVALID_ARG
;

1857 
	`CRITICAL_SECTION_EXIT
();

1859  
ªt
;

1860 
	}
}

1863 
ªt_code_t
 
	$fds_ªc‹d_wrôe
(
fds_ªc‹d_desc_t
 * c⁄° 
p_desc
,

1864 
fds_ªc‹d_t
 c⁄° * c⁄° 
p_ªc‹d
)

1866  
	`wrôe_íqueue
(
p_desc
, 
p_ªc‹d
, 
NULL
, 
FDS_OP_WRITE
);

1867 
	}
}

1870 
ªt_code_t
 
	$fds_ªc‹d_wrôe_ª£rved
(
fds_ªc‹d_desc_t
 * c⁄° 
p_desc
,

1871 
fds_ªc‹d_t
 c⁄° * c⁄° 
p_ªc‹d
,

1872 
fds_ª£rve_tokí_t
 c⁄° * c⁄° 
p_tok
)

1875 i‡(
p_tok
 =
NULL
)

1877  
FDS_ERR_NULL_ARG
;

1880  
	`wrôe_íqueue
(
p_desc
, 
p_ªc‹d
, 
p_tok
, 
FDS_OP_WRITE
);

1881 
	}
}

1884 
ªt_code_t
 
	$fds_ªc‹d_upd©e
(
fds_ªc‹d_desc_t
 * c⁄° 
p_desc
,

1885 
fds_ªc‹d_t
 c⁄° * c⁄° 
p_ªc‹d
)

1888 i‡(
p_desc
 =
NULL
)

1890  
FDS_ERR_NULL_ARG
;

1893  
	`wrôe_íqueue
(
p_desc
, 
p_ªc‹d
, 
NULL
, 
FDS_OP_UPDATE
);

1894 
	}
}

1897 
ªt_code_t
 
	$fds_ªc‹d_dñëe
(
fds_ªc‹d_desc_t
 * c⁄° 
p_desc
)

1899 
fds_›_t
 
›
;

1901 i‡(!
	`Êag_is_£t
(
FDS_FLAG_INITIALIZED
))

1903  
FDS_ERR_NOT_INITIALIZED
;

1906 i‡(
p_desc
 =
NULL
)

1908  
FDS_ERR_NULL_ARG
;

1911 
›
.
›_code
 = 
FDS_OP_DEL_RECORD
;

1912 
›
.
dñ
.
°ï
 = 
FDS_OP_DEL_RECORD_FLAG_DIRTY
;

1913 
›
.
dñ
.
ªc‹d_to_dñëe
 = 
p_desc
->
ªc‹d_id
;

1915 i‡(
	`›_íqueue
(&
›
, 0, 
NULL
))

1917 
	`queue_°¨t
();

1918  
FDS_SUCCESS
;

1921  
FDS_ERR_NO_SPACE_IN_QUEUES
;

1922 
	}
}

1925 
ªt_code_t
 
	$fds_fûe_dñëe
(
uöt16_t
 
fûe_id
)

1927 
fds_›_t
 
›
;

1929 i‡(!
	`Êag_is_£t
(
FDS_FLAG_INITIALIZED
))

1931  
FDS_ERR_NOT_INITIALIZED
;

1934 i‡(
fûe_id
 =
FDS_FILE_ID_INVALID
)

1936  
FDS_ERR_INVALID_ARG
;

1939 
›
.
›_code
 = 
FDS_OP_DEL_FILE
;

1940 
›
.
dñ
.
°ï
 = 
FDS_OP_DEL_FILE_FLAG_DIRTY
;

1941 
›
.
dñ
.
fûe_id
 = file_id;

1943 i‡(
	`›_íqueue
(&
›
, 0, 
NULL
))

1945 
	`queue_°¨t
();

1946  
FDS_SUCCESS
;

1949  
FDS_ERR_NO_SPACE_IN_QUEUES
;

1950 
	}
}

1953 
ªt_code_t
 
	$fds_gc
()

1955 
fds_›_t
 
›
;

1957 i‡(!
	`Êag_is_£t
(
FDS_FLAG_INITIALIZED
))

1959  
FDS_ERR_NOT_INITIALIZED
;

1962 
›
.
›_code
 = 
FDS_OP_GC
;

1964 i‡(
	`›_íqueue
(&
›
, 0, 
NULL
))

1966 i‡(
m_gc
.
°©e
 !
GC_BEGIN
)

1969 
m_gc
.
ªsume
 = 
åue
;

1972 
	`queue_°¨t
();

1973  
FDS_SUCCESS
;

1976  
FDS_ERR_NO_SPACE_IN_QUEUES
;

1977 
	}
}

1980 
ªt_code_t
 
	$fds_ªc‹d_ôî©e
(
fds_ªc‹d_desc_t
 * c⁄° 
p_desc
,

1981 
fds_föd_tokí_t
 * c⁄° 
p_tokí
)

1983  
	`ªc‹d_föd
(
NULL
, NULL, 
p_desc
, 
p_tokí
);

1984 
	}
}

1987 
ªt_code_t
 
	$fds_ªc‹d_föd
(
uöt16_t
 
fûe_id
,

1988 
uöt16_t
 
ªc‹d_key
,

1989 
fds_ªc‹d_desc_t
 * c⁄° 
p_desc
,

1990 
fds_föd_tokí_t
 * c⁄° 
p_tokí
)

1992  
	`ªc‹d_föd
(&
fûe_id
, &
ªc‹d_key
, 
p_desc
, 
p_tokí
);

1993 
	}
}

1996 
ªt_code_t
 
	$fds_ªc‹d_föd_by_key
(
uöt16_t
 
ªc‹d_key
,

1997 
fds_ªc‹d_desc_t
 * c⁄° 
p_desc
,

1998 
fds_föd_tokí_t
 * c⁄° 
p_tokí
)

2000  
	`ªc‹d_föd
(
NULL
, &
ªc‹d_key
, 
p_desc
, 
p_tokí
);

2001 
	}
}

2004 
ªt_code_t
 
	$fds_ªc‹d_föd_ö_fûe
(
uöt16_t
 
fûe_id
,

2005 
fds_ªc‹d_desc_t
 * c⁄° 
p_desc
,

2006 
fds_föd_tokí_t
 * c⁄° 
p_tokí
)

2008  
	`ªc‹d_föd
(&
fûe_id
, 
NULL
, 
p_desc
, 
p_tokí
);

2009 
	}
}

2012 
ªt_code_t
 
	$fds_des¸ùt‹_‰om_ªc_id
(
fds_ªc‹d_desc_t
 * c⁄° 
p_desc
,

2013 
uöt32_t
 
ªc‹d_id
)

2015 i‡(
p_desc
 =
NULL
)

2017  
FDS_ERR_NULL_ARG
;

2021 
	`mem£t
(
p_desc
, 0x00, (
fds_ªc‹d_desc_t
));

2022 
p_desc
->
ªc‹d_id
 =Ñecord_id;

2024  
FDS_SUCCESS
;

2025 
	}
}

2028 
ªt_code_t
 
	$fds_ªc‹d_id_‰om_desc
(
fds_ªc‹d_desc_t
 c⁄° * c⁄° 
p_desc
,

2029 
uöt32_t
 * c⁄° 
p_ªc‹d_id
)

2031 i‡((
p_desc
 =
NULL
Ë|| (
p_ªc‹d_id
 == NULL))

2033  
FDS_ERR_NULL_ARG
;

2036 *
p_ªc‹d_id
 = 
p_desc
->
ªc‹d_id
;

2038  
FDS_SUCCESS
;

2039 
	}
}

2042 
ªt_code_t
 
	$fds_°©
(
fds_°©_t
 * c⁄° 
p_°©
)

2044 
uöt16_t
 c⁄° 
w‹ds_ö_∑ge
 = 
FDS_PAGE_SIZE
;

2046 
uöt16_t
 
c⁄tig_w‹ds
 = 0;

2048 i‡(!
	`Êag_is_£t
(
FDS_FLAG_INITIALIZED
))

2050  
FDS_ERR_NOT_INITIALIZED
;

2053 i‡(
p_°©
 =
NULL
)

2055  
FDS_ERR_NULL_ARG
;

2058 
	`mem£t
(
p_°©
, 0x00, (
fds_°©_t
));

2060 
uöt16_t
 
i
 = 0; i < 
FDS_MAX_PAGES
; i++)

2062 
uöt32_t
 c⁄° * 
p_ªc‹d
 = 
NULL
;

2063 
uöt16_t
 c⁄° 
w‹ds_u£d
 = 
m_∑ges
[
i
].
wrôe_off£t
 + m_∑ges[i].
w‹ds_ª£rved
;

2065 
p_°©
->
›í_ªc‹ds
 +
m_∑ges
[
i
].
ªc‹ds_›í
;

2066 
p_°©
->
w‹ds_ª£rved
 +
m_∑ges
[
i
].words_reserved;

2067 
p_°©
->
w‹ds_u£d
 += words_used;

2068 
c⁄tig_w‹ds
 = (
w‹ds_ö_∑ge
 - 
w‹ds_u£d
);

2070 i‡(
c⁄tig_w‹ds
 > 
p_°©
->
œrge°_c⁄tig
)

2072 
p_°©
->
œrge°_c⁄tig
 = 
c⁄tig_w‹ds
;

2075 
	`ªc‹d_föd_√xt
(
i
, &
p_ªc‹d
))

2077 
p_°©
->
vÆid_ªc‹ds
++;

2080 
	`dúty_ªc‹ds_°©
(
i
, &
p_°©
->
dúty_ªc‹ds
, &p_°©->
‰ìabÀ_w‹ds
);

2083  
FDS_SUCCESS
;

2084 
	}
}

2087 #i‡
deföed
(
FDS_CRC_ENABLED
)

2089 
ªt_code_t
 
	$fds_vîify_¸c_⁄_wrôes
(
boﬁ
 
íabÀ
)

2091 i‡(
íabÀ
)

2093 
	`Êag_£t
(
FDS_FLAG_VERIFY_CRC
);

2097 
	`Êag_˛ór
(
FDS_FLAG_VERIFY_CRC
);

2100  
FDS_SUCCESS
;

2101 
	}
}

	@D:\Private\Programing\MCU\Nordic\ble_app_template\nRF5_SDK_12.3.0_d7731ad\components\libraries\fstorage\fstorage.c

40 
	~"sdk_comm⁄.h
"

41 #i‡
NRF_MODULE_ENABLED
(
FSTORAGE
)

42 
	~"f°‹age.h
"

43 
	~"f°‹age_öã∫Æ_defs.h
"

45 
	~<°döt.h
>

46 
	~<°rög.h
>

47 
	~<°dboﬁ.h
>

48 
	~"ƒf_îr‹.h
"

49 
	~"ƒf_soc.h
"

52 
uöt8_t
 
	gm_Êags
;

53 
fs_›_queue_t
 
	gm_queue
;

54 
uöt8_t
 
	gm_ªåy_cou¡
;

57 
	$£nd_evít
(
fs_›_t
 c⁄° * c⁄° 
p_›
, 
fs_ªt_t
 
ªsu…
)

59 
fs_evt_t
 
evt
;

60 
	`mem£t
(&
evt
, 0x00, (
fs_evt_t
));

62 
p_›
->
›_code
)

64 
FS_OP_STORE
:

65 
evt
.
id
 = 
FS_EVT_STORE
;

66 
evt
.
°‹e
.
p_d©a
 = 
p_›
->°‹e.
p_de°
;

67 
evt
.
°‹e
.
Àngth_w‹ds
 = 
p_›
->store.length_words;

70 
FS_OP_ERASE
:

71 
evt
.
id
 = 
FS_EVT_ERASE
;

72 
evt
.
îa£
.
fú°_∑ge
 = 
p_›
->îa£.
∑ge
 -Ö_›->îa£.
∑ges_îa£d
;

73 
evt
.
îa£
.
œ°_∑ge
 = 
p_›
->îa£.
∑ge
;

80 
evt
.
p_c⁄ãxt
 = 
p_›
->p_context;

82 
p_›
->
p_c⁄fig
->
	`ˇŒback
(&
evt
, 
ªsu…
);

83 
	}
}

87 
boﬁ
 
	$check_c⁄fig
(
fs_c⁄fig_t
 c⁄° * c⁄° 
c⁄fig
)

89 #i‚de‡
DFU_SUPPORT_SIGNING


90 i‡((
c⁄fig
 !
NULL
) &&

91 (
FS_SECTION_VARS_START_ADDR
 <(
uöt32_t
)
c⁄fig
) &&

92 (
FS_SECTION_VARS_END_ADDR
 > (
uöt32_t
)
c⁄fig
))

94  
åue
;

97  
Ál£
;

99  
åue
;

101 
	}
}

105 
uöt32_t
 
	$°‹e_execuã
(
fs_›_t
 c⁄° * c⁄° 
p_›
)

107 
uöt16_t
 
chunk_Àn
;

109 i‡((
p_›
->
°‹e
.
Àngth_w‹ds
 -Ö_›->°‹e.
off£t
Ë< 
FS_MAX_WRITE_SIZE_WORDS
)

111 
chunk_Àn
 = 
p_›
->
°‹e
.
Àngth_w‹ds
 -Ö_›->°‹e.
off£t
;

115 
chunk_Àn
 = 
FS_MAX_WRITE_SIZE_WORDS
;

118  
	`sd_Êash_wrôe
((
uöt32_t
*)
p_›
->
°‹e
.
p_de°
 +Ö_›->°‹e.
off£t
,

119 (
uöt32_t
*)
p_›
->
°‹e
.
p_§c
 +Ö_›->°‹e.
off£t
,

120 
chunk_Àn
);

121 
	}
}

125 
uöt32_t
 
	$îa£_execuã
(
fs_›_t
 c⁄° * c⁄° 
p_›
)

127  
	`sd_Êash_∑ge_îa£
(
p_›
->
îa£
.
∑ge
);

128 
	}
}

133 
	$queue_adv™˚
()

135 i‡(--
m_queue
.
cou¡
 == 0)

137 
m_Êags
 &~
FS_FLAG_PROCESSING
;

140 i‡(++
m_queue
.
Ω
 =
FS_QUEUE_SIZE
)

142 
m_queue
.
Ω
 = 0;

144 
	}
}

148 
	$queue_¥o˚ss
()

150 
uöt32_t
 
ªt
;

151 
fs_›_t
 * c⁄° 
p_›
 = &
m_queue
.
›
[m_queue.
Ω
];

153 i‡(
m_queue
.
cou¡
 > 0)

155 
p_›
->
›_code
)

157 
FS_OP_STORE
:

158 
ªt
 = 
	`°‹e_execuã
(
p_›
);

161 
FS_OP_ERASE
:

162 
ªt
 = 
	`îa£_execuã
(
p_›
);

166 
ªt
 = 
FS_ERR_INTERNAL
;

172 i‡(
ªt
 =
NRF_ERROR_BUSY
)

174 
m_Êags
 &~
FS_FLAG_PROCESSING
;

175 
m_Êags
 |
FS_FLAG_FLASH_REQ_PENDING
;

177 i‡(
ªt
 !
NRF_SUCCESS
)

180 
	`£nd_evít
(
p_›
, 
FS_ERR_INTERNAL
);

187 
	}
}

192 
	$queue_°¨t
()

194 i‡(!(
m_Êags
 & 
FS_FLAG_PROCESSING
) &&

195 !(
m_Êags
 & 
FS_FLAG_FLASH_REQ_PENDING
))

197 
m_Êags
 |
FS_FLAG_PROCESSING
;

198 
	`queue_¥o˚ss
();

200 
	}
}

205 
	$⁄_›î©i⁄_suc˚ss
(
fs_›_t
 * c⁄° 
p_›
)

207 
m_ªåy_cou¡
 = 0;

209 
p_›
->
›_code
)

211 
FS_OP_STORE
:

213 
uöt16_t
 
chunk_Àn
;

215 i‡((
p_›
->
°‹e
.
Àngth_w‹ds
 -Ö_›->°‹e.
off£t
Ë< 
FS_MAX_WRITE_SIZE_WORDS
)

217 
chunk_Àn
 = 
p_›
->
°‹e
.
Àngth_w‹ds
 -Ö_›->°‹e.
off£t
;

221 
chunk_Àn
 = 
FS_MAX_WRITE_SIZE_WORDS
;

224 
p_›
->
°‹e
.
off£t
 +
chunk_Àn
;

226 i‡(
p_›
->
°‹e
.
off£t
 =p_›->°‹e.
Àngth_w‹ds
)

229 
	`£nd_evít
(
p_›
, 
FS_SUCCESS
);

230 
	`queue_adv™˚
();

235 
FS_OP_ERASE
:

237 
p_›
->
îa£
.
∑ge
++;

238 
p_›
->
îa£
.
∑ges_îa£d
++;

240 i‡(
p_›
->
îa£
.
∑ges_îa£d
 =p_›->îa£.
∑ges_to_îa£
)

242 
	`£nd_evít
(
p_›
, 
FS_SUCCESS
);

243 
	`queue_adv™˚
();

252 
	}
}

257 
	$⁄_›î©i⁄_Áûuª
(
fs_›_t
 c⁄° * c⁄° 
p_›
)

259 i‡(++
m_ªåy_cou¡
 > 
FS_OP_MAX_RETRIES
)

261 
m_ªåy_cou¡
 = 0;

263 
	`£nd_evít
(
p_›
, 
FS_ERR_OPERATION_TIMEOUT
);

264 
	`queue_adv™˚
();

266 
	}
}

271 
boﬁ
 
	$queue_gë_√xt_‰ì
(
fs_›_t
 ** 
p_›
)

273 
uöt32_t
 
idx
;

275 i‡(
m_queue
.
cou¡
 =
FS_QUEUE_SIZE
)

277  
Ál£
;

280 
idx
 = ((
m_queue
.
Ω
 + m_queue.
cou¡
Ë< 
FS_QUEUE_SIZE
) ?

281 (
m_queue
.
Ω
 + m_queue.
cou¡
Ë: ((m_queue.Ω + m_queue.cou¡)-
FS_QUEUE_SIZE
);

283 
m_queue
.
cou¡
++;

286 
	`mem£t
(&
m_queue
.
›
[
idx
], 0x00, (
fs_›_t
));

288 *
p_›
 = &
m_queue
.
›
[
idx
];

290  
åue
;

291 
	}
}

294 
fs_ªt_t
 
	$fs_öô
()

296 
uöt32_t
 c⁄° 
tŸÆ_u£rs
 = 
FS_SECTION_VARS_COUNT
;

297 
uöt32_t
 
c⁄figs_to_öô
 = 
FS_SECTION_VARS_COUNT
;

298 
uöt32_t
 c⁄° * 
p_cuºít_íd
 = 
FS_PAGE_END_ADDR
;

300 i‡(
m_Êags
 & 
FS_FLAG_INITIALIZED
)

302  
FS_SUCCESS
;

314 
uöt32_t
 
i
 = 0; i < 
tŸÆ_u£rs
; i++)

316 
fs_c⁄fig_t
 c⁄° * c⁄° 
p_c⁄fig
 = 
	`FS_SECTION_VARS_GET
(
i
);

318 i‡((
p_c⁄fig
->
p_°¨t_addr
 !
NULL
) &&

319 (
p_c⁄fig
->
p_íd_addr
 !
NULL
))

321 
c⁄figs_to_öô
--;

328 
uöt32_t
 
i
 = 0; i < 
c⁄figs_to_öô
; i++)

330 
fs_c⁄fig_t
 * 
p_c⁄fig_i
 = 
	`FS_SECTION_VARS_GET
(
i
);

331 
uöt8_t
 
max_¥i‹ôy
 = 0;

332 
uöt8_t
 
max_ödex
 = 
i
;

334 
uöt32_t
 
j
 = 0; j < 
tŸÆ_u£rs
; j++)

336 
fs_c⁄fig_t
 c⁄° * c⁄° 
p_c⁄fig_j
 = 
	`FS_SECTION_VARS_GET
(
j
);

339 i‡(
p_c⁄fig_j
->
¥i‹ôy
 =
p_c⁄fig_i
->priority)

342  
FS_ERR_INVALID_CFG
;

346 i‡((
p_c⁄fig_j
->
p_°¨t_addr
 !
NULL
) &&

347 (
p_c⁄fig_j
->
p_íd_addr
 !
NULL
))

356 i‡(
p_c⁄fig_j
->
¥i‹ôy
 > 
max_¥i‹ôy
)

358 
max_¥i‹ôy
 = 
p_c⁄fig_j
->
¥i‹ôy
;

359 
max_ödex
 = 
j
;

363 
p_c⁄fig_i
 = 
	`FS_SECTION_VARS_GET
(
max_ödex
);

365 
p_c⁄fig_i
->
p_íd_addr
 = 
p_cuºít_íd
;

366 
p_c⁄fig_i
->
p_°¨t_addr
 = 
p_cuºít_íd
 - (p_c⁄fig_i->
num_∑ges
 * 
FS_PAGE_SIZE_WORDS
);

368 
p_cuºít_íd
 = 
p_c⁄fig_i
->
p_°¨t_addr
;

371 
m_Êags
 |
FS_FLAG_INITIALIZED
;

373  
FS_SUCCESS
;

374 
	}
}

377 
fs_ªt_t
 
	$fs_Áke_öô
()

379 
m_Êags
 |
FS_FLAG_INITIALIZED
;

380  
FS_SUCCESS
;

381 
	}
}

384 
fs_ªt_t
 
	$fs_°‹e
(
fs_c⁄fig_t
 c⁄° * c⁄° 
p_c⁄fig
,

385 
uöt32_t
 c⁄° * c⁄° 
p_de°
,

386 
uöt32_t
 c⁄° * c⁄° 
p_§c
,

387 
uöt16_t
 c⁄° 
Àngth_w‹ds
,

388 * 
p_c⁄ãxt
)

390 
fs_›_t
 * 
p_›
;

392 i‡(!(
m_Êags
 & 
FS_FLAG_INITIALIZED
))

394  
FS_ERR_NOT_INITIALIZED
;

397 i‡(!
	`check_c⁄fig
(
p_c⁄fig
))

399  
FS_ERR_INVALID_CFG
;

402 i‡((
p_§c
 =
NULL
Ë|| (
p_de°
 == NULL))

404  
FS_ERR_NULL_ARG
;

408 i‡(((
uöt32_t
)
p_§c
 & 0x03) ||

409 ((
uöt32_t
)
p_de°
 & 0x03))

411  
FS_ERR_UNALIGNED_ADDR
;

415 i‡((
p_c⁄fig
->
p_°¨t_addr
 > 
p_de°
) ||

416 (
p_c⁄fig
->
p_íd_addr
 < (
p_de°
 + 
Àngth_w‹ds
)))

418  
FS_ERR_INVALID_ADDR
;

421 i‡(
Àngth_w‹ds
 == 0)

423  
FS_ERR_INVALID_ARG
;

426 i‡(!
	`queue_gë_√xt_‰ì
(&
p_›
))

428  
FS_ERR_QUEUE_FULL
;

432 
p_›
->
p_c⁄ãxt
 =Ö_context;

433 
p_›
->
p_c⁄fig
 =Ö_config;

434 
p_›
->
›_code
 = 
FS_OP_STORE
;

435 
p_›
->
°‹e
.
p_§c
 =Ö_src;

436 
p_›
->
°‹e
.
p_de°
 =Ö_dest;

437 
p_›
->
°‹e
.
Àngth_w‹ds
 =Üength_words;

439 
	`queue_°¨t
();

441  
FS_SUCCESS
;

442 
	}
}

445 
fs_ªt_t
 
	$fs_îa£
(
fs_c⁄fig_t
 c⁄° * c⁄° 
p_c⁄fig
,

446 
uöt32_t
 c⁄° * c⁄° 
p_∑ge_addr
,

447 
uöt16_t
 c⁄° 
num_∑ges
,

448 * 
p_c⁄ãxt
)

450 
fs_›_t
 * 
p_›
;

452 i‡(!(
m_Êags
 & 
FS_FLAG_INITIALIZED
))

454  
FS_ERR_NOT_INITIALIZED
;

457 i‡(!
	`check_c⁄fig
(
p_c⁄fig
))

459  
FS_ERR_INVALID_CFG
;

462 i‡(
p_∑ge_addr
 =
NULL
)

464  
FS_ERR_NULL_ARG
;

468 i‡(((
uöt32_t
)
p_∑ge_addr
 & (
FS_PAGE_SIZE
-1)) != 0)

470  
FS_ERR_UNALIGNED_ADDR
;

474 i‡((
p_∑ge_addr
 < 
p_c⁄fig
->
p_°¨t_addr
) ||

475 (
p_∑ge_addr
 + (
FS_PAGE_SIZE_WORDS
 * 
num_∑ges
Ë> 
p_c⁄fig
->
p_íd_addr
))

477  
FS_ERR_INVALID_ADDR
;

480 i‡(
num_∑ges
 == 0)

482  
FS_ERR_INVALID_ARG
;

485 i‡(!
	`queue_gë_√xt_‰ì
(&
p_›
))

487  
FS_ERR_QUEUE_FULL
;

491 
p_›
->
p_c⁄ãxt
 =Ö_context;

492 
p_›
->
p_c⁄fig
 =Ö_config;

493 
p_›
->
›_code
 = 
FS_OP_ERASE
;

494 
p_›
->
îa£
.
∑ge
 = ((
uöt32_t
)
p_∑ge_addr
 / 
FS_PAGE_SIZE
);

495 
p_›
->
îa£
.
∑ges_to_îa£
 = 
num_∑ges
;

497 
	`queue_°¨t
();

499  
FS_SUCCESS
;

500 
	}
}

503 
fs_ªt_t
 
	$fs_queued_›_cou¡_gë
(
uöt32_t
 * c⁄° 
p_›_cou¡
)

505 i‡(
p_›_cou¡
 =
NULL
)

507  
FS_ERR_NULL_ARG
;

510 *
p_›_cou¡
 = 
m_queue
.
cou¡
;

512  
FS_SUCCESS
;

513 
	}
}

516 
	$fs_sys_evít_h™dÀr
(
uöt32_t
 
sys_evt
)

518 
fs_›_t
 * c⁄° 
p_›
 = &
m_queue
.
›
[m_queue.
Ω
];

520 i‡(
m_Êags
 & 
FS_FLAG_PROCESSING
)

523 
sys_evt
)

525 
NRF_EVT_FLASH_OPERATION_SUCCESS
:

526 
	`⁄_›î©i⁄_suc˚ss
(
p_›
);

529 
NRF_EVT_FLASH_OPERATION_ERROR
:

530 
	`⁄_›î©i⁄_Áûuª
(
p_›
);

534 i‡((
m_Êags
 & 
FS_FLAG_FLASH_REQ_PENDING
))

538 
m_Êags
 &~
FS_FLAG_FLASH_REQ_PENDING
;

541 i‡(
m_queue
.
cou¡
 > 0)

543 
m_Êags
 |
FS_FLAG_PROCESSING
;

548 
	`queue_¥o˚ss
();

549 
	}
}

551 
boﬁ
 
	$fs_queue_is_fuŒ
()

553  (
m_queue
.
cou¡
 =
FS_QUEUE_SIZE
);

554 
	}
}

556 
boﬁ
 
	$fs_queue_is_em±y
()

558  (
m_queue
.
cou¡
 == 0);

559 
	}
}

	@D:\Private\Programing\MCU\Nordic\ble_app_template\nRF5_SDK_12.3.0_d7731ad\components\libraries\hardfault\hardfault_implementation.c

40 
	~"sdk_comm⁄.h
"

41 #i‡
NRF_MODULE_ENABLED
(
HARDFAULT_HANDLER
)

42 
	~"h¨dÁu….h
"

43 
	~"ƒf.h
"

44 
	~"compûî_ab°ø˘i⁄.h
"

45 
	~"≠p_utû_∂©f‹m.h
"

46 #ifde‡
SOFTDEVICE_PRESENT


47 
	~"ƒf_soc.h
"

49 
	#NRF_LOG_MODULE_NAME
 "HARDFAULT"

	)

50 
	~"ƒf_log.h
"

51 
	~"ƒf_log_˘æ.h
"

52 #i‡
deföed
(
DEBUG_NRF
)

59 vﬁ©ûê
H¨dFau…_°ack_t
 * 
	gH¨dFau…_p_°ack
;

63 
__WEAK
 
	$H¨dFau…_¥o˚ss
(
H¨dFau…_°ack_t
 * 
p_°ack
)

66 
	`NVIC_Sy°emRe£t
();

67 
	}
}

70 
	$H¨dFau…_c_h™dÀr
(
uöt32_t
 * 
p_°ack_addªss
)

72 
	`NRF_LOG_ERROR
("H¨dÁu… PC:%x\r\n", ((
H¨dFau…_°ack_t
 *)
p_°ack_addªss
)->
pc
);

73 
	`NRF_LOG_FINAL_FLUSH
();

74 #i‡
	`deföed
(
DEBUG_NRF
)

75 
H¨dFau…_p_°ack
 = (
H¨dFau…_°ack_t
 *)
p_°ack_addªss
;

76 ()
H¨dFau…_p_°ack
;

80 #i‡
__CORTEX_M
 == 0x04

82 i‡(
C‹eDebug
->
DHCSR
 & 
C‹eDebug_DHCSR_C_DEBUGEN_Msk
)

85 
NRF_BREAKPOINT
;

89 
	`H¨dFau…_¥o˚ss
((
H¨dFau…_°ack_t
 *)
p_°ack_addªss
);

90 
	}
}

	@D:\Private\Programing\MCU\Nordic\ble_app_template\nRF5_SDK_12.3.0_d7731ad\components\libraries\log\src\nrf_log_backend_serial.c

40 
	~"sdk_comm⁄.h
"

41 #i‡
NRF_MODULE_ENABLED
(
NRF_LOG
)

42 
	~"ƒf_log_backíd.h
"

43 
	~"ƒf_îr‹.h
"

44 
	~<°d¨g.h
>

45 
	~<°rög.h
>

46 
	~<°dio.h
>

47 
	~<˘y≥.h
>

49 #i‡
NRF_LOG_BACKEND_SERIAL_USES_RTT


50 
	~<SEGGER_RTT_C⁄f.h
>

51 
	~<SEGGER_RTT.h
>

54 #i‡
NRF_LOG_BACKEND_SERIAL_USES_UART


55 
	~"ƒf_drv_u¨t.h
"

58 #i‡
NRF_LOG_BACKEND_SERIAL_USES_UART


59 
	gm_u¨t_buf„r
[
NRF_LOG_BACKEND_MAX_STRING_LENGTH
];

60 
ƒf_drv_u¨t_t
 
	gm_u¨t
 = 
NRF_DRV_UART_INSTANCE
(
NRF_LOG_BACKEND_UART_INSTANCE
);

62 #i‡!
NRF_MODULE_ENABLED
(
UART
)

68 
	#HEXDUMP_BYTES_PER_LINE
 16

	)

69 
	#HEXDUMP_HEXBYTE_AREA
 3

70 
	#TIMESTAMP_STR
(
vÆ
Ë"[%0" 
	`NUM_TO_STR
(vÆË"d]"

	)

72 
	#RTT_RETRY_COUNTER
 10

73 

	)

74 
	#HEXDUMP_MAX_STR_LEN
 (
NRF_LOG_BACKEND_MAX_STRING_LENGTH
 - \

75 (
HEXDUMP_HEXBYTE_AREA
*
HEXDUMP_BYTES_PER_LINE
 +\

76 
NRF_LOG_TIMESTAMP_DIGITS
 + \

78 2)Ë

	)

80 
boﬁ
 
	gm_öôülized
 = 
Ál£
;

81 
boﬁ
 
	gm_blockög_mode
 = 
Ál£
;

82 c⁄° 
	gm_deÁu…_cﬁ‹
[] = "\x1B[0m";

84 #i‡(
NRF_LOG_BACKEND_SERIAL_USES_UART
)

85 vﬁ©ûê
boﬁ
 
	gm_rx_d⁄e
 = 
Ál£
;

88 #i‡(
NRF_LOG_BACKEND_SERIAL_USES_UART
)

89 
	$u¨t_evít_h™dÀr
(
ƒf_drv_u¨t_evít_t
 * 
p_evít
, * 
p_c⁄ãxt
)

92 i‡(
p_evít
->
ty≥
 =
NRF_DRV_UART_EVT_RX_DONE
)

94 
m_rx_d⁄e
 = 
åue
;

96 
	}
}

100 
ªt_code_t
 
	$ƒf_log_backíd_öô
(
boﬁ
 
blockög
)

103 i‡(
m_öôülized
 && (
blockög
 =
m_blockög_mode
))

105  
NRF_SUCCESS
;

107 #i‡(
NRF_LOG_BACKEND_SERIAL_USES_RTT
)

108 
	`SEGGER_RTT_Inô
();

111 #i‡(
NRF_LOG_BACKEND_SERIAL_USES_UART
)

112 
uöt32_t
 
ªt_code
;

113 
ƒf_drv_u¨t_c⁄fig_t
 
u¨t_c⁄fig
 = 
NRF_DRV_UART_DEFAULT_CONFIG
;

114 
u¨t_c⁄fig
.
hwfc
 =

115 (
ƒf_u¨t_hwfc_t
)
NRF_LOG_BACKEND_SERIAL_UART_FLOW_CONTROL
;

116 
u¨t_c⁄fig
.
p£…xd
 = 
NRF_LOG_BACKEND_SERIAL_UART_TX_PIN
;

117 
u¨t_c⁄fig
.
p£Ãxd
 = 
NRF_LOG_BACKEND_SERIAL_UART_RX_PIN
;

118 
u¨t_c⁄fig
.
p£Ãts
 = 
NRF_LOG_BACKEND_SERIAL_UART_RTS_PIN
;

119 
u¨t_c⁄fig
.
p£l˘s
 = 
NRF_LOG_BACKEND_SERIAL_UART_CTS_PIN
;

120 
u¨t_c⁄fig
.
baudøã
 =

121 (
ƒf_u¨t_baudøã_t
)
NRF_LOG_BACKEND_SERIAL_UART_BAUDRATE
;

122 
	`ƒf_drv_u¨t_unöô
(&
m_u¨t
);

123 
ªt_code
 = 
	`ƒf_drv_u¨t_öô
(&
m_u¨t
, &
u¨t_c⁄fig
,

124 
blockög
 ? 
NULL
 : 
u¨t_evít_h™dÀr
);

125 i‡(
ªt_code
 !
NRF_SUCCESS
)

127  
ªt_code
;

131 
m_öôülized
 = 
åue
;

132 
m_blockög_mode
 = 
blockög
;

133  
NRF_SUCCESS
;

134 
	}
}

137 
boﬁ
 
	$£rül_is_busy
()

139 
boﬁ
 
ªs
 = 
Ál£
;

141 #i‡(
NRF_LOG_BACKEND_SERIAL_USES_UART
)

142 
ªs
 = 
	`ƒf_drv_u¨t_tx_ö_¥ogªss
(&
m_u¨t
);

145 #i‡(
NRF_LOG_BACKEND_SERIAL_USES_RTT
)

149  
ªs
;

150 
	}
}

153 
boﬁ
 
	$£rül_tx
(
uöt8_t
 * 
p_buf
, 
uöt32_t
 
Àn
)

155 
boﬁ
 
ªt
 = 
åue
;

157 #i‡
NRF_LOG_BACKEND_SERIAL_USES_UART


158 
	`mem˝y
(
m_u¨t_buf„r
, 
p_buf
, 
Àn
);

159 
uöt32_t
 
ªt_code
 = 
	`ƒf_drv_u¨t_tx
(&
m_u¨t
, (
uöt8_t
 *)
m_u¨t_buf„r
, 
Àn
);

160 i‡(
ªt_code
 !
NRF_SUCCESS
)

162 
ªt
 = 
Ál£
;

166 #i‡
NRF_LOG_BACKEND_SERIAL_USES_RTT


167 
uöt32_t
 
idx
 = 0;

168 
uöt32_t
 
Àngth
 = 
Àn
;

169 
uöt32_t
 
¥o˚s£d
;

170 
uöt32_t
 
w©chdog_cou¡î
 = 
RTT_RETRY_COUNTER
;

173 
¥o˚s£d
 = 
	`SEGGER_RTT_WrôeNoLock
(0, &
p_buf
[
idx
], 
Àngth
);

174 
idx
 +
¥o˚s£d
;

175 
Àngth
 -
¥o˚s£d
;

176 i‡(
¥o˚s£d
 == 0)

179 
w©chdog_cou¡î
--;

180 i‡(
w©chdog_cou¡î
 == 0)

185 } 
Àngth
);

187  
ªt
;

188 
	}
}

191 
uöt8_t
 
	$£rül_gë_byã
()

193 
uöt8_t
 
d©a
;

194 #i‡
NRF_LOG_BACKEND_SERIAL_USES_UART


195 i‡(
m_blockög_mode
)

197 ()
	`ƒf_drv_u¨t_rx
(&
m_u¨t
, &
d©a
, 1);

201 
m_rx_d⁄e
 = 
Ál£
;

202 ()
	`ƒf_drv_u¨t_rx
(&
m_u¨t
, &
d©a
, 1);

203 !
m_rx_d⁄e
);

205 #ñi‡
NRF_LOG_BACKEND_SERIAL_USES_RTT


206 
d©a
 = (
uöt8_t
)
	`SEGGER_RTT_WaôKey
();

208  
d©a
;

209 
	}
}

212 
boﬁ
 
	$buf_Àn_upd©e
(
uöt32_t
 * 
p_buf_Àn
, 
öt32_t
 
√w_Àn
)

214 
boﬁ
 
ªt
;

215 i‡(
√w_Àn
 < 0)

217 
ªt
 = 
Ál£
;

221 *
p_buf_Àn
 +(
uöt32_t
)
√w_Àn
;

222 
ªt
 = 
åue
;

224  
ªt
;

225 
	}
}

228 
boﬁ
 
	$time°amp_¥o˚ss
(c⁄° 
uöt32_t
 * c⁄° 
p_time°amp
, * 
p_°r
, uöt32_à* 
p_Àn
)

230 
öt32_t
 
Àn
 = 0;

231 
boﬁ
 
ªt
 = 
åue
;

232 i‡(
p_time°amp
)

234 #i‡
NRF_LOG_USES_COLORS


235 
Àn
 = (
m_deÁu…_cﬁ‹
) - 1;

236 
	`mem˝y
(
p_°r
, 
m_deÁu…_cﬁ‹
, 
Àn
);

237 *
p_Àn
 +
Àn
;

239 
Àn
 = 
	`¢¥ötf
(&
p_°r
[Àn],
NRF_LOG_BACKEND_MAX_STRING_LENGTH
, 
	`TIMESTAMP_STR
(
NRF_LOG_TIMESTAMP_DIGITS
), ()*
p_time°amp
);

240 
ªt
 = 
	`buf_Àn_upd©e
(
p_Àn
, 
Àn
);

244 *
p_Àn
 = 0;

246  
ªt
;

247 
	}
}

250 
boﬁ
 
	$ƒf_log_backíd_£rül_°d_h™dÀr
(

251 
uöt8_t
 
£vîôy_Àvñ
,

252 c⁄° 
uöt32_t
 * c⁄° 
p_time°amp
,

253 c⁄° * c⁄° 
p_°r
,

254 
uöt32_t
 * 
p_¨gs
,

255 
uöt32_t
 
«rgs
)

257 
°r
[
NRF_LOG_BACKEND_MAX_STRING_LENGTH
];

258 
öt32_t
 
tmp_°r_Àn
 = 0;

259 
uöt32_t
 
buf„r_Àn
 = 0;

260 
boﬁ
 
°©us
 = 
åue
;

262 i‡(
	`£rül_is_busy
())

264  
Ál£
;

267 i‡(!
	`time°amp_¥o˚ss
(
p_time°amp
, &
°r
[
buf„r_Àn
], &buffer_len))

269  
Ál£
;

272 
«rgs
)

276 
tmp_°r_Àn
 = 
	`°æí
(
p_°r
);

277 i‡((
tmp_°r_Àn
 + 
buf„r_Àn
Ë< 
NRF_LOG_BACKEND_MAX_STRING_LENGTH
)

279 
	`mem˝y
(&
°r
[
buf„r_Àn
], 
p_°r
, 
tmp_°r_Àn
);

285 
tmp_°r_Àn
 = 
	`¢¥ötf
(&
°r
[
buf„r_Àn
], 
NRF_LOG_BACKEND_MAX_STRING_LENGTH
-buf„r_Àn, 
p_°r
, 
p_¨gs
[0]);

290 
tmp_°r_Àn
 = 
	`¢¥ötf
(&
°r
[
buf„r_Àn
], 
NRF_LOG_BACKEND_MAX_STRING_LENGTH
-buf„r_Àn, 
p_°r
, 
p_¨gs
[0],Ö_args[1]);

294 
tmp_°r_Àn
 = 
	`¢¥ötf
(&
°r
[
buf„r_Àn
], 
NRF_LOG_BACKEND_MAX_STRING_LENGTH
-buf„r_Àn, 
p_°r
, 
p_¨gs
[0],Ö_args[1],Ö_args[2]);

298 
tmp_°r_Àn
 =

299 
	`¢¥ötf
(&
°r
[
buf„r_Àn
], 
NRF_LOG_BACKEND_MAX_STRING_LENGTH
-buf„r_Àn, 
p_°r
, 
p_¨gs
[0],Ö_args[1],Ö_args[2],Ö_args[3]);

303 
tmp_°r_Àn
 =

304 
	`¢¥ötf
(&
°r
[
buf„r_Àn
],

305 
NRF_LOG_BACKEND_MAX_STRING_LENGTH
-
buf„r_Àn
,

306 
p_°r
,

307 
p_¨gs
[0],

308 
p_¨gs
[1],

309 
p_¨gs
[2],

310 
p_¨gs
[3],

311 
p_¨gs
[4]);

315 
tmp_°r_Àn
 =

316 
	`¢¥ötf
(&
°r
[
buf„r_Àn
],

317 
NRF_LOG_BACKEND_MAX_STRING_LENGTH
-
buf„r_Àn
,

318 
p_°r
,

319 
p_¨gs
[0],

320 
p_¨gs
[1],

321 
p_¨gs
[2],

322 
p_¨gs
[3],

323 
p_¨gs
[4],

324 
p_¨gs
[5]);

330 
°©us
 = 
	`buf_Àn_upd©e
(&
buf„r_Àn
, 
tmp_°r_Àn
);

331 
uöt32_t
 
fuŒ_buff_Àn
 = 
NRF_LOG_USES_COLORS
 ?

332 
buf„r_Àn
 + (
m_deÁu…_cﬁ‹
)-1 : buffer_len;

333 i‡(
°©us
 && (
fuŒ_buff_Àn
 <
NRF_LOG_BACKEND_MAX_STRING_LENGTH
))

335 i‡(
NRF_LOG_USES_COLORS
)

337 
	`mem˝y
(&
°r
[
buf„r_Àn
], 
m_deÁu…_cﬁ‹
, (m_default_color)-1);

338 
buf„r_Àn
 = 
fuŒ_buff_Àn
;

340  
	`£rül_tx
((
uöt8_t
 *)
°r
, 
buf„r_Àn
);

345  
Ál£
;

347 
	}
}

350 
	$byã2hex
(c⁄° 
uöt8_t
 
c
, * 
p_out
)

352 
uöt8_t
 
nibbÀ
;

353 
uöt32_t
 
i
 = 2;

355 
i
-- != 0)

357 
nibbÀ
 = (
c
 >> (4 * 
i
)) & 0x0F;

358 
p_out
[1 - 
i
] = (
nibbÀ
 > 9) ? ('A' +Çibble - 10) : ('0' +Çibble);

360 
	}
}

363 
uöt32_t
 
	$ƒf_log_backíd_£rül_hexdump_h™dÀr
(

364 
uöt8_t
 
£vîôy_Àvñ
,

365 c⁄° 
uöt32_t
 * c⁄° 
p_time°amp
,

366 c⁄° * c⁄° 
p_°r
,

367 
uöt32_t
 
off£t
,

368 c⁄° 
uöt8_t
 * c⁄° 
p_buf0
,

369 
uöt32_t
 
buf0_Àngth
,

370 c⁄° 
uöt8_t
 * c⁄° 
p_buf1
,

371 
uöt32_t
 
buf1_Àngth
)

373 
°r
[
NRF_LOG_BACKEND_MAX_STRING_LENGTH
];

374 
uöt32_t
 
¶í
;

375 * 
p_hex_∑π
;

376 * 
p_ch¨_∑π
;

377 
uöt8_t
 
c
;

378 
uöt32_t
 
byã_ö_löe
;

379 
uöt32_t
 
buf„r_Àn
 = 0;

380 
uöt32_t
 
byã_˙t
 = 
off£t
;

381 
uöt32_t
 
Àngth
 = 
buf0_Àngth
 + 
buf1_Àngth
;

382 
uöt32_t
 
time°amp_Àn
 = 
p_time°amp
 ?

383 
NRF_LOG_TIMESTAMP_DIGITS
+2 : 0;

385 i‡(
	`£rül_is_busy
())

387  
off£t
;

391 i‡(
off£t
 == 0)

393 i‡(!
	`time°amp_¥o˚ss
(
p_time°amp
, &
°r
[
buf„r_Àn
], &buffer_len))

395  
off£t
;

397 
¶í
 = 
	`°æí
(
p_°r
);

399 
¶í
 = (¶í > 
HEXDUMP_MAX_STR_LEN
) ? HEXDUMP_MAX_STR_LEN : slen;

400 
	`mem˝y
(&
°r
[
buf„r_Àn
], 
p_°r
, 
¶í
);

401 
buf„r_Àn
 +
¶í
;

407 
uöt32_t
 
i
;

408 
uöt32_t
 
hex_∑π_off£t
 = 
buf„r_Àn
;

409 
uöt32_t
 
ch¨_∑π_off£t
 = 
hex_∑π_off£t
 +

410 (
HEXDUMP_BYTES_PER_LINE
 * 
HEXDUMP_HEXBYTE_AREA
 + 1) +

411 
time°amp_Àn
;

413 
p_hex_∑π
 = &
°r
[
hex_∑π_off£t
];

414 
p_ch¨_∑π
 = &
°r
[
ch¨_∑π_off£t
];

417 
i
 = 0; i < 
time°amp_Àn
; i++)

419 *
p_hex_∑π
 = ' ';

420 ++
p_hex_∑π
;

423 
byã_ö_löe
 = 0; byã_ö_löê< 
HEXDUMP_BYTES_PER_LINE
; byte_in_line++)

425 i‡(
byã_˙t
 >
Àngth
)

428 *
p_hex_∑π
++ = ' ';

429 *
p_hex_∑π
++ = ' ';

430 *
p_hex_∑π
++ = ' ';

431 *
p_ch¨_∑π
++ = ' ';

435 i‡(
byã_˙t
 < 
buf0_Àngth
)

437 
c
 = 
p_buf0
[
byã_˙t
];

441 
c
 = 
p_buf1
[
byã_˙t
 - 
buf0_Àngth
];

443 
	`byã2hex
(
c
, 
p_hex_∑π
);

444 
p_hex_∑π
 += 2;

445 *
p_hex_∑π
++ = ' ';

446 *
p_ch¨_∑π
++ = 
	`i•röt
(
c
) ? c : '.';

447 
byã_˙t
++;

450 *
p_ch¨_∑π
++ = '\r';

451 *
p_ch¨_∑π
++ = '\n';

452 *
p_hex_∑π
++ = ' ';

453 
buf„r_Àn
 +
time°amp_Àn
 +

454 (
HEXDUMP_BYTES_PER_LINE
 * 
HEXDUMP_HEXBYTE_AREA
 + 1) +

455 
HEXDUMP_BYTES_PER_LINE
 +

457 i‡(
NRF_LOG_USES_COLORS
)

459 
	`mem˝y
(&
°r
[
buf„r_Àn
], 
m_deÁu…_cﬁ‹
, (m_default_color)-1);

460 
buf„r_Àn
 +(
m_deÁu…_cﬁ‹
)-1;

463 i‡(!
	`£rül_tx
((
uöt8_t
 *)
°r
, 
buf„r_Àn
))

465  
byã_˙t
;

468 i‡(
	`£rül_is_busy
())

470  
byã_˙t
;

472 
buf„r_Àn
 = 0;

474 
byã_˙t
 < 
Àngth
);

475  
byã_˙t
;

476 
	}
}

479 
ƒf_log_°d_h™dÀr_t
 
	$ƒf_log_backíd_°d_h™dÀr_gë
()

481  
ƒf_log_backíd_£rül_°d_h™dÀr
;

482 
	}
}

485 
ƒf_log_hexdump_h™dÀr_t
 
	$ƒf_log_backíd_hexdump_h™dÀr_gë
()

487  
ƒf_log_backíd_£rül_hexdump_h™dÀr
;

488 
	}
}

491 
uöt8_t
 
	$ƒf_log_backíd_gëch¨
()

493  
	`£rül_gë_byã
();

494 
	}
}

	@D:\Private\Programing\MCU\Nordic\ble_app_template\nRF5_SDK_12.3.0_d7731ad\components\libraries\log\src\nrf_log_frontend.c

40 
	~"sdk_comm⁄.h
"

41 #i‡
NRF_MODULE_ENABLED
(
NRF_LOG
)

42 
	~"≠p_utû.h
"

43 
	~"≠p_utû_∂©f‹m.h
"

44 
	~"ƒf_log.h
"

45 
	~"ƒf_log_öã∫Æ.h
"

46 
	~"ƒf_log_backíd.h
"

47 
	~"ƒf_log_˘æ.h
"

48 
	~<°rög.h
>

50 #i‡
NRF_LOG_DEFERRED


51 
STATIC_ASSERT
((
NRF_LOG_DEFERRED_BUFSIZE
 =0Ë|| 
IS_POWER_OF_TWO
(NRF_LOG_DEFERRED_BUFSIZE));

53 
	#NRF_LOG_DEFERRED_BUFSIZE
 1

	)

66 
uöt32_t
 
	mwr_idx
;

67 
uöt32_t
 
	mrd_idx
;

68 
uöt32_t
 
	mmask
;

69 
uöt32_t
 
	mbuf„r
[
NRF_LOG_DEFERRED_BUFSIZE
];

70 
ƒf_log_time°amp_func_t
 
	mtime°amp_func
;

71 
ƒf_log_°d_h™dÀr_t
 
	m°d_h™dÀr
;

72 
ƒf_log_hexdump_h™dÀr_t
 
	mhexdump_h™dÀr
;

73 } 
	tlog_d©a_t
;

75 
log_d©a_t
 
	gm_log_d©a
;

76 #i‡(
NRF_LOG_DEFERRED
 == 1)

77 c⁄° * 
	gm_ovîÊow_öfo
 = 
NRF_LOG_ERROR_COLOR_CODE
 "Overflow\r\n";

137 
	#HEADER_SIZE
 ((
NRF_LOG_USES_TIMESTAMP
Ë? 2 : 1)

	)

139 
	#STD_ADDR_MASK
 ((
uöt32_t
)(1U << 22Ë- 1U)

	)

140 
	#HEADER_TYPE_STD
 1U

	)

141 
	#HEADER_TYPE_HEXDUMP
 2U

	)

142 
	#HEADER_TYPE_PUSHED
 0U

	)

146 
uöt32_t
 
	mty≥
 : 2;

147 
uöt32_t
 
	møw
 : 1;

148 
uöt32_t
 
	md©a
 : 29;

149 } 
	tƒf_log_gíîic_hódî_t
;

153 
uöt32_t
 
	mty≥
 : 2;

154 
uöt32_t
 
	møw
 : 1;

155 
uöt32_t
 
	m£vîôy
 : 3;

156 
uöt32_t
 
	m«rgs
 : 4;

157 
uöt32_t
 
	maddr
 : 22;

158 } 
	tƒf_log_°d_hódî_t
;

162 
uöt32_t
 
	mty≥
 : 2;

163 
uöt32_t
 
	møw
 : 1;

164 
uöt32_t
 
	m£vîôy
 : 3;

165 
uöt32_t
 
	moff£t
 : 10;

166 
uöt32_t
 
	mª£rved
 : 6;

167 
uöt32_t
 
	mÀn
 : 10;

168 } 
	tƒf_log_hexdump_hódî_t
;

172 
uöt32_t
 
	mty≥
 : 2;

173 
uöt32_t
 
	mª£rved0
 : 4;

174 
uöt32_t
 
	moff£t
 : 10;

175 
uöt32_t
 
	mª£rved1
 : 6;

176 
uöt32_t
 
	mÀn
 : 10;

177 } 
	tƒf_log_pushed_hódî_t
;

181 
ƒf_log_gíîic_hódî_t
 
	mgíîic
;

182 
ƒf_log_°d_hódî_t
 
	m°d
;

183 
ƒf_log_hexdump_hódî_t
 
	mhexdump
;

184 
ƒf_log_pushed_hódî_t
 
	mpushed
;

185 
uöt32_t
 
	møw
;

186 } 
	tƒf_log_hódî_t
;

189 #i‡
deföed
 ( 
__ICCARM__
 )

190 
	#STD_HEADER_DEF
(
NAME
, 
P_STR
, 
SEVERITY
, 
NARGS
) \

191 
ƒf_log_hódî_t
 
NAME
 = { \

192 .
°d
 = { \

193 .
ty≥
 = 
HEADER_TYPE_STD
, \

196 
NAME
.
°d
.
ty≥
 = 
HEADER_TYPE_STD
; \

197 
NAME
.
°d
.
øw
 = ((
SEVERITY
Ë& 
NRF_LOG_RAW
); \

198 
NAME
.
°d
.
£vîôy
 = (
SEVERITY
Ë& 
NRF_LOG_LEVEL_MASK
; \

199 
NAME
.
°d
.
«rgs
 = (
NARGS
); \

200 
NAME
.
°d
.
addr
 = ((
uöt32_t
)(
P_STR
Ë& 
STD_ADDR_MASK
)

	)

202 
	#STD_HEADER_DEF
(
NAME
, 
P_STR
, 
SEVERITY
, 
NARGS
) \

203 
ƒf_log_hódî_t
 
NAME
 = { \

204 .
°d
 = { \

205 .
ty≥
 = 
HEADER_TYPE_STD
, \

206 .
øw
 = ((
SEVERITY
Ë& 
NRF_LOG_RAW
), \

207 .
£vîôy
 = (
SEVERITY
Ë& 
NRF_LOG_LEVEL_MASK
, \

208 .
«rgs
 = (
NARGS
), \

209 .
addr
 = ((
uöt32_t
)(
P_STR
Ë& 
STD_ADDR_MASK
)\

211 }

	)

214 #i‡
deföed
 ( 
__ICCARM__
 )

215 
	#HEXDUMP_HEADER_DEF
(
NAME
, 
SEVERITY
, 
LENGTH
) \

216 
ƒf_log_hódî_t
 
NAME
 = { \

217 .
hexdump
 = { \

218 .
ty≥
 = 
HEADER_TYPE_HEXDUMP
, \

219 .
off£t
 = 0, \

222 
NAME
.
hexdump
.
øw
 = ((
SEVERITY
Ë& 
NRF_LOG_RAW
); \

223 
NAME
.
hexdump
.
£vîôy
 = (
SEVERITY
Ë& 
NRF_LOG_LEVEL_MASK
;\

224 
NAME
.
hexdump
.
Àn
 = (
LENGTH
)

	)

227 
	#HEXDUMP_HEADER_DEF
(
NAME
, 
SEVERITY
, 
LENGTH
) \

228 
ƒf_log_hódî_t
 
NAME
 = { \

229 .
hexdump
 = { \

230 .
ty≥
 = 
HEADER_TYPE_HEXDUMP
, \

231 .
øw
 = ((
SEVERITY
Ë& 
NRF_LOG_RAW
), \

232 .
£vîôy
 = (
SEVERITY
Ë& 
NRF_LOG_LEVEL_MASK
, \

233 .
off£t
 = 0, \

234 .
Àn
 = 
LENGTH
, \

236 }

	)

239 #i‡
deföed
 ( 
__ICCARM__
 )

240 
	#PUSHED_HEADER_DEF
(
NAME
, 
OFFSET
, 
LENGTH
) \

241 
ƒf_log_hódî_t
 
NAME
 = { \

242 .
pushed
 = { \

243 .
ty≥
 = 
HEADER_TYPE_PUSHED
, \

246 
NAME
.
pushed
.
off£t
 = (
OFFSET
); \

247 
NAME
.
pushed
.
Àn
 = (
LENGTH
)

	)

250 
	#PUSHED_HEADER_DEF
(
NAME
, 
OFFSET
, 
LENGTH
) \

251 
ƒf_log_hódî_t
 
NAME
 = { \

252 .
pushed
 = { \

253 .
ty≥
 = 
HEADER_TYPE_PUSHED
, \

254 .
off£t
 = (
OFFSET
), \

255 .
Àn
 = (
LENGTH
), \

257 }

	)

261 
ªt_code_t
 
	$ƒf_log_öô
(
ƒf_log_time°amp_func_t
 
time°amp_func
)

263 i‡(
NRF_LOG_USES_TIMESTAMP
 && (
time°amp_func
 =
NULL
))

265  
NRF_ERROR_INVALID_PARAM
;

268 
ªt_code_t
 
îr_code
 = 
	`ƒf_log_backíd_öô
(
NRF_LOG_DEFERRED
 ? 
Ál£
 : 
åue
);

270 i‡(
îr_code
 =
NRF_SUCCESS
)

272 
	`ƒf_log_‰⁄ãnd_öô
(
	`ƒf_log_backíd_°d_h™dÀr_gë
(),

273 
	`ƒf_log_backíd_hexdump_h™dÀr_gë
(),

274 
time°amp_func
);

276  
îr_code
;

277 
	}
}

280 
ªt_code_t
 
	$ƒf_log_blockög_backíd_£t
()

283  
	`ƒf_log_backíd_öô
(
åue
);

284 
	}
}

287 
	$ƒf_log_‰⁄ãnd_öô
(
ƒf_log_°d_h™dÀr_t
 
°d_h™dÀr
,

288 
ƒf_log_hexdump_h™dÀr_t
 
hexdump_h™dÀr
,

289 
ƒf_log_time°amp_func_t
 
time°amp_func
)

291 #i‡
NRF_LOG_DEFERRED


292 
m_log_d©a
.
mask
 = 
NRF_LOG_DEFERRED_BUFSIZE
 - 1;

293 
m_log_d©a
.
wr_idx
 = 0;

294 
m_log_d©a
.
rd_idx
 = 0;

296 #i‡
NRF_LOG_USES_TIMESTAMP


297 
m_log_d©a
.
time°amp_func
 =Åimestamp_func;

299 
	`ƒf_log_h™dÀrs_£t
(
°d_h™dÀr
, 
hexdump_h™dÀr
);

300 
	}
}

303 
	$ƒf_log_h™dÀrs_£t
(
ƒf_log_°d_h™dÀr_t
 
°d_h™dÀr
,

304 
ƒf_log_hexdump_h™dÀr_t
 
hexdump_h™dÀr
)

306 
m_log_d©a
.
°d_h™dÀr
 = std_handler;

307 
m_log_d©a
.
hexdump_h™dÀr
 = hexdump_handler;

308 
	}
}

310 #i‡(
NRF_LOG_DEFERRED
 == 1)

322 
ölöe
 
boﬁ
 
	$buf_¥óŒoc
(
uöt32_t
 
«rgs
, uöt32_à* 
p_wr_idx
)

324 
«rgs
 +
HEADER_SIZE
;

325 
uöt32_t
 
ovÊw_èg_size
 = 
HEADER_SIZE
;

326 
boﬁ
 
ªt
 = 
åue
;

327 
	`CRITICAL_REGION_ENTER
();

328 *
p_wr_idx
 = 
m_log_d©a
.
wr_idx
;

329 
uöt32_t
 
avaûabÀ_w‹ds
 = (
m_log_d©a
.
mask
 + 1Ë- (m_log_d©a.
wr_idx
 - m_log_d©a.
rd_idx
);

330 
uöt32_t
 
ªquúed_w‹ds
 = 
«rgs
 + 
ovÊw_èg_size
;

331 i‡(
ªquúed_w‹ds
 > 
avaûabÀ_w‹ds
)

333 i‡(
avaûabÀ_w‹ds
 >
HEADER_SIZE
)

336 
	`STD_HEADER_DEF
(
hódî
, 
m_ovîÊow_öfo
, 
NRF_LOG_LEVEL_INTERNAL
, 0);

337 
m_log_d©a
.
buf„r
[m_log_d©a.
wr_idx
++ & m_log_d©a.
mask
] =

338 
hódî
.
øw
;

339 #i‡
NRF_LOG_USES_TIMESTAMP


340 
m_log_d©a
.
buf„r
[m_log_d©a.
wr_idx
++ & m_log_d©a.
mask
] =

341 
m_log_d©a
.
	`time°amp_func
();

345 
ªt
 = 
Ál£
;

349 
m_log_d©a
.
wr_idx
 +
«rgs
;

351 
	`CRITICAL_REGION_EXIT
();

352  
ªt
;

353 
	}
}

370 
ölöe
 
uöt32_t
 * 
	$c⁄t_buf_¥óŒoc
(
uöt32_t
 
Àn32
,

371 
uöt32_t
 * 
p_off£t
,

372 
uöt32_t
 * 
p_wr_idx
)

374 
uöt32_t
 * 
p_buf
 = 
NULL
;

376 
Àn32
++;

378 
	`CRITICAL_REGION_ENTER
();

379 *
p_wr_idx
 = 
m_log_d©a
.
wr_idx
;

380 
uöt32_t
 
avaûabÀ_w‹ds
 = (
m_log_d©a
.
mask
 + 1) -

381 (
m_log_d©a
.
wr_idx
 & m_log_d©a.
mask
);

382 i‡(
Àn32
 <
avaûabÀ_w‹ds
)

385 
p_buf
 = &
m_log_d©a
.
buf„r
[(m_log_d©a.
wr_idx
 + 1Ë& m_log_d©a.
mask
];

386 
m_log_d©a
.
wr_idx
 +
Àn32
;

387 *
p_off£t
 = 0;

389 i‡(
Àn32
 < (
m_log_d©a
.
rd_idx
 & m_log_d©a.
mask
))

392 
m_log_d©a
.
wr_idx
 +(
Àn32
 + 
avaûabÀ_w‹ds
 - 1);

393 *
p_off£t
 = 
avaûabÀ_w‹ds
 - 1;

394 
p_buf
 = 
m_log_d©a
.
buf„r
;

396 
avaûabÀ_w‹ds
 = (
m_log_d©a
.
mask
 + 1Ë- (m_log_d©a.
wr_idx
 - m_log_d©a.
rd_idx
);

398 i‡(
avaûabÀ_w‹ds
 < 
HEADER_SIZE
)

400 
p_buf
 = 
NULL
;

402 
	`CRITICAL_REGION_EXIT
();

404  
p_buf
;

405 
	}
}

409 #i‡(
NRF_LOG_DEFERRED
 == 0)

410 
ölöe
 
	$ƒf_log_dúe˘_„ed
(
uöt8_t
 
ty≥
,

411 c⁄° * c⁄° 
p_°r
,

412 
uöt32_t
 * 
p_¨gs
,

413 
uöt32_t
 
«rgs
)

415 
uöt32_t
 
time°amp
 = 0;

416 
uöt32_t
 * 
p_time°amp
 = 
NRF_LOG_USES_TIMESTAMP
 ? &
time°amp
 : 
NULL
;

418 #i‡
NRF_LOG_USES_TIMESTAMP


419 
time°amp
 = 
m_log_d©a
.
	`time°amp_func
();

421 
	`UNUSED_VARIABLE
(
time°amp
);

424 
UNUSED_VARIABLE


425 (
m_log_d©a
.
	`°d_h™dÀr
(
ty≥
, 
p_time°amp
, (*)
p_°r
, 
p_¨gs
, 
«rgs
));

427 
	}
}

431 
uöt32_t
 
	$ƒf_log_push
(* c⁄° 
p_°r
)

433 #i‡(
NRF_LOG_DEFERRED
 == 0)

434  (
uöt32_t
)
p_°r
;

436 
uöt32_t
 
mask
 = 
m_log_d©a
.mask;

437 
uöt32_t
 
¶í
 = 
	`°æí
(
p_°r
) + 1;

438 
uöt32_t
 
buÊí
 = 
	`CEIL_DIV
(
¶í
, 4);

439 
uöt32_t
 
off£t
 = 0;

440 
uöt32_t
 
wr_idx
;

441 * 
p_d°_°r
 = (*)
	`c⁄t_buf_¥óŒoc
(
buÊí
, &
off£t
, &
wr_idx
);

442 i‡(
p_d°_°r
)

444 
	`PUSHED_HEADER_DEF
(
hódî
, 
off£t
, 
buÊí
);

445 
m_log_d©a
.
buf„r
[
wr_idx
++ & 
mask
] = 
hódî
.
øw
;

446 
	`mem˝y
(
p_d°_°r
, 
p_°r
, 
¶í
);

448  (
uöt32_t
)
p_d°_°r
;

450 
	}
}

453 
	$ƒf_log_‰⁄ãnd_°d_0
(
uöt8_t
 
£vîôy
, c⁄° * c⁄° 
p_°r
)

455 #i‡(
NRF_LOG_DEFERRED
 == 0)

456 
	`ƒf_log_dúe˘_„ed
(
£vîôy
, 
p_°r
, 
NULL
, 0);

458 
uöt32_t
 
«rgs
 = 0;

459 
uöt32_t
 
mask
 = 
m_log_d©a
.mask;

460 
uöt32_t
 
wr_idx
;

461 i‡(
	`buf_¥óŒoc
(
«rgs
, &
wr_idx
))

464 
	`STD_HEADER_DEF
(
hódî
, 
p_°r
, 
£vîôy
, 
«rgs
);

465 
m_log_d©a
.
buf„r
[
wr_idx
++ & 
mask
] = 
hódî
.
øw
;

466 #i‡
NRF_LOG_USES_TIMESTAMP


467 
m_log_d©a
.
buf„r
[
wr_idx
++ & 
mask
] = m_log_d©a.
	`time°amp_func
();

471 
	}
}

474 
	$ƒf_log_‰⁄ãnd_°d_1
(
uöt8_t
 
£vîôy
,

475 c⁄° * c⁄° 
p_°r
,

476 
uöt32_t
 
vÆ0
)

478 #i‡(
NRF_LOG_DEFERRED
 == 0)

479 
uöt32_t
 
¨gs
[] = {
vÆ0
};

480 
	`ƒf_log_dúe˘_„ed
(
£vîôy
, 
p_°r
, 
¨gs
, 
	`ARRAY_SIZE
(args));

482 
uöt32_t
 
«rgs
 = 1;

483 
uöt32_t
 
mask
 = 
m_log_d©a
.mask;

484 
uöt32_t
 
wr_idx
;

485 i‡(
	`buf_¥óŒoc
(
«rgs
, &
wr_idx
))

488 
	`STD_HEADER_DEF
(
hódî
, 
p_°r
, 
£vîôy
, 
«rgs
);

489 
m_log_d©a
.
buf„r
[
wr_idx
++ & 
mask
] = 
hódî
.
øw
;

490 #i‡
NRF_LOG_USES_TIMESTAMP


491 
m_log_d©a
.
buf„r
[
wr_idx
++ & 
mask
] = m_log_d©a.
	`time°amp_func
();

493 
m_log_d©a
.
buf„r
[
wr_idx
 & 
mask
] = 
vÆ0
;

496 
	}
}

499 
	$ƒf_log_‰⁄ãnd_°d_2
(
uöt8_t
 
£vîôy
,

500 c⁄° * c⁄° 
p_°r
,

501 
uöt32_t
 
vÆ0
,

502 
uöt32_t
 
vÆ1
)

504 #i‡(
NRF_LOG_DEFERRED
 == 0)

505 
uöt32_t
 
¨gs
[] = {
vÆ0
, 
vÆ1
};

506 
	`ƒf_log_dúe˘_„ed
(
£vîôy
, 
p_°r
, 
¨gs
, 
	`ARRAY_SIZE
(args));

508 
uöt32_t
 
«rgs
 = 2;

509 
uöt32_t
 
mask
 = 
m_log_d©a
.mask;

510 
uöt32_t
 
wr_idx
;

511 i‡(
	`buf_¥óŒoc
(
«rgs
, &
wr_idx
))

514 
	`STD_HEADER_DEF
(
hódî
, 
p_°r
, 
£vîôy
, 
«rgs
);

515 
m_log_d©a
.
buf„r
[
wr_idx
++ & 
mask
] = 
hódî
.
øw
;

516 #i‡
NRF_LOG_USES_TIMESTAMP


517 
m_log_d©a
.
buf„r
[
wr_idx
++ & 
mask
] = m_log_d©a.
	`time°amp_func
();

519 
m_log_d©a
.
buf„r
[
wr_idx
++ & 
mask
] = 
vÆ0
;

520 
m_log_d©a
.
buf„r
[
wr_idx
 & 
mask
] = 
vÆ1
;

523 
	}
}

526 
	$ƒf_log_‰⁄ãnd_°d_3
(
uöt8_t
 
£vîôy
,

527 c⁄° * c⁄° 
p_°r
,

528 
uöt32_t
 
vÆ0
,

529 
uöt32_t
 
vÆ1
,

530 
uöt32_t
 
vÆ2
)

532 #i‡(
NRF_LOG_DEFERRED
 == 0)

533 
uöt32_t
 
¨gs
[] = {
vÆ0
, 
vÆ1
, 
vÆ2
};

534 
	`ƒf_log_dúe˘_„ed
(
£vîôy
, 
p_°r
, 
¨gs
, 
	`ARRAY_SIZE
(args));

536 
uöt32_t
 
«rgs
 = 3;

537 
uöt32_t
 
mask
 = 
m_log_d©a
.mask;

538 
uöt32_t
 
wr_idx
;

539 i‡(
	`buf_¥óŒoc
(
«rgs
, &
wr_idx
))

542 
	`STD_HEADER_DEF
(
hódî
, 
p_°r
, 
£vîôy
, 
«rgs
);

543 
m_log_d©a
.
buf„r
[
wr_idx
++ & 
mask
] = 
hódî
.
øw
;

544 #i‡
NRF_LOG_USES_TIMESTAMP


545 
m_log_d©a
.
buf„r
[
wr_idx
++ & 
mask
] = m_log_d©a.
	`time°amp_func
();

547 
m_log_d©a
.
buf„r
[
wr_idx
++ & 
mask
] = 
vÆ0
;

548 
m_log_d©a
.
buf„r
[
wr_idx
++ & 
mask
] = 
vÆ1
;

549 
m_log_d©a
.
buf„r
[
wr_idx
 & 
mask
] = 
vÆ2
;

552 
	}
}

555 
	$ƒf_log_‰⁄ãnd_°d_4
(
uöt8_t
 
£vîôy
,

556 c⁄° * c⁄° 
p_°r
,

557 
uöt32_t
 
vÆ0
,

558 
uöt32_t
 
vÆ1
,

559 
uöt32_t
 
vÆ2
,

560 
uöt32_t
 
vÆ3
)

562 #i‡(
NRF_LOG_DEFERRED
 == 0)

563 
uöt32_t
 
¨gs
[] = {
vÆ0
, 
vÆ1
, 
vÆ2
, 
vÆ3
};

564 
	`ƒf_log_dúe˘_„ed
(
£vîôy
, 
p_°r
, 
¨gs
, 
	`ARRAY_SIZE
(args));

566 
uöt32_t
 
«rgs
 = 4;

567 
uöt32_t
 
mask
 = 
m_log_d©a
.mask;

568 
uöt32_t
 
wr_idx
;

569 i‡(
	`buf_¥óŒoc
(
«rgs
, &
wr_idx
))

572 
	`STD_HEADER_DEF
(
hódî
, 
p_°r
, 
£vîôy
, 
«rgs
);

573 
m_log_d©a
.
buf„r
[
wr_idx
++ & 
mask
] = 
hódî
.
øw
;

574 #i‡
NRF_LOG_USES_TIMESTAMP


575 
m_log_d©a
.
buf„r
[
wr_idx
++ & 
mask
] = m_log_d©a.
	`time°amp_func
();

577 
m_log_d©a
.
buf„r
[
wr_idx
++ & 
mask
] = 
vÆ0
;

578 
m_log_d©a
.
buf„r
[
wr_idx
++ & 
mask
] = 
vÆ1
;

579 
m_log_d©a
.
buf„r
[
wr_idx
++ & 
mask
] = 
vÆ2
;

580 
m_log_d©a
.
buf„r
[
wr_idx
 & 
mask
] = 
vÆ3
;

583 
	}
}

586 
	$ƒf_log_‰⁄ãnd_°d_5
(
uöt8_t
 
£vîôy
,

587 c⁄° * c⁄° 
p_°r
,

588 
uöt32_t
 
vÆ0
,

589 
uöt32_t
 
vÆ1
,

590 
uöt32_t
 
vÆ2
,

591 
uöt32_t
 
vÆ3
,

592 
uöt32_t
 
vÆ4
)

594 #i‡(
NRF_LOG_DEFERRED
 == 0)

595 
uöt32_t
 
¨gs
[] = {
vÆ0
, 
vÆ1
, 
vÆ2
, 
vÆ3
, 
vÆ4
};

596 
	`ƒf_log_dúe˘_„ed
(
£vîôy
, 
p_°r
, 
¨gs
, 
	`ARRAY_SIZE
(args));

598 
uöt32_t
 
«rgs
 = 5;

599 
uöt32_t
 
mask
 = 
m_log_d©a
.mask;

600 
uöt32_t
 
wr_idx
;

601 i‡(
	`buf_¥óŒoc
(
«rgs
, &
wr_idx
))

604 
	`STD_HEADER_DEF
(
hódî
, 
p_°r
, 
£vîôy
, 
«rgs
);

605 
m_log_d©a
.
buf„r
[
wr_idx
++ & 
mask
] = 
hódî
.
øw
;

606 #i‡
NRF_LOG_USES_TIMESTAMP


607 
m_log_d©a
.
buf„r
[
wr_idx
++ & 
mask
] = m_log_d©a.
	`time°amp_func
();

609 
m_log_d©a
.
buf„r
[
wr_idx
++ & 
mask
] = 
vÆ0
;

610 
m_log_d©a
.
buf„r
[
wr_idx
++ & 
mask
] = 
vÆ1
;

611 
m_log_d©a
.
buf„r
[
wr_idx
++ & 
mask
] = 
vÆ2
;

612 
m_log_d©a
.
buf„r
[
wr_idx
++ & 
mask
] = 
vÆ3
;

613 
m_log_d©a
.
buf„r
[
wr_idx
 & 
mask
] = 
vÆ4
;

616 
	}
}

619 
	$ƒf_log_‰⁄ãnd_°d_6
(
uöt8_t
 
£vîôy
,

620 c⁄° * c⁄° 
p_°r
,

621 
uöt32_t
 
vÆ0
,

622 
uöt32_t
 
vÆ1
,

623 
uöt32_t
 
vÆ2
,

624 
uöt32_t
 
vÆ3
,

625 
uöt32_t
 
vÆ4
,

626 
uöt32_t
 
vÆ5
)

628 #i‡(
NRF_LOG_DEFERRED
 == 0)

629 
uöt32_t
 
¨gs
[] = {
vÆ0
, 
vÆ1
, 
vÆ2
, 
vÆ3
, 
vÆ4
, 
vÆ5
};

630 
	`ƒf_log_dúe˘_„ed
(
£vîôy
, 
p_°r
, 
¨gs
, 
	`ARRAY_SIZE
(args));

632 
uöt32_t
 
«rgs
 = 6;

633 
uöt32_t
 
mask
 = 
m_log_d©a
.mask;

634 
uöt32_t
 
wr_idx
;

635 i‡(
	`buf_¥óŒoc
(
«rgs
, &
wr_idx
))

638 
	`STD_HEADER_DEF
(
hódî
, 
p_°r
, 
£vîôy
, 
«rgs
);

639 
m_log_d©a
.
buf„r
[
wr_idx
++ & 
mask
] = 
hódî
.
øw
;

640 #i‡
NRF_LOG_USES_TIMESTAMP


641 
m_log_d©a
.
buf„r
[
wr_idx
++ & 
mask
] = m_log_d©a.
	`time°amp_func
();

643 
m_log_d©a
.
buf„r
[
wr_idx
++ & 
mask
] = 
vÆ0
;

644 
m_log_d©a
.
buf„r
[
wr_idx
++ & 
mask
] = 
vÆ1
;

645 
m_log_d©a
.
buf„r
[
wr_idx
++ & 
mask
] = 
vÆ2
;

646 
m_log_d©a
.
buf„r
[
wr_idx
++ & 
mask
] = 
vÆ3
;

647 
m_log_d©a
.
buf„r
[
wr_idx
++ & 
mask
] = 
vÆ4
;

648 
m_log_d©a
.
buf„r
[
wr_idx
 & 
mask
] = 
vÆ5
;

651 
	}
}

654 
	$ƒf_log_‰⁄ãnd_hexdump
(
uöt8_t
 
£vîôy
,

655 c⁄° * c⁄° 
p_°r
,

656 c⁄° * c⁄° 
p_d©a
,

657 
uöt16_t
 
Àngth
)

659 #i‡(
NRF_LOG_DEFERRED
 == 0)

660 
uöt32_t
 
time°amp
 = 0;

661 #i‡
NRF_LOG_USES_TIMESTAMP


662 
time°amp
 = 
m_log_d©a
.
	`time°amp_func
();

664 (Ë
time°amp
;

667 
uöt32_t
 
cuº_off£t
 = 0;

671 
cuº_off£t
 = 
m_log_d©a
.
	`hexdump_h™dÀr
(
£vîôy
,

672 
NRF_LOG_USES_TIMESTAMP
 ? &
time°amp
 : 
NULL
,

673 
p_°r
,

674 
cuº_off£t
,

675 
p_d©a
,

676 
Àngth
,

677 
NULL
,

680 
cuº_off£t
 < 
Àngth
);

682 
uöt32_t
 
mask
 = 
m_log_d©a
.mask;

684 
uöt32_t
 
wr_idx
;

685 i‡(
	`buf_¥óŒoc
(
	`CEIL_DIV
(
Àngth
, 4Ë+ 1, &
wr_idx
))

687 
	`HEXDUMP_HEADER_DEF
(
hódî
, 
£vîôy
, 
Àngth
);

688 
m_log_d©a
.
buf„r
[
wr_idx
++ & 
mask
] = 
hódî
.
øw
;

689 #i‡
NRF_LOG_USES_TIMESTAMP


690 
m_log_d©a
.
buf„r
[
wr_idx
++ & 
mask
] = m_log_d©a.
	`time°amp_func
();

692 
m_log_d©a
.
buf„r
[
wr_idx
++ & 
mask
] = (
uöt32_t
)
p_°r
;

693 
uöt32_t
 
•a˚0
 = (uöt32_tË* (
m_log_d©a
.
mask
 + 1 - (
wr_idx
 & mask));

694 i‡(
Àngth
 <
•a˚0
)

696 
	`mem˝y
(&
m_log_d©a
.
buf„r
[
wr_idx
 & 
mask
], 
p_d©a
, 
Àngth
);

700 
	`mem˝y
(&
m_log_d©a
.
buf„r
[
wr_idx
 & 
mask
], 
p_d©a
, 
•a˚0
);

701 
Àngth
 -
•a˚0
;

702 
	`mem˝y
(&
m_log_d©a
.
buf„r
[0], &((
uöt8_t
 *)
p_d©a
)[
•a˚0
], 
Àngth
);

706 
	}
}

709 
boﬁ
 
	$buf„r_is_em±y
()

711  (
m_log_d©a
.
rd_idx
 =m_log_d©a.
wr_idx
);

712 
	}
}

715 
boﬁ
 
	$ƒf_log_‰⁄ãnd_dequeue
()

717 i‡(
	`buf„r_is_em±y
())

719  
Ál£
;

722 
uöt32_t
 
rd_idx
 = 
m_log_d©a
.rd_idx;

723 
uöt32_t
 
mask
 = 
m_log_d©a
.mask;

724 
uöt32_t
 
hódî_rd_idx
 = 
rd_idx
;

726 
ƒf_log_hódî_t
 
hódî
;

727 
hódî
.
øw
 = 
m_log_d©a
.
buf„r
[
rd_idx
++ & 
mask
];

730 
hódî
.
gíîic
.
ty≥
 =
HEADER_TYPE_PUSHED
)

732 
rd_idx
 +(
hódî
.
pushed
.
Àn
 + hódî.pushed.
off£t
);

733 
hódî_rd_idx
 = 
rd_idx
;

734 
hódî
.
øw
 = 
m_log_d©a
.
buf„r
[
rd_idx
++ & 
mask
];

737 
uöt32_t
 * 
p_time°amp
 = 
NRF_LOG_USES_TIMESTAMP
 ?

738 &
m_log_d©a
.
buf„r
[
rd_idx
++ & 
mask
] : 
NULL
;

740 i‡(
hódî
.
gíîic
.
øw
)

742 
p_time°amp
 = 
NULL
;

745 
boﬁ
 
ªt
 = 
Ál£
;

746 i‡(
hódî
.
gíîic
.
ty≥
 =
HEADER_TYPE_HEXDUMP
)

749 * 
p_°r
 = (*)
m_log_d©a
.
buf„r
[
rd_idx
++ & 
mask
];

750 
uöt32_t
 
Àngth
 = 
hódî
.
hexdump
.
Àn
;

751 
uöt32_t
 
off£t
 = 
hódî
.
hexdump
.offset;

752 
uöt32_t
 
•a˚0
 = (uöt32_tË* (
mask
 + 1 - (
rd_idx
 & mask));

753 i‡(
Àngth
 > 
•a˚0
)

755 
uöt8_t
 * 
±r0
 = 
•a˚0
 ?

756 (
uöt8_t
 *)&
m_log_d©a
.
buf„r
[
rd_idx
 & 
mask
] :

757 (
uöt8_t
 *)&
m_log_d©a
.
buf„r
[0];

758 
uöt8_t
 
Àn0
 = 
•a˚0
 ? s∑˚0 : 
Àngth
;

759 
uöt8_t
 * 
±r1
 = 
•a˚0
 ?

760 (
uöt8_t
 *)&
m_log_d©a
.
buf„r
[0] : 
NULL
;

761 
uöt8_t
 
Àn1
 = 
•a˚0
 ? 
Àngth
 - space0 : 0;

763 
off£t
 = 
m_log_d©a
.
	`hexdump_h™dÀr
(
hódî
.
hexdump
.
£vîôy
,

764 
p_time°amp
, 
p_°r
,

765 
off£t
,

766 
±r0
, 
Àn0
,

767 
±r1
, 
Àn1
);

771 
off£t
 = 
m_log_d©a
.
	`hexdump_h™dÀr
(

772 
hódî
.
hexdump
.
£vîôy
,

773 
p_time°amp
,

774 
p_°r
,

775 
off£t
,

776 (
uöt8_t
 *)&
m_log_d©a
.
buf„r
[
rd_idx
 & 
mask
],

777 
Àngth
,

778 
NULL
, 0);

781 i‡(
off£t
 =
Àngth
)

783 
rd_idx
 +
	`CEIL_DIV
(
Àngth
, 4);

784 
ªt
 = 
åue
;

790 
hódî
.
hexdump
.
off£t
 = offset;

791 
m_log_d©a
.
buf„r
[
hódî_rd_idx
 & 
mask
] = 
hódî
.
øw
;

796 
uöt32_t
 
¨gs
[6];

797 
uöt32_t
 * 
p_¨g
 = 
¨gs
;

798 * 
p_°r
 = (*)((
uöt32_t
)
hódî
.
°d
.
addr
);

799 
uöt32_t
 
«rgs
 = 
hódî
.
°d
.nargs;

801 
uöt32_t
 
i
;

803 
i
 = 0; i < 
«rgs
; i++)

805 *
p_¨g
 = 
m_log_d©a
.
buf„r
[
rd_idx
++ & 
mask
];

806 
p_¨g
++;

809 
ªt
 = 
m_log_d©a
.
	`°d_h™dÀr
(
hódî
.
°d
.
£vîôy
,

810 
p_time°amp
,

811 
p_°r
, 
¨gs
, 
«rgs
);

813 i‡(
ªt
)

815 
m_log_d©a
.
rd_idx
 =Ñd_idx;

817  
	`buf„r_is_em±y
(Ë? 
Ál£
 : 
åue
;

819 
	}
}

821 
uöt8_t
 
	$ƒf_log_gëch¨
()

823  
	`ƒf_log_backíd_gëch¨
();

824 
	}
}

	@D:\Private\Programing\MCU\Nordic\ble_app_template\nRF5_SDK_12.3.0_d7731ad\components\libraries\scheduler\app_scheduler.c

40 
	~"sdk_comm⁄.h
"

41 #i‡
NRF_MODULE_ENABLED
(
APP_SCHEDULER
)

42 
	~"≠p_scheduÀr.h
"

43 
	~<°dlib.h
>

44 
	~<°döt.h
>

45 
	~<°rög.h
>

46 
	~"ƒf_soc.h
"

47 
	~"ƒf_as£π.h
"

48 
	~"≠p_utû_∂©f‹m.h
"

53 
≠p_sched_evít_h™dÀr_t
 
	mh™dÀr
;

54 
uöt16_t
 
	mevít_d©a_size
;

55 } 
	tevít_hódî_t
;

57 
STATIC_ASSERT
((
evít_hódî_t
Ë<
APP_SCHED_EVENT_HEADER_SIZE
);

59 
evít_hódî_t
 * 
	gm_queue_evít_hódîs
;

60 
uöt8_t
 * 
	gm_queue_evít_d©a
;

61 vﬁ©ûê
uöt8_t
 
	gm_queue_°¨t_ödex
;

62 vﬁ©ûê
uöt8_t
 
	gm_queue_íd_ödex
;

63 
uöt16_t
 
	gm_queue_evít_size
;

64 
uöt16_t
 
	gm_queue_size
;

66 #i‡
APP_SCHEDULER_WITH_PROFILER


67 
uöt16_t
 
	gm_max_queue_utûiz©i⁄
;

70 #i‡
APP_SCHEDULER_WITH_PAUSE


71 
uöt32_t
 
	gm_scheduÀr_∑u£d_cou¡î
 = 0;

81 
__INLINE
 
uöt8_t
 
	$√xt_ödex
(
uöt8_t
 
ödex
)

83  (
ödex
 < 
m_queue_size
) ? (index + 1) : 0;

84 
	}
}

87 
__INLINE
 
uöt8_t
 
	$≠p_sched_queue_fuŒ
()

89 
uöt8_t
 
tmp
 = 
m_queue_°¨t_ödex
;

90  
	`√xt_ödex
(
m_queue_íd_ödex
Ë=
tmp
;

91 
	}
}

94 
	#APP_SCHED_QUEUE_FULL
(Ë
	`≠p_sched_queue_fuŒ
()

	)

97 
__INLINE
 
uöt8_t
 
	$≠p_sched_queue_em±y
()

99 
uöt8_t
 
tmp
 = 
m_queue_°¨t_ödex
;

100  
m_queue_íd_ödex
 =
tmp
;

101 
	}
}

104 
	#APP_SCHED_QUEUE_EMPTY
(Ë
	`≠p_sched_queue_em±y
()

	)

107 
uöt32_t
 
	$≠p_sched_öô
(
uöt16_t
 
evít_size
, uöt16_à
queue_size
, * 
p_evít_buf„r
)

109 
uöt16_t
 
d©a_°¨t_ödex
 = (
queue_size
 + 1Ë* (
evít_hódî_t
);

112 i‡(!
	`is_w‹d_Æig√d
(
p_evít_buf„r
))

114  
NRF_ERROR_INVALID_PARAM
;

118 
m_queue_evít_hódîs
 = 
p_evít_buf„r
;

119 
m_queue_evít_d©a
 = &((
uöt8_t
 *)
p_evít_buf„r
)[
d©a_°¨t_ödex
];

120 
m_queue_íd_ödex
 = 0;

121 
m_queue_°¨t_ödex
 = 0;

122 
m_queue_evít_size
 = 
evít_size
;

123 
m_queue_size
 = 
queue_size
;

125 #i‡
APP_SCHEDULER_WITH_PROFILER


126 
m_max_queue_utûiz©i⁄
 = 0;

129  
NRF_SUCCESS
;

130 
	}
}

133 
uöt16_t
 
	$≠p_sched_queue_•a˚_gë
()

135 
uöt16_t
 
°¨t
 = 
m_queue_°¨t_ödex
;

136 
uöt16_t
 
íd
 = 
m_queue_íd_ödex
;

137 
uöt16_t
 
‰ì_•a˚
 = 
m_queue_size
 - ((
íd
 >
°¨t
) ?

138 (
íd
 - 
°¨t
Ë: (
m_queue_size
 + 1 - start +Énd));

139  
‰ì_•a˚
;

140 
	}
}

143 #i‡
APP_SCHEDULER_WITH_PROFILER


144 
	$queue_utûiz©i⁄_check
()

146 
uöt16_t
 
°¨t
 = 
m_queue_°¨t_ödex
;

147 
uöt16_t
 
íd
 = 
m_queue_íd_ödex
;

148 
uöt16_t
 
queue_utûiz©i⁄
 = (
íd
 >
°¨t
) ? (end - start) :

149 (
m_queue_size
 + 1 - 
°¨t
 + 
íd
);

151 i‡(
queue_utûiz©i⁄
 > 
m_max_queue_utûiz©i⁄
)

153 
m_max_queue_utûiz©i⁄
 = 
queue_utûiz©i⁄
;

155 
	}
}

157 
uöt16_t
 
	$≠p_sched_queue_utûiz©i⁄_gë
()

159  
m_max_queue_utûiz©i⁄
;

160 
	}
}

164 
uöt32_t
 
	$≠p_sched_evít_put
(* 
p_evít_d©a
,

165 
uöt16_t
 
evít_d©a_size
,

166 
≠p_sched_evít_h™dÀr_t
 
h™dÀr
)

168 
uöt32_t
 
îr_code
;

170 i‡(
evít_d©a_size
 <
m_queue_evít_size
)

172 
uöt16_t
 
evít_ödex
 = 0xFFFF;

174 
	`CRITICAL_REGION_ENTER
();

176 i‡(!
	`APP_SCHED_QUEUE_FULL
())

178 
evít_ödex
 = 
m_queue_íd_ödex
;

179 
m_queue_íd_ödex
 = 
	`√xt_ödex
(m_queue_end_index);

181 #i‡
APP_SCHEDULER_WITH_PROFILER


184 
	`queue_utûiz©i⁄_check
();

188 
	`CRITICAL_REGION_EXIT
();

190 i‡(
evít_ödex
 != 0xFFFF)

194 
m_queue_evít_hódîs
[
evít_ödex
].
h™dÀr
 = handler;

195 i‡((
p_evít_d©a
 !
NULL
Ë&& (
evít_d©a_size
 > 0))

197 
	`mem˝y
(&
m_queue_evít_d©a
[
evít_ödex
 * 
m_queue_evít_size
],

198 
p_evít_d©a
,

199 
evít_d©a_size
);

200 
m_queue_evít_hódîs
[
evít_ödex
].
evít_d©a_size
 =Évent_data_size;

204 
m_queue_evít_hódîs
[
evít_ödex
].
evít_d©a_size
 = 0;

207 
îr_code
 = 
NRF_SUCCESS
;

211 
îr_code
 = 
NRF_ERROR_NO_MEM
;

216 
îr_code
 = 
NRF_ERROR_INVALID_LENGTH
;

219  
îr_code
;

220 
	}
}

223 #i‡
APP_SCHEDULER_WITH_PAUSE


224 
	$≠p_sched_∑u£
()

226 
	`CRITICAL_REGION_ENTER
();

228 i‡(
m_scheduÀr_∑u£d_cou¡î
 < 
UINT32_MAX
)

230 
m_scheduÀr_∑u£d_cou¡î
++;

232 
	`CRITICAL_REGION_EXIT
();

233 
	}
}

235 
	$≠p_sched_ªsume
()

237 
	`CRITICAL_REGION_ENTER
();

239 i‡(
m_scheduÀr_∑u£d_cou¡î
 > 0)

241 
m_scheduÀr_∑u£d_cou¡î
--;

243 
	`CRITICAL_REGION_EXIT
();

244 
	}
}

253 
__INLINE
 
boﬁ
 
	$is_≠p_sched_∑u£d
()

255 #i‡
APP_SCHEDULER_WITH_PAUSE


256  (
m_scheduÀr_∑u£d_cou¡î
 > 0);

258  
Ál£
;

260 
	}
}

263 
	$≠p_sched_execuã
()

265 !
	`is_≠p_sched_∑u£d
(Ë&& !
	`APP_SCHED_QUEUE_EMPTY
())

270 
uöt16_t
 
evít_ödex
 = 
m_queue_°¨t_ödex
;

272 * 
p_evít_d©a
;

273 
uöt16_t
 
evít_d©a_size
;

274 
≠p_sched_evít_h™dÀr_t
 
evít_h™dÀr
;

276 
p_evít_d©a
 = &
m_queue_evít_d©a
[
evít_ödex
 * 
m_queue_evít_size
];

277 
evít_d©a_size
 = 
m_queue_evít_hódîs
[
evít_ödex
].event_data_size;

278 
evít_h™dÀr
 = 
m_queue_evít_hódîs
[
evít_ödex
].
h™dÀr
;

280 
	`evít_h™dÀr
(
p_evít_d©a
, 
evít_d©a_size
);

285 
m_queue_°¨t_ödex
 = 
	`√xt_ödex
(m_queue_start_index);

287 
	}
}

	@D:\Private\Programing\MCU\Nordic\ble_app_template\nRF5_SDK_12.3.0_d7731ad\components\libraries\sensorsim\sensorsim.c

41 
	~"£ns‹sim.h
"

44 
	$£ns‹sim_öô
(
£ns‹sim_°©e_t
 * 
p_°©e
,

45 c⁄° 
£ns‹sim_cfg_t
 * 
p_cfg
)

47 i‡(
p_cfg
->
°¨t_©_max
)

49 
p_°©e
->
cuºít_vÆ
 = 
p_cfg
->
max
;

50 
p_°©e
->
is_ö¸ósög
 = 
Ál£
;

54 
p_°©e
->
cuºít_vÆ
 = 
p_cfg
->
mö
;

55 
p_°©e
->
is_ö¸ósög
 = 
åue
;

57 
	}
}

60 
uöt32_t
 
	$£ns‹sim_mósuª
(
£ns‹sim_°©e_t
 * 
p_°©e
,

61 c⁄° 
£ns‹sim_cfg_t
 * 
p_cfg
)

63 i‡(
p_°©e
->
is_ö¸ósög
)

65 
	`£ns‹sim_ö¸emít
(
p_°©e
, 
p_cfg
);

69 
	`£ns‹sim_de¸emít
(
p_°©e
, 
p_cfg
);

71  
p_°©e
->
cuºít_vÆ
;

72 
	}
}

74 
	$£ns‹sim_ö¸emít
(
£ns‹sim_°©e_t
 * 
p_°©e
,

75 c⁄° 
£ns‹sim_cfg_t
 * 
p_cfg
)

77 i‡(
p_cfg
->
max
 - 
p_°©e
->
cuºít_vÆ
 >Ö_cfg->
ö¸
)

79 
p_°©e
->
cuºít_vÆ
 +
p_cfg
->
ö¸
;

83 
p_°©e
->
cuºít_vÆ
 = 
p_cfg
->
max
;

84 
p_°©e
->
is_ö¸ósög
 = 
Ál£
;

86 
	}
}

89 
	$£ns‹sim_de¸emít
(
£ns‹sim_°©e_t
 * 
p_°©e
,

90 c⁄° 
£ns‹sim_cfg_t
 * 
p_cfg
)

92 i‡(
p_°©e
->
cuºít_vÆ
 - 
p_cfg
->
mö
 >Ö_cfg->
ö¸
)

94 
p_°©e
->
cuºít_vÆ
 -
p_cfg
->
ö¸
;

98 
p_°©e
->
cuºít_vÆ
 = 
p_cfg
->
mö
;

99 
p_°©e
->
is_ö¸ósög
 = 
åue
;

101 
	}
}

	@D:\Private\Programing\MCU\Nordic\ble_app_template\nRF5_SDK_12.3.0_d7731ad\components\libraries\timer\app_timer.c

40 
	~"sdk_comm⁄.h
"

41 #i‡
NRF_MODULE_ENABLED
(
APP_TIMER
)

42 
	~"≠p_timî.h
"

43 
	~<°dlib.h
>

44 
	~"ƒf.h
"

45 
	~"ƒf_soc.h
"

46 
	~"≠p_îr‹.h
"

47 
	~"ƒf_dñay.h
"

48 
	~"≠p_utû_∂©f‹m.h
"

50 
	#RTC1_IRQ_PRI
 
APP_IRQ_PRIORITY_LOWEST


	)

51 
	#SWI_IRQ_PRI
 
APP_IRQ_PRIORITY_LOWEST


	)

56 
STATIC_ASSERT
(
RTC1_IRQ_PRI
 =
SWI_IRQ_PRI
);

58 
	#MAX_RTC_COUNTER_VAL
 0x00FFFFFF

	)

60 
	#RTC_COMPARE_OFFSET_MIN
 3

	)

62 
	#MAX_RTC_TASKS_DELAY
 47

	)

64 
	#SWI_IRQn
 
SWI0_IRQn


	)

65 
	#SWI_IRQH™dÀr
 
SWI0_IRQH™dÀr


	)

67 
	#MODULE_INITIALIZED
 (
m_›_queue
.
p_u£r_›_queue
 !
NULL
Ë

	)

72 
uöt32_t
 
	mticks_to_expúe
;

73 
uöt32_t
 
	mticks_©_°¨t
;

74 
uöt32_t
 
	mticks_fú°_öãrvÆ
;

75 
uöt32_t
 
	mticks_≥riodic_öãrvÆ
;

76 
boﬁ
 
	mis_ru¬ög
;

77 
≠p_timî_mode_t
 
	mmode
;

78 
≠p_timî_timeout_h™dÀr_t
 
	mp_timeout_h™dÀr
;

79 * 
	mp_c⁄ãxt
;

80 * 
	m√xt
;

81 } 
	ttimî_node_t
;

83 
STATIC_ASSERT
((
timî_node_t
Ë=
APP_TIMER_NODE_SIZE
);

88 
	mTIMER_USER_OP_TYPE_NONE
,

89 
	mTIMER_USER_OP_TYPE_START
,

90 
	mTIMER_USER_OP_TYPE_STOP
,

91 
	mTIMER_USER_OP_TYPE_STOP_ALL


92 } 
	ttimî_u£r_›_ty≥_t
;

97 
uöt32_t
 
	mticks_©_°¨t
;

98 
uöt32_t
 
	mticks_fú°_öãrvÆ
;

99 
uöt32_t
 
	mticks_≥riodic_öãrvÆ
;

100 * 
	mp_c⁄ãxt
;

101 } 
	ttimî_u£r_›_°¨t_t
;

106 
timî_u£r_›_ty≥_t
 
	m›_ty≥
;

107 
timî_node_t
 * 
	mp_node
;

110 
timî_u£r_›_°¨t_t
 
	m°¨t
;

111 } 
	m∑øms
;

112 } 
	ttimî_u£r_›_t
;

114 
STATIC_ASSERT
((
timî_u£r_›_t
Ë<
APP_TIMER_USER_OP_SIZE
);

115 
STATIC_ASSERT
((
timî_u£r_›_t
) % 4 == 0);

124 
uöt8_t
 
	mfú°
;

125 
uöt8_t
 
	mœ°
;

126 
uöt8_t
 
	msize
;

127 
timî_u£r_›_t
 * 
	mp_u£r_›_queue
;

128 } 
	ttimî_›_queue_t
;

130 
STATIC_ASSERT
((
timî_›_queue_t
) % 4 == 0);

132 
	#CONTEXT_QUEUE_SIZE_MAX
 (2)

	)

134 
timî_›_queue_t
 
	gm_›_queue
;

135 
timî_node_t
 * 
	gmp_timî_id_hód
;

136 
uöt32_t
 
	gm_ticks_œã°
;

137 
uöt32_t
 
	gm_ticks_ñ≠£d
[
CONTEXT_QUEUE_SIZE_MAX
];

138 
uöt8_t
 
	gm_ticks_ñ≠£d_q_ªad_öd
;

139 
uöt8_t
 
	gm_ticks_ñ≠£d_q_wrôe_öd
;

140 
≠p_timî_evt_scheduÀ_func_t
 
	gm_evt_scheduÀ_func
;

141 
boﬁ
 
	gm_πc1_ru¬ög
;

142 
boﬁ
 
	gm_πc1_ª£t
;

144 #i‡
APP_TIMER_WITH_PROFILER


145 
uöt8_t
 
	gm_max_u£r_›_queue_utûiz©i⁄
;

152 
	$πc1_öô
(
uöt32_t
 
¥esˇÀr
)

154 
NRF_RTC1
->
PRESCALER
 = 
¥esˇÀr
;

155 
	`NVIC_SëPri‹ôy
(
RTC1_IRQn
, 
RTC1_IRQ_PRI
);

156 
	}
}

161 
	$πc1_°¨t
()

163 
NRF_RTC1
->
EVTENSET
 = 
RTC_EVTEN_COMPARE0_Msk
;

164 
NRF_RTC1
->
INTENSET
 = 
RTC_INTENSET_COMPARE0_Msk
;

166 
	`NVIC_CÀ¨PídögIRQ
(
RTC1_IRQn
);

167 
	`NVIC_E«bÀIRQ
(
RTC1_IRQn
);

169 
NRF_RTC1
->
TASKS_START
 = 1;

170 
	`ƒf_dñay_us
(
MAX_RTC_TASKS_DELAY
);

172 
m_πc1_ru¬ög
 = 
åue
;

173 
	}
}

178 
	$πc1_°›
()

180 
	`NVIC_DißbÀIRQ
(
RTC1_IRQn
);

182 
NRF_RTC1
->
EVTENCLR
 = 
RTC_EVTEN_COMPARE0_Msk
;

183 
NRF_RTC1
->
INTENCLR
 = 
RTC_INTENSET_COMPARE0_Msk
;

185 
NRF_RTC1
->
TASKS_STOP
 = 1;

186 
	`ƒf_dñay_us
(
MAX_RTC_TASKS_DELAY
);

188 
NRF_RTC1
->
TASKS_CLEAR
 = 1;

189 
m_ticks_œã°
 = 0;

190 
	`ƒf_dñay_us
(
MAX_RTC_TASKS_DELAY
);

192 
m_πc1_ru¬ög
 = 
Ál£
;

193 
	}
}

200 
__INLINE
 
uöt32_t
 
	$πc1_cou¡î_gë
()

202  
NRF_RTC1
->
COUNTER
;

203 
	}
}

210 
__INLINE
 
uöt32_t
 
	$ticks_diff_gë
(
uöt32_t
 
ticks_now
, uöt32_à
ticks_ﬁd
)

212  ((
ticks_now
 - 
ticks_ﬁd
Ë& 
MAX_RTC_COUNTER_VAL
);

213 
	}
}

221 
__INLINE
 
	$πc1_com∑ª0_£t
(
uöt32_t
 
vÆue
)

223 
NRF_RTC1
->
CC
[0] = 
vÆue
;

224 
	}
}

231 
	$timî_li°_ö£π
(
timî_node_t
 * 
p_timî
)

233 i‡(
mp_timî_id_hód
 =
NULL
)

235 
mp_timî_id_hód
 = 
p_timî
;

239 i‡(
p_timî
->
ticks_to_expúe
 <
mp_timî_id_hód
->ticks_to_expire)

241 
mp_timî_id_hód
->
ticks_to_expúe
 -
p_timî
->ticks_to_expire;

243 
p_timî
->
√xt
 = 
mp_timî_id_hód
;

244 
mp_timî_id_hód
 = 
p_timî
;

248 
timî_node_t
 * 
p_¥evious
;

249 
timî_node_t
 * 
p_cuºít
;

250 
uöt32_t
 
ticks_to_expúe
;

252 
ticks_to_expúe
 = 
p_timî
->ticks_to_expire;

253 
p_¥evious
 = 
mp_timî_id_hód
;

254 
p_cuºít
 = 
mp_timî_id_hód
;

256 (
p_cuºít
 !
NULL
Ë&& (
ticks_to_expúe
 >Ö_current->ticks_to_expire))

258 
ticks_to_expúe
 -
p_cuºít
->ticks_to_expire;

259 
p_¥evious
 = 
p_cuºít
;

260 
p_cuºít
 =Ö_cuºít->
√xt
;

263 i‡(
p_cuºít
 !
NULL
)

265 
p_cuºít
->
ticks_to_expúe
 -=Åicks_to_expire;

268 
p_timî
->
ticks_to_expúe
 =Åicks_to_expire;

269 
p_timî
->
√xt
 = 
p_cuºít
;

270 
p_¥evious
->
√xt
 = 
p_timî
;

273 
	}
}

280 
	$timî_li°_ªmove
(
timî_node_t
 * 
p_timî
)

282 
timî_node_t
 * 
p_¥evious
;

283 
timî_node_t
 * 
p_cuºít
;

284 
uöt32_t
 
timeout
;

287 
p_¥evious
 = 
mp_timî_id_hód
;

288 
p_cuºít
 = 
p_¥evious
;

290 
p_cuºít
 !
NULL
)

292 i‡(
p_cuºít
 =
p_timî
)

296 
p_¥evious
 = 
p_cuºít
;

297 
p_cuºít
 =Ö_cuºít->
√xt
;

301 i‡(
p_cuºít
 =
NULL
)

307 i‡(
p_¥evious
 =
p_cuºít
)

309 
mp_timî_id_hód
 = mp_timî_id_hód->
√xt
;

312 i‡(
mp_timî_id_hód
 =
NULL
)

314 
NRF_RTC1
->
TASKS_CLEAR
 = 1;

315 
m_ticks_œã°
 = 0;

316 
m_πc1_ª£t
 = 
åue
;

321 
timeout
 = 
p_cuºít
->
ticks_to_expúe
;

324 
p_¥evious
->
√xt
 = 
p_cuºít
->next;

327 
p_cuºít
 = 
p_¥evious
->
√xt
;

328 i‡(
p_cuºít
 !
NULL
)

330 
p_cuºít
->
ticks_to_expúe
 +
timeout
;

332 
	}
}

337 
	$timî_timeouts_check_sched
()

339 
	`NVIC_SëPídögIRQ
(
RTC1_IRQn
);

340 
	}
}

345 
	$timî_li°_h™dÀr_sched
()

347 
	`NVIC_SëPídögIRQ
(
SWI_IRQn
);

348 
	}
}

356 
	$timeout_h™dÀr_exec
(
timî_node_t
 * 
p_timî
)

358 i‡(
m_evt_scheduÀ_func
 !
NULL
)

360 
uöt32_t
 
îr_code
 = 
	`m_evt_scheduÀ_func
(
p_timî
->
p_timeout_h™dÀr
,Ö_timî->
p_c⁄ãxt
);

361 
	`APP_ERROR_CHECK
(
îr_code
);

365 
p_timî
->
	`p_timeout_h™dÀr
’_timî->
p_c⁄ãxt
);

367 
	}
}

372 
	$timî_timeouts_check
()

375 i‡(
mp_timî_id_hód
 !
NULL
)

377 
timî_node_t
 * 
p_timî
;

378 
timî_node_t
 * 
p_¥evious_timî
;

379 
uöt32_t
 
ticks_ñ≠£d
;

380 
uöt32_t
 
ticks_expúed
;

383 
ticks_expúed
 = 0;

386 
ticks_ñ≠£d
 = 
	`ticks_diff_gë
(
	`πc1_cou¡î_gë
(), 
m_ticks_œã°
);

389 
p_timî
 = 
mp_timî_id_hód
;

392 
p_timî
 !
NULL
)

395 i‡(
ticks_ñ≠£d
 < 
p_timî
->
ticks_to_expúe
)

401 
ticks_ñ≠£d
 -
p_timî
->
ticks_to_expúe
;

402 
ticks_expúed
 +
p_timî
->
ticks_to_expúe
;

405 
p_¥evious_timî
 = 
p_timî
;

406 
p_timî
 =Ö_timî->
√xt
;

409 i‡(
p_¥evious_timî
->
is_ru¬ög
)

411 
p_¥evious_timî
->
is_ru¬ög
 = 
Ál£
;

412 
	`timeout_h™dÀr_exec
(
p_¥evious_timî
);

417 i‡(
m_ticks_ñ≠£d_q_ªad_öd
 =
m_ticks_ñ≠£d_q_wrôe_öd
)

424 i‡(++
m_ticks_ñ≠£d_q_wrôe_öd
 =
CONTEXT_QUEUE_SIZE_MAX
)

428 
m_ticks_ñ≠£d_q_wrôe_öd
 = 0;

433 
m_ticks_ñ≠£d
[
m_ticks_ñ≠£d_q_wrôe_öd
] = 
ticks_expúed
;

435 
	`timî_li°_h™dÀr_sched
();

437 
	}
}

446 
boﬁ
 
	$ñ≠£d_ticks_acquúe
(
uöt32_t
 * 
p_ticks_ñ≠£d
)

449 i‡(
m_ticks_ñ≠£d_q_ªad_öd
 !
m_ticks_ñ≠£d_q_wrôe_öd
)

452 
m_ticks_ñ≠£d_q_ªad_öd
++;

453 i‡(
m_ticks_ñ≠£d_q_ªad_öd
 =
CONTEXT_QUEUE_SIZE_MAX
)

455 
m_ticks_ñ≠£d_q_ªad_öd
 = 0;

458 *
p_ticks_ñ≠£d
 = 
m_ticks_ñ≠£d
[
m_ticks_ñ≠£d_q_ªad_öd
];

460 
m_ticks_œã°
 +*
p_ticks_ñ≠£d
;

461 
m_ticks_œã°
 &
MAX_RTC_COUNTER_VAL
;

463  
åue
;

468 *
p_ticks_ñ≠£d
 = 0;

469  
Ál£
;

471 
	}
}

478 
boﬁ
 
	$li°_dñëi⁄s_h™dÀr
()

480 
timî_node_t
 * 
p_timî_ﬁd_hód
;

481 
uöt8_t
 
u£r_›s_fú°
 = 
m_›_queue
.
fú°
;

484 
p_timî_ﬁd_hód
 = 
mp_timî_id_hód
;

486 
u£r_›s_fú°
 !
m_›_queue
.
œ°
)

488 
timî_u£r_›_t
 * 
p_u£r_›
 = &
m_›_queue
.
p_u£r_›_queue
[
u£r_›s_fú°
];

491 
u£r_›s_fú°
++;

492 i‡(
u£r_›s_fú°
 =
m_›_queue
.
size
)

494 
u£r_›s_fú°
 = 0;

497 
p_u£r_›
->
›_ty≥
)

499 
TIMER_USER_OP_TYPE_STOP
:

501 
	`timî_li°_ªmove
(
p_u£r_›
->
p_node
);

504 
TIMER_USER_OP_TYPE_STOP_ALL
:

506 
mp_timî_id_hód
 !
NULL
)

508 
timî_node_t
 * 
p_hód
 = 
mp_timî_id_hód
;

510 
p_hód
->
is_ru¬ög
 = 
Ál£
;

511 
mp_timî_id_hód
 = 
p_hód
->
√xt
;

522  (
mp_timî_id_hód
 !
p_timî_ﬁd_hód
);

523 
	}
}

532 
	$expúed_timîs_h™dÀr
(
uöt32_t
 
ticks_ñ≠£d
,

533 
uöt32_t
 
ticks_¥evious
,

534 
timî_node_t
 ** 
p_ª°¨t_li°_hód
)

536 
uöt32_t
 
ticks_expúed
 = 0;

538 
mp_timî_id_hód
 !
NULL
)

540 
timî_node_t
 * 
p_timî
;

541 
timî_node_t
 * 
p_timî_expúed
;

544 
p_timî
 = 
mp_timî_id_hód
;

547 i‡(
ticks_ñ≠£d
 < 
p_timî
->
ticks_to_expúe
)

549 
p_timî
->
ticks_to_expúe
 -
ticks_ñ≠£d
;

554 
ticks_ñ≠£d
 -
p_timî
->
ticks_to_expúe
;

555 
ticks_expúed
 +
p_timî
->
ticks_to_expúe
;

558 
p_timî
->
ticks_to_expúe
 = 0;

561 
p_timî_expúed
 = 
mp_timî_id_hód
;

562 
mp_timî_id_hód
 = 
p_timî
->
√xt
;

565 i‡(
p_timî
->
ticks_≥riodic_öãrvÆ
 != 0)

567 
p_timî
->
ticks_©_°¨t
 = (
ticks_¥evious
 + 
ticks_expúed
Ë& 
MAX_RTC_COUNTER_VAL
;

568 
p_timî
->
ticks_fú°_öãrvÆ
 =Ö_timî->
ticks_≥riodic_öãrvÆ
;

569 
p_timî
->
√xt
 = *
p_ª°¨t_li°_hód
;

570 *
p_ª°¨t_li°_hód
 = 
p_timî_expúed
;

573 
	}
}

582 
boﬁ
 
	$li°_ö£πi⁄s_h™dÀr
(
timî_node_t
 * 
p_ª°¨t_li°_hód
)

584 
timî_node_t
 * 
p_timî_id_ﬁd_hód
;

587 
p_timî_id_ﬁd_hód
 = 
mp_timî_id_hód
;

590 (
p_ª°¨t_li°_hód
 !
NULL
Ë|| (
m_›_queue
.
fú°
 !m_›_queue.
œ°
))

592 
timî_node_t
 * 
p_timî
;

594 i‡(
p_ª°¨t_li°_hód
 !
NULL
)

596 
p_timî
 = 
p_ª°¨t_li°_hód
;

597 
p_ª°¨t_li°_hód
 = 
p_timî
->
√xt
;

601 
timî_u£r_›_t
 * 
p_u£r_›
 = &
m_›_queue
.
p_u£r_›_queue
[m_›_queue.
fú°
];

603 
m_›_queue
.
fú°
++;

604 i‡(
m_›_queue
.
fú°
 =m_›_queue.
size
)

606 
m_›_queue
.
fú°
 = 0;

609 
p_timî
 = 
p_u£r_›
->
p_node
;

611 i‡((
p_u£r_›
->
›_ty≥
 !
TIMER_USER_OP_TYPE_START
Ë|| 
p_timî
->
is_ru¬ög
)

616 
p_timî
->
ticks_©_°¨t
 = 
p_u£r_›
->
∑øms
.
°¨t
.ticks_at_start;

617 
p_timî
->
ticks_fú°_öãrvÆ
 = 
p_u£r_›
->
∑øms
.
°¨t
.ticks_first_interval;

618 
p_timî
->
ticks_≥riodic_öãrvÆ
 = 
p_u£r_›
->
∑øms
.
°¨t
.ticks_periodic_interval;

619 
p_timî
->
p_c⁄ãxt
 = 
p_u£r_›
->
∑øms
.
°¨t
.p_context;

621 i‡(
m_πc1_ª£t
)

623 
p_timî
->
ticks_©_°¨t
 = 0;

629 ((
p_timî
->
ticks_©_°¨t
 - 
m_ticks_œã°
Ë& 
MAX_RTC_COUNTER_VAL
)

631 (
MAX_RTC_COUNTER_VAL
 / 2)

634 
p_timî
->
ticks_to_expúe
 = 
	`ticks_diff_gë
’_timî->
ticks_©_°¨t
, 
m_ticks_œã°
) +

635 
p_timî
->
ticks_fú°_öãrvÆ
;

639 
uöt32_t
 
dñè_cuºít_°¨t
;

641 
dñè_cuºít_°¨t
 = 
	`ticks_diff_gë
(
m_ticks_œã°
, 
p_timî
->
ticks_©_°¨t
);

642 i‡(
p_timî
->
ticks_fú°_öãrvÆ
 > 
dñè_cuºít_°¨t
)

644 
p_timî
->
ticks_to_expúe
 =Ö_timî->
ticks_fú°_öãrvÆ
 - 
dñè_cuºít_°¨t
;

648 
p_timî
->
ticks_to_expúe
 = 0;

652 
p_timî
->
ticks_©_°¨t
 = 0;

653 
p_timî
->
ticks_fú°_öãrvÆ
 = 0;

654 
p_timî
->
is_ru¬ög
 = 
åue
;

655 
p_timî
->
√xt
 = 
NULL
;

658 
	`timî_li°_ö£π
(
p_timî
);

661  (
mp_timî_id_hód
 !
p_timî_id_ﬁd_hód
);

662 
	}
}

667 
	$com∑ª_ªg_upd©e
(
timî_node_t
 * 
p_timî_id_hód_ﬁd
)

670 i‡(
mp_timî_id_hód
 !
NULL
)

672 
uöt32_t
 
ticks_to_expúe
 = 
mp_timî_id_hód
->ticks_to_expire;

673 
uöt32_t
 
¥e_cou¡î_vÆ
 = 
	`πc1_cou¡î_gë
();

674 
uöt32_t
 
cc
 = 
m_ticks_œã°
;

675 
uöt32_t
 
ticks_ñ≠£d
 = 
	`ticks_diff_gë
(
¥e_cou¡î_vÆ
, 
cc
Ë+ 
RTC_COMPARE_OFFSET_MIN
;

677 i‡(!
m_πc1_ru¬ög
)

680 
	`πc1_°¨t
();

683 
cc
 +(
ticks_ñ≠£d
 < 
ticks_to_expúe
) ?Åicks_to_expire :Åicks_elapsed;

684 
cc
 &
MAX_RTC_COUNTER_VAL
;

686 
	`πc1_com∑ª0_£t
(
cc
);

688 
uöt32_t
 
po°_cou¡î_vÆ
 = 
	`πc1_cou¡î_gë
();

691 (
	`ticks_diff_gë
(
po°_cou¡î_vÆ
, 
¥e_cou¡î_vÆ
Ë+ 
RTC_COMPARE_OFFSET_MIN
)

693 
	`ticks_diff_gë
(
cc
, 
¥e_cou¡î_vÆ
)

701 
	`πc1_com∑ª0_£t
(
	`πc1_cou¡î_gë
());

702 
	`ƒf_dñay_us
(
MAX_RTC_TASKS_DELAY
);

703 
	`timî_timeouts_check_sched
();

708 #i‡(
APP_TIMER_KEEPS_RTC_ACTIVE
 == 0)

710 
	`πc1_°›
();

713 
	}
}

718 
	$timî_li°_h™dÀr
()

720 
timî_node_t
 * 
p_ª°¨t_li°_hód
 = 
NULL
;

722 
uöt32_t
 
ticks_ñ≠£d
;

723 
uöt32_t
 
ticks_¥evious
;

724 
boﬁ
 
ticks_have_ñ≠£d
;

725 
boﬁ
 
com∑ª_upd©e
;

726 
timî_node_t
 * 
p_timî_id_hód_ﬁd
;

728 #i‡
APP_TIMER_WITH_PROFILER


730 
uöt8_t
 
size
 = 
m_›_queue
.size;

731 
uöt8_t
 
fú°
 = 
m_›_queue
.first;

732 
uöt8_t
 
œ°
 = 
m_›_queue
.last;

733 
uöt8_t
 
utûiz©i⁄
 = (
fú°
 <
œ°
Ë? (œ° - fú°Ë: (
size
 + 1 - first +Üast);

735 i‡(
utûiz©i⁄
 > 
m_max_u£r_›_queue_utûiz©i⁄
)

737 
m_max_u£r_›_queue_utûiz©i⁄
 = 
utûiz©i⁄
;

743 
ticks_¥evious
 = 
m_ticks_œã°
;

744 
p_timî_id_hód_ﬁd
 = 
mp_timî_id_hód
;

747 
ticks_have_ñ≠£d
 = 
	`ñ≠£d_ticks_acquúe
(&
ticks_ñ≠£d
);

750 
com∑ª_upd©e
 = 
	`li°_dñëi⁄s_h™dÀr
();

753 i‡(
ticks_have_ñ≠£d
)

755 
	`expúed_timîs_h™dÀr
(
ticks_ñ≠£d
, 
ticks_¥evious
, &
p_ª°¨t_li°_hód
);

756 
com∑ª_upd©e
 = 
åue
;

760 i‡(
	`li°_ö£πi⁄s_h™dÀr
(
p_ª°¨t_li°_hód
))

762 
com∑ª_upd©e
 = 
åue
;

766 i‡(
com∑ª_upd©e
)

768 
	`com∑ª_ªg_upd©e
(
p_timî_id_hód_ﬁd
);

770 
m_πc1_ª£t
 = 
Ál£
;

771 
	}
}

778 
	$u£r_›_íque
(
uöt8_t
 
œ°_ödex
)

780 
m_›_queue
.
œ°
 = 
œ°_ödex
;

781 
	}
}

790 
timî_u£r_›_t
 * 
	$u£r_›_Æloc
–
uöt8_t
 * 
p_œ°_ödex
)

792 
uöt8_t
 
œ°
;

793 
timî_u£r_›_t
 * 
p_u£r_›
;

795 
œ°
 = 
m_›_queue
.last + 1;

796 i‡(
œ°
 =
m_›_queue
.
size
)

799 
œ°
 = 0;

801 i‡(
œ°
 =
m_›_queue
.
fú°
)

804  
NULL
;

807 *
p_œ°_ödex
 = 
œ°
;

808 
p_u£r_›
 = &
m_›_queue
.
p_u£r_›_queue
[m_›_queue.
œ°
];

810  
p_u£r_›
;

811 
	}
}

824 
uöt32_t
 
	$timî_°¨t_›_scheduÀ
(
timî_node_t
 * 
p_node
,

825 
uöt32_t
 
timeout_öôül
,

826 
uöt32_t
 
timeout_≥riodic
,

827 * 
p_c⁄ãxt
)

829 
uöt8_t
 
œ°_ödex
;

830 
uöt32_t
 
îr_code
 = 
NRF_SUCCESS
;

832 
	`CRITICAL_REGION_ENTER
();

833 
timî_u£r_›_t
 * 
p_u£r_›
 = 
	`u£r_›_Æloc
(&
œ°_ödex
);

834 i‡(
p_u£r_›
 =
NULL
)

836 
îr_code
 = 
NRF_ERROR_NO_MEM
;

841 
p_u£r_›
->
›_ty≥
 = 
TIMER_USER_OP_TYPE_START
;

842 
p_u£r_›
->
p_node
 =Ö_node;

843 
p_u£r_›
->
∑øms
.
°¨t
.
ticks_©_°¨t
 = 
	`πc1_cou¡î_gë
();

844 
p_u£r_›
->
∑øms
.
°¨t
.
ticks_fú°_öãrvÆ
 = 
timeout_öôül
;

845 
p_u£r_›
->
∑øms
.
°¨t
.
ticks_≥riodic_öãrvÆ
 = 
timeout_≥riodic
;

846 
p_u£r_›
->
∑øms
.
°¨t
.
p_c⁄ãxt
 =Ö_context;

848 
	`u£r_›_íque
(
œ°_ödex
);

850 
	`CRITICAL_REGION_EXIT
();

852 i‡(
îr_code
 =
NRF_SUCCESS
)

854 
	`timî_li°_h™dÀr_sched
();

857  
îr_code
;

858 
	}
}

869 
uöt32_t
 
	$timî_°›_›_scheduÀ
(
timî_node_t
 * 
p_node
,

870 
timî_u£r_›_ty≥_t
 
›_ty≥
)

872 
uöt8_t
 
œ°_ödex
;

873 
uöt32_t
 
îr_code
 = 
NRF_SUCCESS
;

875 
	`CRITICAL_REGION_ENTER
();

876 
timî_u£r_›_t
 * 
p_u£r_›
 = 
	`u£r_›_Æloc
(&
œ°_ödex
);

877 i‡(
p_u£r_›
 =
NULL
)

879 
îr_code
 = 
NRF_ERROR_NO_MEM
;

883 
p_u£r_›
->
›_ty≥
 = op_type;

884 
p_u£r_›
->
p_node
 =Ö_node;

886 
	`u£r_›_íque
(
œ°_ödex
);

888 
	`CRITICAL_REGION_EXIT
();

890 i‡(
îr_code
 =
NRF_SUCCESS
)

892 
	`timî_li°_h™dÀr_sched
();

895  
îr_code
;

896 
	}
}

902 
	$RTC1_IRQH™dÀr
()

905 
NRF_RTC1
->
EVENTS_COMPARE
[0] = 0;

906 
NRF_RTC1
->
EVENTS_COMPARE
[1] = 0;

907 
NRF_RTC1
->
EVENTS_COMPARE
[2] = 0;

908 
NRF_RTC1
->
EVENTS_COMPARE
[3] = 0;

909 
NRF_RTC1
->
EVENTS_TICK
 = 0;

910 
NRF_RTC1
->
EVENTS_OVRFLW
 = 0;

913 
	`timî_timeouts_check
();

914 
	}
}

921 
	$SWI_IRQH™dÀr
()

923 
	`timî_li°_h™dÀr
();

924 
	}
}

927 
uöt32_t
 
	$≠p_timî_öô
(
uöt32_t
 
¥esˇÀr
,

928 
uöt8_t
 
›_queue_size
,

929 * 
p_buf„r
,

930 
≠p_timî_evt_scheduÀ_func_t
 
evt_scheduÀ_func
)

933 i‡(!
	`is_w‹d_Æig√d
(
p_buf„r
))

935  
NRF_ERROR_INVALID_PARAM
;

938 i‡(
p_buf„r
 =
NULL
)

940  
NRF_ERROR_INVALID_PARAM
;

944 
	`πc1_°›
();

946 
m_evt_scheduÀ_func
 = 
evt_scheduÀ_func
;

949 
m_›_queue
.
fú°
 = 0;

950 
m_›_queue
.
œ°
 = 0;

951 
m_›_queue
.
size
 = 
›_queue_size
;

952 
m_›_queue
.
p_u£r_›_queue
 = 
p_buf„r
;

954 
mp_timî_id_hód
 = 
NULL
;

955 
m_ticks_ñ≠£d_q_ªad_öd
 = 0;

956 
m_ticks_ñ≠£d_q_wrôe_öd
 = 0;

958 #i‡
APP_TIMER_WITH_PROFILER


959 
m_max_u£r_›_queue_utûiz©i⁄
 = 0;

962 
	`NVIC_CÀ¨PídögIRQ
(
SWI_IRQn
);

963 
	`NVIC_SëPri‹ôy
(
SWI_IRQn
, 
SWI_IRQ_PRI
);

964 
	`NVIC_E«bÀIRQ
(
SWI_IRQn
);

966 
	`πc1_öô
(
¥esˇÀr
);

968 
m_ticks_œã°
 = 
	`πc1_cou¡î_gë
();

970  
NRF_SUCCESS
;

971 
	}
}

974 
uöt32_t
 
	$≠p_timî_¸óã
(
≠p_timî_id_t
 c⁄° * 
p_timî_id
,

975 
≠p_timî_mode_t
 
mode
,

976 
≠p_timî_timeout_h™dÀr_t
 
timeout_h™dÀr
)

979 
	`VERIFY_MODULE_INITIALIZED
();

981 i‡(
timeout_h™dÀr
 =
NULL
)

983  
NRF_ERROR_INVALID_PARAM
;

985 i‡(
p_timî_id
 =
NULL
)

987  
NRF_ERROR_INVALID_PARAM
;

989 i‡(((
timî_node_t
*)*
p_timî_id
)->
is_ru¬ög
)

991  
NRF_ERROR_INVALID_STATE
;

994 
timî_node_t
 * 
p_node
 = (timî_node_à*)*
p_timî_id
;

995 
p_node
->
is_ru¬ög
 = 
Ál£
;

996 
p_node
->
mode
 = mode;

997 
p_node
->
p_timeout_h™dÀr
 = 
timeout_h™dÀr
;

998  
NRF_SUCCESS
;

999 
	}
}

1001 
uöt32_t
 
	$≠p_timî_°¨t
(
≠p_timî_id_t
 
timî_id
, 
uöt32_t
 
timeout_ticks
, * 
p_c⁄ãxt
)

1003 
uöt32_t
 
timeout_≥riodic
;

1004 
timî_node_t
 * 
p_node
 = (timî_node_t*)
timî_id
;

1007 
	`VERIFY_MODULE_INITIALIZED
();

1009 i‡(
timî_id
 == 0)

1011  
NRF_ERROR_INVALID_STATE
;

1013 i‡(
timeout_ticks
 < 
APP_TIMER_MIN_TIMEOUT_TICKS
)

1015  
NRF_ERROR_INVALID_PARAM
;

1017 i‡(
p_node
->
p_timeout_h™dÀr
 =
NULL
)

1019  
NRF_ERROR_INVALID_STATE
;

1023 
timeout_≥riodic
 = (
p_node
->
mode
 =
APP_TIMER_MODE_REPEATED
Ë? 
timeout_ticks
 : 0;

1025  
	`timî_°¨t_›_scheduÀ
(
p_node
,

1026 
timeout_ticks
,

1027 
timeout_≥riodic
,

1028 
p_c⁄ãxt
);

1029 
	}
}

1032 
uöt32_t
 
	$≠p_timî_°›
(
≠p_timî_id_t
 
timî_id
)

1034 
timî_node_t
 * 
p_node
 = (timî_node_t*)
timî_id
;

1036 
	`VERIFY_MODULE_INITIALIZED
();

1038 i‡((
timî_id
 =
NULL
Ë|| (
p_node
->
p_timeout_h™dÀr
 == NULL))

1040  
NRF_ERROR_INVALID_STATE
;

1043 
p_node
->
is_ru¬ög
 = 
Ál£
;

1045  
	`timî_°›_›_scheduÀ
(
p_node
, 
TIMER_USER_OP_TYPE_STOP
);

1046 
	}
}

1049 
uöt32_t
 
	$≠p_timî_°›_Æl
()

1052 
	`VERIFY_MODULE_INITIALIZED
();

1054  
	`timî_°›_›_scheduÀ
(
NULL
, 
TIMER_USER_OP_TYPE_STOP_ALL
);

1055 
	}
}

1058 
uöt32_t
 
	$≠p_timî_˙t_gë
()

1060  
	`πc1_cou¡î_gë
();

1061 
	}
}

1064 
uöt32_t
 
	$≠p_timî_˙t_diff_compuã
(
uöt32_t
 
ticks_to
,

1065 
uöt32_t
 
ticks_‰om
,

1066 
uöt32_t
 * 
p_ticks_diff
)

1068 *
p_ticks_diff
 = 
	`ticks_diff_gë
(
ticks_to
, 
ticks_‰om
);

1069  
NRF_SUCCESS
;

1070 
	}
}

1072 #i‡
APP_TIMER_WITH_PROFILER


1073 
uöt8_t
 
	$≠p_timî_›_queue_utûiz©i⁄_gë
()

1075  
m_max_u£r_›_queue_utûiz©i⁄
;

1076 
	}
}

	@D:\Private\Programing\MCU\Nordic\ble_app_template\nRF5_SDK_12.3.0_d7731ad\components\libraries\util\app_error.c

50 
	~"ƒf.h
"

51 
	~<°dio.h
>

52 
	~"≠p_îr‹.h
"

53 
	~"n‹dic_comm⁄.h
"

54 
	~"sdk_îr‹s.h
"

55 
	~"ƒf_log.h
"

56 
	~"ƒf_log_˘æ.h
"

68 
	$≠p_îr‹_h™dÀr
(
ªt_code_t
 
îr‹_code
, 
uöt32_t
 
löe_num
, c⁄° 
uöt8_t
 * 
p_fûe_«me
)

70 
îr‹_öfo_t
 
îr‹_öfo
 =

72 .
löe_num
 =Üine_num,

73 .
p_fûe_«me
 =Ö_file_name,

74 .
îr_code
 = 
îr‹_code
,

76 
	`≠p_îr‹_Áu…_h™dÀr
(
NRF_FAULT_ID_SDK_ERROR
, 0, (
uöt32_t
)(&
îr‹_öfo
));

78 
	`UNUSED_VARIABLE
(
îr‹_öfo
);

79 
	}
}

82 
	$≠p_îr‹_h™dÀr_b¨e
(
ªt_code_t
 
îr‹_code
)

84 
îr‹_öfo_t
 
îr‹_öfo
 =

86 .
löe_num
 = 0,

87 .
p_fûe_«me
 = 
NULL
,

88 .
îr_code
 = 
îr‹_code
,

91 
	`≠p_îr‹_Áu…_h™dÀr
(
NRF_FAULT_ID_SDK_ERROR
, 0, (
uöt32_t
)(&
îr‹_öfo
));

93 
	`UNUSED_VARIABLE
(
îr‹_öfo
);

94 
	}
}

97 
	$≠p_îr‹_ßve_™d_°›
(
uöt32_t
 
id
, uöt32_à
pc
, uöt32_à
öfo
)

102 
uöt32_t
 
Áu…_id
;

103 
uöt32_t
 
pc
;

104 
uöt32_t
 
îr‹_öfo
;

105 
as£π_öfo_t
 * 
p_as£π_öfo
;

106 
îr‹_öfo_t
 * 
p_îr‹_öfo
;

107 
ªt_code_t
 
îr_code
;

108 
uöt32_t
 
löe_num
;

109 c⁄° 
uöt8_t
 * 
p_fûe_«me
;

110 } 
m_îr‹_d©a
 = {0};

114 vﬁ©ûê
boﬁ
 
lo›
 = 
åue
;

115 
	`UNUSED_VARIABLE
(
lo›
);

117 
m_îr‹_d©a
.
Áu…_id
 = 
id
;

118 
m_îr‹_d©a
.
pc
 =Öc;

119 
m_îr‹_d©a
.
îr‹_öfo
 = 
öfo
;

121 
id
)

123 
NRF_FAULT_ID_SDK_ASSERT
:

124 
m_îr‹_d©a
.
p_as£π_öfo
 = (
as£π_öfo_t
 *)
öfo
;

125 
m_îr‹_d©a
.
löe_num
 = m_îr‹_d©a.
p_as£π_öfo
->line_num;

126 
m_îr‹_d©a
.
p_fûe_«me
 = m_îr‹_d©a.
p_as£π_öfo
->p_file_name;

129 
NRF_FAULT_ID_SDK_ERROR
:

130 
m_îr‹_d©a
.
p_îr‹_öfo
 = (
îr‹_öfo_t
 *)
öfo
;

131 
m_îr‹_d©a
.
îr_code
 = m_îr‹_d©a.
p_îr‹_öfo
->err_code;

132 
m_îr‹_d©a
.
löe_num
 = m_îr‹_d©a.
p_îr‹_öfo
->line_num;

133 
m_îr‹_d©a
.
p_fûe_«me
 = m_îr‹_d©a.
p_îr‹_öfo
->p_file_name;

137 
	`UNUSED_VARIABLE
(
m_îr‹_d©a
);

140 
	`__dißbÀ_úq
();

141 
lo›
);

143 
	`__íabÀ_úq
();

144 
	}
}

	@D:\Private\Programing\MCU\Nordic\ble_app_template\nRF5_SDK_12.3.0_d7731ad\components\libraries\util\app_error_weak.c

41 
	~"≠p_îr‹.h
"

43 
	#NRF_LOG_MODULE_NAME
 "APP_ERROR"

	)

44 
	~"ƒf_log.h
"

45 
	~"ƒf_log_˘æ.h
"

52 
__WEAK
 
	$≠p_îr‹_Áu…_h™dÀr
(
uöt32_t
 
id
, uöt32_à
pc
, uöt32_à
öfo
)

54 
	`NRF_LOG_ERROR
("Fatal\r\n");

55 
	`NRF_LOG_FINAL_FLUSH
();

57 #i‚de‡
DEBUG


58 
	`NVIC_Sy°emRe£t
();

60 
	`≠p_îr‹_ßve_™d_°›
(
id
, 
pc
, 
öfo
);

62 
	}
}

	@D:\Private\Programing\MCU\Nordic\ble_app_template\nRF5_SDK_12.3.0_d7731ad\components\libraries\util\app_util_platform.c

41 
	~"≠p_utû_∂©f‹m.h
"

43 #ifde‡
SOFTDEVICE_PRESENT


45 
ƒf_nvic_°©e_t
 
	gƒf_nvic_°©e
;

48 
uöt32_t
 
	gm_ö_¸ôiˇl_ªgi⁄
 = 0;

50 
	$≠p_utû_dißbÀ_úq
()

52 
	`__dißbÀ_úq
();

53 
m_ö_¸ôiˇl_ªgi⁄
++;

54 
	}
}

56 
	$≠p_utû_íabÀ_úq
()

58 
m_ö_¸ôiˇl_ªgi⁄
--;

59 i‡(
m_ö_¸ôiˇl_ªgi⁄
 == 0)

61 
	`__íabÀ_úq
();

63 
	}
}

65 
	$≠p_utû_¸ôiˇl_ªgi⁄_íãr
(
uöt8_t
 *
p_√°ed
)

67 #i‡
__CORTEX_M
 == (0x04U)

68 
	`ASSERT
(
APP_LEVEL_PRIVILEGED
 =
	`¥ivûege_Àvñ_gë
())

71 #i‡
	`deföed
(
SOFTDEVICE_PRESENT
)

73 (Ë
	`sd_nvic_¸ôiˇl_ªgi⁄_íãr
(
p_√°ed
);

75 
	`≠p_utû_dißbÀ_úq
();

77 
	}
}

79 
	$≠p_utû_¸ôiˇl_ªgi⁄_exô
(
uöt8_t
 
√°ed
)

81 #i‡
__CORTEX_M
 == (0x04U)

82 
	`ASSERT
(
APP_LEVEL_PRIVILEGED
 =
	`¥ivûege_Àvñ_gë
())

85 #i‡
	`deföed
(
SOFTDEVICE_PRESENT
)

87 (Ë
	`sd_nvic_¸ôiˇl_ªgi⁄_exô
(
√°ed
);

89 
	`≠p_utû_íabÀ_úq
();

91 
	}
}

	@D:\Private\Programing\MCU\Nordic\ble_app_template\nRF5_SDK_12.3.0_d7731ad\components\libraries\util\nrf_assert.c

40 
	~"ƒf_as£π.h
"

41 
	~"≠p_îr‹.h
"

42 
	~"n‹dic_comm⁄.h
"

44 
__WEAK
 
	$as£π_ƒf_ˇŒback
(
uöt16_t
 
löe_num
, c⁄° 
uöt8_t
 * 
fûe_«me
)

46 
as£π_öfo_t
 
as£π_öfo
 =

48 .
löe_num
 =Üine_num,

49 .
p_fûe_«me
 = 
fûe_«me
,

51 
	`≠p_îr‹_Áu…_h™dÀr
(
NRF_FAULT_ID_SDK_ASSERT
, 0, (
uöt32_t
)(&
as£π_öfo
));

53 
	`UNUSED_VARIABLE
(
as£π_öfo
);

54 
	}
}

	@D:\Private\Programing\MCU\Nordic\ble_app_template\nRF5_SDK_12.3.0_d7731ad\components\libraries\util\sdk_errors.c

41 
	~"sdk_îr‹s.h
"

42 
	~"n‹dic_comm⁄.h
"

44 #i‡
deföed
(
NRF_LOG_ENABLED
) && NRF_LOG_ENABLED

49 c⁄° * 
	gm_sdk_îr‹s_«me
[
ERR_NAMES_SIZE
] =

71 c⁄° * 
	gm_sdk_îr‹s_«me_comm⁄
[
ERR_NAMES_COMMON_SIZE
] =

84 c⁄° * 
	gm_sdk_îr‹s_«me_twi
[
ERR_NAMES_TWI_SIZE
] =

	@D:\Private\Programing\MCU\Nordic\ble_app_template\nRF5_SDK_12.3.0_d7731ad\components\libraries\util\sdk_mapped_flags.c

41 
	~"sdk_m≠≥d_Êags.h
"

42 
	~<°döt.h
>

43 
	~<°dboﬁ.h
>

44 
	~<°ddef.h
>

45 
	~"compûî_ab°ø˘i⁄.h
"

55 
__INLINE
 
	$sdk_m≠≥d_Êags_£t_by_ödex
(
sdk_m≠≥d_Êags_t
 * 
p_Êags
, 
uöt16_t
 
ödex
)

57 *
p_Êags
 |(1U << 
ödex
);

58 
	}
}

68 
__INLINE
 
	$sdk_m≠≥d_Êags_˛ór_by_ödex
(
sdk_m≠≥d_Êags_t
 * 
p_Êags
, 
uöt16_t
 
ödex
)

70 *
p_Êags
 &~(1U << 
ödex
);

71 
	}
}

81 
__INLINE
 
boﬁ
 
	$sdk_m≠≥d_Êags_gë_by_ödex
(
sdk_m≠≥d_Êags_t
 
Êags
, 
uöt16_t
 
ödex
)

83  ((
Êags
 & (1 << 
ödex
)) != 0);

84 
	}
}

88 
uöt16_t
 
	$sdk_m≠≥d_Êags_fú°_key_ödex_gë
(
sdk_m≠≥d_Êags_t
 
Êags
)

90 
uöt16_t
 
i
 = 0; i < 
SDK_MAPPED_FLAGS_N_KEYS
; i++)

92 i‡(
	`sdk_m≠≥d_Êags_gë_by_ödex
(
Êags
, 
i
))

94  
i
;

97  
SDK_MAPPED_FLAGS_INVALID_INDEX
;

98 
	}
}

101 
	$sdk_m≠≥d_Êags_upd©e_by_key
(
uöt16_t
 * 
p_keys
,

102 
sdk_m≠≥d_Êags_t
 * 
p_Êags
,

103 
uöt16_t
 
key
,

104 
boﬁ
 
vÆue
)

106 
	`sdk_m≠≥d_Êags_bulk_upd©e_by_key
(
p_keys
, 
p_Êags
, 1, 
key
, 
vÆue
);

107 
	}
}

110 
	$sdk_m≠≥d_Êags_bulk_upd©e_by_key
(
uöt16_t
 * 
p_keys
,

111 
sdk_m≠≥d_Êags_t
 * 
p_Êags
,

112 
uöt32_t
 
n_Êag_cﬁÀ˘i⁄s
,

113 
uöt16_t
 
key
,

114 
boﬁ
 
vÆue
)

116 i‡((
p_keys
 !
NULL
Ë&& (
p_Êags
 !NULLË&& (
n_Êag_cﬁÀ˘i⁄s
 > 0))

118 
uöt32_t
 
i
 = 0; i < 
SDK_MAPPED_FLAGS_N_KEYS
; i++)

120 i‡(
p_keys
[
i
] =
key
)

122 
uöt32_t
 
j
 = 0; j < 
n_Êag_cﬁÀ˘i⁄s
; j++)

124 i‡(
vÆue
)

126 
	`sdk_m≠≥d_Êags_£t_by_ödex
(&
p_Êags
[
j
], 
i
);

130 
	`sdk_m≠≥d_Êags_˛ór_by_ödex
(&
p_Êags
[
j
], 
i
);

137 
	}
}

140 
boﬁ
 
	$sdk_m≠≥d_Êags_gë_by_key
(
uöt16_t
 * 
p_keys
, 
sdk_m≠≥d_Êags_t
 
Êags
, uöt16_à
key
)

142 i‡(
p_keys
 !
NULL
)

144 
uöt32_t
 
i
 = 0; i < 
SDK_MAPPED_FLAGS_N_KEYS
; i++)

146 i‡(
p_keys
[
i
] =
key
)

148  
	`sdk_m≠≥d_Êags_gë_by_ödex
(
Êags
, 
i
);

152  
Ál£
;

153 
	}
}

156 
sdk_m≠≥d_Êags_key_li°_t
 
	$sdk_m≠≥d_Êags_key_li°_gë
(
uöt16_t
 * 
p_keys
,

157 
sdk_m≠≥d_Êags_t
 
Êags
)

159 
sdk_m≠≥d_Êags_key_li°_t
 
key_li°
;

160 
key_li°
.
Àn
 = 0;

162 i‡(
p_keys
 !
NULL
)

164 
uöt32_t
 
i
 = 0; i < 
SDK_MAPPED_FLAGS_N_KEYS
; i++)

166 i‡(
	`sdk_m≠≥d_Êags_gë_by_ödex
(
Êags
, 
i
))

168 
key_li°
.
Êag_keys
[key_li°.
Àn
++] = 
p_keys
[
i
];

173  
key_li°
;

174 
	}
}

177 
uöt32_t
 
	$sdk_m≠≥d_Êags_n_Êags_£t
(
sdk_m≠≥d_Êags_t
 
Êags
)

179 
uöt32_t
 
n_Êags_£t
 = 0;

181 
uöt32_t
 
i
 = 0; i < 
SDK_MAPPED_FLAGS_N_KEYS
; i++)

183 i‡(
	`sdk_m≠≥d_Êags_gë_by_ödex
(
Êags
, 
i
))

185 
n_Êags_£t
 += 1;

188  
n_Êags_£t
;

189 
	}
}

	@D:\Private\Programing\MCU\Nordic\ble_app_template\nRF5_SDK_12.3.0_d7731ad\components\softdevice\common\softdevice_handler\softdevice_handler.c

40 
	~"so·devi˚_h™dÀr.h
"

41 
	~<°dlib.h
>

42 
	~<°döt.h
>

43 
	~<°dio.h
>

44 
	~<°rög.h
>

45 
	~"ƒf.h
"

46 
	~"ƒf_as£π.h
"

47 
	~"ƒf_soc.h
"

48 
	~"ƒf_nvic.h
"

49 
	~"sdk_comm⁄.h
"

51 #i‡
NRF_MODULE_ENABLED
(
CLOCK
)

52 
	~"ƒf_drv_˛ock.h
"

54 
	~"≠p_îr‹.h
"

56 #i‡
NRF_MODULE_ENABLED
(
RNG
)

57 
	~"ƒf_drv_∫g.h
"

60 
	#NRF_LOG_MODULE_NAME
 "SDH"

	)

61 
	~"ƒf_log.h
"

62 #i‡
deföed
(
ANT_STACK_SUPPORT_REQD
Ë&& deföed(
BLE_STACK_SUPPORT_REQD
)

63 
	~"™t_öãrÁ˚.h
"

64 #ñi‡
deföed
(
ANT_STACK_SUPPORT_REQD
)

65 
	~"™t_öãrÁ˚.h
"

66 #ñi‡
deföed
(
BLE_STACK_SUPPORT_REQD
)

67 
	~"bÀ.h
"

70 
	#RAM_START_ADDRESS
 0x20000000

	)

71 
	#SOFTDEVICE_EVT_IRQ
 
SD_EVT_IRQn


	)

72 
	#SOFTDEVICE_EVT_IRQH™dÀr
 
SD_EVT_IRQH™dÀr


	)

73 
	#RAM_TOTAL_SIZE
 ((
NRF_FICR
->
INFO
.
RAM
Ë* 1024)

	)

74 
	#RAM_END_ADDRESS
 (
RAM_START_ADDRESS
 + 
RAM_TOTAL_SIZE
)

	)

77 
	#SOFTDEVICE_VS_UUID_COUNT
 0

	)

78 
	#SOFTDEVICE_GATTS_ATTR_TAB_SIZE
 
BLE_GATTS_ATTR_TAB_SIZE_DEFAULT


	)

79 
	#SOFTDEVICE_GATTS_SRV_CHANGED
 0

	)

80 
	#SOFTDEVICE_PERIPH_CONN_COUNT
 1

	)

81 
	#SOFTDEVICE_CENTRAL_CONN_COUNT
 4

	)

82 
	#SOFTDEVICE_CENTRAL_SEC_COUNT
 1

	)

84 
so·devi˚_evt_scheduÀ_func_t
 
	gm_evt_scheduÀ_func
;

86 vﬁ©ûê
boﬁ
 
	gm_so·devi˚_íabÀd
 = 
Ál£
;

87 vﬁ©ûê
boﬁ
 
	gm_su•íded
;

88 #ifde‡
BLE_STACK_SUPPORT_REQD


90 
uöt8_t
 * 
	gmp_bÀ_evt_buf„r
;

91 
uöt16_t
 
	gm_bÀ_evt_buf„r_size
;

92 
bÀ_evt_h™dÀr_t
 
	gm_bÀ_evt_h™dÀr
;

95 #ifde‡
ANT_STACK_SUPPORT_REQD


97 
™t_evt_t
 
	gm_™t_evt_buf„r
;

98 
™t_evt_h™dÀr_t
 
	gm_™t_evt_h™dÀr
;

101 
sys_evt_h™dÀr_t
 
	gm_sys_evt_h™dÀr
;

116 
	$so·devi˚_Áu…_h™dÀr
(
uöt32_t
 
id
, uöt32_à
pc
, uöt32_à
öfo
)

118 
	`≠p_îr‹_Áu…_h™dÀr
(
id
, 
pc
, 
öfo
);

119 
	}
}

121 
	$öã∫_so·devi˚_evíts_execuã
()

123 i‡(!
m_so·devi˚_íabÀd
)

130 #i‡
	`NRF_MODULE_ENABLED
(
CLOCK
)

131 
boﬁ
 
no_m‹e_soc_evts
 = 
Ál£
;

133 
boﬁ
 
no_m‹e_soc_evts
 = (
m_sys_evt_h™dÀr
 =
NULL
);

135 #ifde‡
BLE_STACK_SUPPORT_REQD


136 
boﬁ
 
no_m‹e_bÀ_evts
 = (
m_bÀ_evt_h™dÀr
 =
NULL
);

138 #ifde‡
ANT_STACK_SUPPORT_REQD


139 
boﬁ
 
no_m‹e_™t_evts
 = (
m_™t_evt_h™dÀr
 =
NULL
);

144 
uöt32_t
 
îr_code
;

146 i‡(!
no_m‹e_soc_evts
)

148 i‡(
m_su•íded
)

154 
uöt32_t
 
evt_id
;

157 
îr_code
 = 
	`sd_evt_gë
(&
evt_id
);

159 i‡(
îr_code
 =
NRF_ERROR_NOT_FOUND
)

161 
no_m‹e_soc_evts
 = 
åue
;

163 i‡(
îr_code
 !
NRF_SUCCESS
)

165 
	`APP_ERROR_HANDLER
(
îr_code
);

170 #i‡(
	`NRF_MODULE_ENABLED
(
CLOCK
Ë&& 
	`deföed
(
SOFTDEVICE_PRESENT
))

171 
	`ƒf_drv_˛ock_⁄_soc_evít
(
evt_id
);

172 i‡(
m_sys_evt_h™dÀr
)

174 
	`m_sys_evt_h™dÀr
(
evt_id
);

177 
	`m_sys_evt_h™dÀr
(
evt_id
);

182 #ifde‡
BLE_STACK_SUPPORT_REQD


184 i‡(!
no_m‹e_bÀ_evts
)

186 i‡(
m_su•íded
)

193 
uöt16_t
 
evt_Àn
 = 
m_bÀ_evt_buf„r_size
;

195 
îr_code
 = 
	`sd_bÀ_evt_gë
(
mp_bÀ_evt_buf„r
, &
evt_Àn
);

196 i‡(
îr_code
 =
NRF_ERROR_NOT_FOUND
)

198 
no_m‹e_bÀ_evts
 = 
åue
;

200 i‡(
îr_code
 !
NRF_SUCCESS
)

202 
	`APP_ERROR_HANDLER
(
îr_code
);

207 
	`m_bÀ_evt_h™dÀr
((
bÀ_evt_t
 *)
mp_bÀ_evt_buf„r
);

212 #ifde‡
ANT_STACK_SUPPORT_REQD


214 i‡(!
no_m‹e_™t_evts
)

216 i‡(
m_su•íded
)

223 
îr_code
 = 
	`sd_™t_evít_gë
(&
m_™t_evt_buf„r
.
ch™√l
,

224 &
m_™t_evt_buf„r
.
evít
,

225 
m_™t_evt_buf„r
.
msg
.
evt_buf„r
);

226 i‡(
îr_code
 =
NRF_ERROR_NOT_FOUND
)

228 
no_m‹e_™t_evts
 = 
åue
;

230 i‡(
îr_code
 !
NRF_SUCCESS
)

232 
	`APP_ERROR_HANDLER
(
îr_code
);

237 
	`m_™t_evt_h™dÀr
(&
m_™t_evt_buf„r
);

242 i‡(
no_m‹e_soc_evts
)

245 #i‡
	`deföed
(
ANT_STACK_SUPPORT_REQD
Ë&& deföed(
BLE_STACK_SUPPORT_REQD
)

247 i‡(
no_m‹e_bÀ_evts
 && 
no_m‹e_™t_evts
)

251 #ñi‡
	`deföed
(
BLE_STACK_SUPPORT_REQD
)

253 i‡(
no_m‹e_bÀ_evts
)

257 #ñi‡
	`deföed
(
ANT_STACK_SUPPORT_REQD
)

259 i‡(
no_m‹e_™t_evts
)

270 
	}
}

272 
boﬁ
 
	$so·devi˚_h™dÀr_is_íabÀd
()

274  
m_so·devi˚_íabÀd
;

275 
	}
}

277 
uöt32_t
 
	$so·devi˚_h™dÀr_öô
(
ƒf_˛ock_lf_cfg_t
 * 
p_˛ock_lf_cfg
,

278 * 
p_bÀ_evt_buf„r
,

279 
uöt16_t
 
bÀ_evt_buf„r_size
,

280 
so·devi˚_evt_scheduÀ_func_t
 
evt_scheduÀ_func
)

282 
uöt32_t
 
îr_code
;

285 #i‡
	`deföed
 (
BLE_STACK_SUPPORT_REQD
)

287 i‡(
p_bÀ_evt_buf„r
 =
NULL
)

289  
NRF_ERROR_INVALID_PARAM
;

293 i‡(!
	`is_w‹d_Æig√d
(
p_bÀ_evt_buf„r
))

295  
NRF_ERROR_INVALID_PARAM
;

298 
mp_bÀ_evt_buf„r
 = (
uöt8_t
 *)
p_bÀ_evt_buf„r
;

299 
m_bÀ_evt_buf„r_size
 = 
bÀ_evt_buf„r_size
;

303 
	`UNUSED_PARAMETER
(
p_bÀ_evt_buf„r
);

304 
	`UNUSED_PARAMETER
(
bÀ_evt_buf„r_size
);

307 
m_evt_scheduÀ_func
 = 
evt_scheduÀ_func
;

310 #i‡(
	`NRF_MODULE_ENABLED
(
CLOCK
Ë&& 
	`deföed
(
SOFTDEVICE_PRESENT
))

311 
boﬁ
 
powî_˛ock_i§_íabÀd
 = 
	`ƒf_drv_comm⁄_úq_íabÀ_check
(
POWER_CLOCK_IRQn
);

312 i‡(
powî_˛ock_i§_íabÀd
)

314 
	`NVIC_DißbÀIRQ
(
POWER_CLOCK_IRQn
);

318 #i‡(
	`NRF_MODULE_ENABLED
(
RNG
Ë&& 
	`deföed
(
SOFTDEVICE_PRESENT
))

319 
boﬁ
 
∫g_i§_íabÀd
 = 
	`ƒf_drv_comm⁄_úq_íabÀ_check
(
RNG_IRQn
);

320 i‡(
∫g_i§_íabÀd
)

322 
	`NVIC_DißbÀIRQ
(
RNG_IRQn
);

325 #i‡
	`deföed
(
S212
Ë|| deföed(
S332
)

326 
îr_code
 = 
	`sd_so·devi˚_íabÀ
(
p_˛ock_lf_cfg
, 
so·devi˚_Áu…_h™dÀr
, 
ANT_LICENSE_KEY
);

328 
îr_code
 = 
	`sd_so·devi˚_íabÀ
(
p_˛ock_lf_cfg
, 
so·devi˚_Áu…_h™dÀr
);

331 i‡(
îr_code
 !
NRF_SUCCESS
)

334 #i‡(
	`NRF_MODULE_ENABLED
(
RNG
Ë&& 
	`deföed
(
SOFTDEVICE_PRESENT
))

335 i‡(
∫g_i§_íabÀd
)

337 
	`NVIC_E«bÀIRQ
(
RNG_IRQn
);

340 #i‡(
	`NRF_MODULE_ENABLED
(
CLOCK
Ë&& 
	`deföed
(
SOFTDEVICE_PRESENT
))

341 i‡(
powî_˛ock_i§_íabÀd
)

343 
	`NVIC_E«bÀIRQ
(
POWER_CLOCK_IRQn
);

346  
îr_code
;

349 
m_so·devi˚_íabÀd
 = 
åue
;

350 #i‡(
	`NRF_MODULE_ENABLED
(
CLOCK
Ë&& 
	`deföed
(
SOFTDEVICE_PRESENT
))

351 
	`ƒf_drv_˛ock_⁄_sd_íabÀ
();

355 #ifde‡
SOFTDEVICE_PRESENT


356  
	`sd_nvic_E«bÀIRQ
((
IRQn_Ty≥
)
SOFTDEVICE_EVT_IRQ
);

359 
	`NVIC_E«bÀIRQ
(
SOFTDEVICE_EVT_IRQ
);

360  
NRF_SUCCESS
;

362 
	}
}

365 
uöt32_t
 
	$so·devi˚_h™dÀr_sd_dißbÀ
()

367 
uöt32_t
 
îr_code
 = 
	`sd_so·devi˚_dißbÀ
();

368 i‡(
îr_code
 =
NRF_SUCCESS
)

370 
m_so·devi˚_íabÀd
 = 
Ál£
;

372 #i‡(
	`NRF_MODULE_ENABLED
(
CLOCK
Ë&& 
	`deföed
(
SOFTDEVICE_PRESENT
))

373 
	`ƒf_drv_˛ock_⁄_sd_dißbÀ
();

376 #i‡(
	`NRF_MODULE_ENABLED
(
RNG
Ë&& 
	`deföed
(
SOFTDEVICE_PRESENT
))

377 
	`ƒf_drv_∫g_⁄_sd_dißbÀ
();

381  
îr_code
;

382 
	}
}

384 #ifde‡
BLE_STACK_SUPPORT_REQD


385 
uöt32_t
 
	$so·devi˚_bÀ_evt_h™dÀr_£t
(
bÀ_evt_h™dÀr_t
 
bÀ_evt_h™dÀr
)

387 
	`VERIFY_PARAM_NOT_NULL
(
bÀ_evt_h™dÀr
);

389 
m_bÀ_evt_h™dÀr
 = 
bÀ_evt_h™dÀr
;

391  
NRF_SUCCESS
;

392 
	}
}

396 #ifde‡
ANT_STACK_SUPPORT_REQD


397 
uöt32_t
 
	$so·devi˚_™t_evt_h™dÀr_£t
(
™t_evt_h™dÀr_t
 
™t_evt_h™dÀr
)

399 
	`VERIFY_PARAM_NOT_NULL
(
™t_evt_h™dÀr
);

401 
m_™t_evt_h™dÀr
 = 
™t_evt_h™dÀr
;

403  
NRF_SUCCESS
;

404 
	}
}

408 
uöt32_t
 
	$so·devi˚_sys_evt_h™dÀr_£t
(
sys_evt_h™dÀr_t
 
sys_evt_h™dÀr
)

410 
	`VERIFY_PARAM_NOT_NULL
(
sys_evt_h™dÀr
);

412 
m_sys_evt_h™dÀr
 = 
sys_evt_h™dÀr
;

414  
NRF_SUCCESS
;

415 
	}
}

422 
	$SOFTDEVICE_EVT_IRQH™dÀr
()

424 i‡(
m_evt_scheduÀ_func
 !
NULL
)

426 
uöt32_t
 
îr_code
 = 
	`m_evt_scheduÀ_func
();

427 
	`APP_ERROR_CHECK
(
îr_code
);

431 
	`öã∫_so·devi˚_evíts_execuã
();

433 
	}
}

435 
	$so·devi˚_h™dÀr_su•íd
()

437 #ifde‡
SOFTDEVICE_PRESENT


438 
ªt_code_t
 
îr_code
 = 
	`sd_nvic_DißbÀIRQ
((
IRQn_Ty≥
)
SOFTDEVICE_EVT_IRQ
);

439 
	`APP_ERROR_CHECK
(
îr_code
);

441 
	`NVIC_DißbÀIRQ
(
SOFTDEVICE_EVT_IRQ
);

443 
m_su•íded
 = 
åue
;

445 
	}
}

447 
	$so·devi˚_h™dÀr_ªsume
()

449 i‡(!
m_su•íded
) ;

450 
m_su•íded
 = 
Ál£
;

452 #ifde‡
SOFTDEVICE_PRESENT


453 
ªt_code_t
 
îr_code
;

457 
îr_code
 = 
	`sd_nvic_SëPídögIRQ
((
IRQn_Ty≥
)
SOFTDEVICE_EVT_IRQ
);

458 
	`APP_ERROR_CHECK
(
îr_code
);

459 
îr_code
 = 
	`sd_nvic_E«bÀIRQ
((
IRQn_Ty≥
)
SOFTDEVICE_EVT_IRQ
);

460 
	`APP_ERROR_CHECK
(
îr_code
);

462 
	`NVIC_SëPídögIRQ
((
IRQn_Ty≥
)
SOFTDEVICE_EVT_IRQ
);

463 
	`NVIC_E«bÀIRQ
(
SOFTDEVICE_EVT_IRQ
);

467 
	}
}

469 
boﬁ
 
	$so·devi˚_h™dÀr_is_su•íded
()

471  
m_su•íded
;

472 
	}
}

474 #i‡
deföed
(
BLE_STACK_SUPPORT_REQD
)

475 
uöt32_t
 
	$so·devi˚_íabÀ_gë_deÁu…_c⁄fig
(
uöt8_t
 
˚¡øl_löks_cou¡
,

476 
uöt8_t
 
≥rùh_löks_cou¡
,

477 
bÀ_íabÀ_∑øms_t
 * 
p_bÀ_íabÀ_∑øms
)

479 
	`mem£t
(
p_bÀ_íabÀ_∑øms
, 0, (
bÀ_íabÀ_∑øms_t
));

480 
p_bÀ_íabÀ_∑øms
->
comm⁄_íabÀ_∑øms
.
vs_uuid_cou¡
 = 1;

481 
p_bÀ_íabÀ_∑øms
->
g©ts_íabÀ_∑øms
.
©å_èb_size
 = 
SOFTDEVICE_GATTS_ATTR_TAB_SIZE
;

482 
p_bÀ_íabÀ_∑øms
->
g©ts_íabÀ_∑øms
.
£rvi˚_ch™ged
 = 
SOFTDEVICE_GATTS_SRV_CHANGED
;

483 
p_bÀ_íabÀ_∑øms
->
g≠_íabÀ_∑øms
.
≥rùh_c⁄n_cou¡
 = 
≥rùh_löks_cou¡
;

484 
p_bÀ_íabÀ_∑øms
->
g≠_íabÀ_∑øms
.
˚¡øl_c⁄n_cou¡
 = 
˚¡øl_löks_cou¡
;

485 i‡(
p_bÀ_íabÀ_∑øms
->
g≠_íabÀ_∑øms
.
˚¡øl_c⁄n_cou¡
 != 0)

487 
p_bÀ_íabÀ_∑øms
->
g≠_íabÀ_∑øms
.
˚¡øl_£c_cou¡
 = 
SOFTDEVICE_CENTRAL_SEC_COUNT
;

490  
NRF_SUCCESS
;

491 
	}
}

494 
ölöe
 
uöt32_t
 
	$øm_tŸÆ_size_gë
()

496 #ifde‡
NRF51


497 
uöt32_t
 
size_øm_blocks
 = (uöt32_t)
NRF_FICR
->
SIZERAMBLOCKS
;

498 
uöt32_t
 
tŸÆ_øm_size
 = 
size_øm_blocks
;

499 
tŸÆ_øm_size
 =ÅŸÆ_øm_sizê* (
NRF_FICR
->
NUMRAMBLOCK
);

500  
tŸÆ_øm_size
;

501 #ñi‡(
	`deföed
 (
NRF52
Ë|| deföed(
NRF52840_XXAA
))

502  
RAM_TOTAL_SIZE
;

504 
	}
}

511 
ölöe
 
uöt32_t
 
	$øm_íd_addªss_gë
()

513 
uöt32_t
 
øm_íd_addªss
 = (uöt32_t)
RAM_START_ADDRESS
;

514 
øm_íd_addªss
+
	`øm_tŸÆ_size_gë
();

515  
øm_íd_addªss
;

516 
	}
}

520 
uöt32_t
 
	$sd_check_øm_°¨t
(
uöt32_t
 
sd_ªq_øm_°¨t
)

522 #i‡(
	`deföed
(
S130
Ë|| deföed(
S132
Ë|| deföed(
S332
))

523 #i‡
	`deföed
 ( 
__CC_ARM
 )

524 
uöt32_t
 
Image$$RW_IRAM1$$Ba£
;

525 c⁄° vﬁ©ûê
uöt32_t
 
øm_°¨t
 = (uöt32_tË&
Image$$RW_IRAM1$$Ba£
;

526 #ñi‡
	`deföed
 ( 
__ICCARM__
 )

527 
uöt32_t
 
__ICFEDIT_ªgi⁄_RAM_°¨t__
;

528 vﬁ©ûê
uöt32_t
 
øm_°¨t
 = (uöt32_tË&
__ICFEDIT_ªgi⁄_RAM_°¨t__
;

529 #ñi‡
	`deföed
 ( 
__GNUC__
 )

530 
uöt32_t
 
__d©a_°¨t__
;

531 vﬁ©ûê
uöt32_t
 
øm_°¨t
 = (uöt32_tË&
__d©a_°¨t__
;

533 i‡(
øm_°¨t
 !
sd_ªq_øm_°¨t
)

535 
	`NRF_LOG_WARNING
("RAM START ADDR 0x%x should beádjustedÅo 0x%x\r\n",

536 
øm_°¨t
,

537 
sd_ªq_øm_°¨t
);

538 
	`NRF_LOG_WARNING
("RAM SIZE should beádjustedÅo 0x%x \r\n",

539 
	`øm_íd_addªss_gë
(Ë- 
sd_ªq_øm_°¨t
);

540  
NRF_SUCCESS
;

543  
NRF_SUCCESS
;

544 
	}
}

546 
uöt32_t
 
	$so·devi˚_íabÀ
(
bÀ_íabÀ_∑øms_t
 * 
p_bÀ_íabÀ_∑øms
)

548 #i‡(
	`deföed
(
S130
Ë|| deföed(
S132
Ë|| deföed(
S332
))

549 
uöt32_t
 
îr_code
;

550 
uöt32_t
 
≠p_øm_ba£
;

552 #i‡
	`deföed
 ( 
__CC_ARM
 )

553 
uöt32_t
 
Image$$RW_IRAM1$$Ba£
;

554 c⁄° vﬁ©ûê
uöt32_t
 
øm_°¨t
 = (uöt32_tË&
Image$$RW_IRAM1$$Ba£
;

555 #ñi‡
	`deföed
 ( 
__ICCARM__
 )

556 
uöt32_t
 
__ICFEDIT_ªgi⁄_RAM_°¨t__
;

557 vﬁ©ûê
uöt32_t
 
øm_°¨t
 = (uöt32_tË&
__ICFEDIT_ªgi⁄_RAM_°¨t__
;

558 #ñi‡
	`deföed
 ( 
__GNUC__
 )

559 
uöt32_t
 
__d©a_°¨t__
;

560 vﬁ©ûê
uöt32_t
 
øm_°¨t
 = (uöt32_tË&
__d©a_°¨t__
;

563 
≠p_øm_ba£
 = 
øm_°¨t
;

564 
	`NRF_LOG_DEBUG
("sd_ble_enable: RAM startát 0x%x\r\n",

565 
≠p_øm_ba£
);

566 
îr_code
 = 
	`sd_bÀ_íabÀ
(
p_bÀ_íabÀ_∑øms
, &
≠p_øm_ba£
);

568 i‡(
≠p_øm_ba£
 !
øm_°¨t
)

570 
	`NRF_LOG_WARNING
("sd_ble_enable: RAM start should beádjustedÅo 0x%x\r\n",

571 
≠p_øm_ba£
);

572 
	`NRF_LOG_WARNING
("RAM size should beádjustedÅo 0x%x \r\n",

573 
	`øm_íd_addªss_gë
(Ë- 
≠p_øm_ba£
);

575 i‡(
îr_code
 !
NRF_SUCCESS
)

577 
	`NRF_LOG_ERROR
("sd_bÀ_íabÀ:Éº‹ 0x%x\r\n", 
îr_code
);

579  
îr_code
;

581  
NRF_SUCCESS
;

584 
	}
}

	@D:\Private\Programing\MCU\Nordic\ble_app_template\nRF5_SDK_12.3.0_d7731ad\components\toolchain\gcc\gcc_startup_nrf51.S

28 .
sy¡ax
 
	gunifõd


29 .
¨ch
 
	g¨mv6
-
	gm


31 #ifde‡
__STARTUP_CONFIG


32 
	~"°¨tup_c⁄fig.h
"

35 .
	g£˘i⁄
 .
	g°ack


36 .
	gÆign
 3

37 #i‡
deföed
(
__STARTUP_CONFIG
)

38 .
equ
 
	gSèck_Size
, 
	g__STARTUP_CONFIG_STACK_SIZE


39 #ñi‡
deföed
(
__STACK_SIZE
)

40 .
equ
 
	gSèck_Size
, 
	g__STACK_SIZE


42 .
equ
 
	gSèck_Size
, 2048

44 .
globl
 
	g__SèckT›


45 .
globl
 
__SèckLimô


46 
	g__SèckLimô
:

47 .
•a˚
 
Sèck_Size


48 .
size
 
__SèckLimô
, . - __StackLimit

49 
	g__SèckT›
:

50 .
size
 
__SèckT›
, . - 
	g__SèckT›


52 .
	g£˘i⁄
 .
	ghóp


53 .
	gÆign
 3

54 #i‡
deföed
(
__STARTUP_CONFIG
)

55 .
equ
 
	gHóp_Size
, 
	g__STARTUP_CONFIG_HEAP_SIZE


56 #ñi‡
deföed
(
__HEAP_SIZE
)

57 .
equ
 
	gHóp_Size
, 
	g__HEAP_SIZE


59 .
equ
 
	gHóp_Size
, 0

61 .
globl
 
	g__HópBa£


62 .
globl
 
__HópLimô


63 
	g__HópBa£
:

64 .
Hóp_Size


65 .
•a˚
 
Hóp_Size


66 .
ídif


67 .
size
 
__HópBa£
, . - __HeapBase

68 
	g__HópLimô
:

69 .
size
 
__HópLimô
, . - 
	g__HópLimô


71 .
	g£˘i⁄
 .
	gi§_ve˘‹


72 .
	gÆign
 2

73 .
globl
 
__i§_ve˘‹


74 
	g__i§_ve˘‹
:

75 .
__SèckT›


76 .
Re£t_H™dÀr


77 .
NMI_H™dÀr


78 .
H¨dFau…_H™dÀr


86 .
SVC_H™dÀr


89 .
PídSV_H™dÀr


90 .
SysTick_H™dÀr


93 .
POWER_CLOCK_IRQH™dÀr


94 .
RADIO_IRQH™dÀr


95 .
UART0_IRQH™dÀr


96 .
SPI0_TWI0_IRQH™dÀr


97 .
SPI1_TWI1_IRQH™dÀr


99 .
GPIOTE_IRQH™dÀr


100 .
ADC_IRQH™dÀr


101 .
TIMER0_IRQH™dÀr


102 .
TIMER1_IRQH™dÀr


103 .
TIMER2_IRQH™dÀr


104 .
RTC0_IRQH™dÀr


105 .
TEMP_IRQH™dÀr


106 .
RNG_IRQH™dÀr


107 .
ECB_IRQH™dÀr


108 .
CCM_AAR_IRQH™dÀr


109 .
WDT_IRQH™dÀr


110 .
RTC1_IRQH™dÀr


111 .
QDEC_IRQH™dÀr


112 .
LPCOMP_IRQH™dÀr


113 .
SWI0_IRQH™dÀr


114 .
SWI1_IRQH™dÀr


115 .
SWI2_IRQH™dÀr


116 .
SWI3_IRQH™dÀr


117 .
SWI4_IRQH™dÀr


118 .
SWI5_IRQH™dÀr


126 .
size
 
__i§_ve˘‹
, . - 
	g__i§_ve˘‹


130 .
equ
 
	gNRF_POWER_RAMON_ADDRESS
, 0x40000524

131 .
equ
 
	gNRF_POWER_RAMONB_ADDRESS
, 0x40000554

132 .
equ
 
	gNRF_POWER_RAMONx_RAMxON_ONMODE_Msk
, 0x3

134 .
	gãxt


135 .
	gthumb


136 .
	gthumb_func


137 .
	gÆign
 1

138 .
globl
 
	gRe£t_H™dÀr


139 .
ty≥
 
	gRe£t_H™dÀr
, %
fun˘i⁄


140 
	gRe£t_H™dÀr
:

142 
MOVS
 
R1
, #NRF_POWER_RAMONx_RAMxON_ONMODE_Msk

144 
LDR
 
	gR0
, =
NRF_POWER_RAMON_ADDRESS


145 
LDR
 
R2
, [
R0
]

146 
ORRS
 
	gR2
, 
R1


147 
STR
 
	gR2
, [
R0
]

149 
LDR
 
	gR0
, =
NRF_POWER_RAMONB_ADDRESS


150 
LDR
 
R2
, [
R0
]

151 
ORRS
 
	gR2
, 
R1


152 
STR
 
	gR2
, [
R0
]

163 
ldr
 
	gr1
, =
__ëext


164 
ldr
 
r2
, =
__d©a_°¨t__


165 
ldr
 
r3
, =
__bss_°¨t__


167 
subs
 
r3
, 
r2


168 
	gbÀ
 .
	gL_lo›1_d⁄e


170 .
	gL_lo›1
:

171 
subs
 
r3
, #4

172 
ldr
 
	gr0
, [
r1
,
r3
]

173 
°r
 
	gr0
, [
r2
,
r3
]

174 
	gbgt
 .
	gL_lo›1


176 .
	gL_lo›1_d⁄e
:

188 #ifde‡
__STARTUP_CLEAR_BSS


189 
ldr
 
r1
, =
__bss_°¨t__


190 
ldr
 
r2
, =
__bss_íd__


192 
movs
 
r0
, 0

194 
subs
 
	gr2
, 
r1


195 
	gbÀ
 .
	gL_lo›3_d⁄e


197 .
	gL_lo›3
:

198 
subs
 
r2
, #4

199 
°r
 
	gr0
, [
r1
, 
r2
]

200 
	gbgt
 .
	gL_lo›3


202 .
	gL_lo›3_d⁄e
:

206 
bl
 
Sy°emInô


211 #i‚de‡
__START


212 
	#__START
 
_°¨t


	)

214 
bl
 
__START


216 .
poﬁ


217 .
size
 
Re£t_H™dÀr
,.-
	gRe£t_H™dÀr


219 .
	g£˘i⁄
 ".text"

224 .
wók
 
	gNMI_H™dÀr


225 .
ty≥
 
	gNMI_H™dÀr
, %
fun˘i⁄


226 
	gNMI_H™dÀr
:

227 
b
 .

228 .
size
 
NMI_H™dÀr
, . - 
	gNMI_H™dÀr


231 .
wók
 
	gH¨dFau…_H™dÀr


232 .
ty≥
 
	gH¨dFau…_H™dÀr
, %
fun˘i⁄


233 
	gH¨dFau…_H™dÀr
:

234 
b
 .

235 .
size
 
H¨dFau…_H™dÀr
, . - 
	gH¨dFau…_H™dÀr


238 .
wók
 
	gSVC_H™dÀr


239 .
ty≥
 
	gSVC_H™dÀr
, %
fun˘i⁄


240 
	gSVC_H™dÀr
:

241 
b
 .

242 .
size
 
SVC_H™dÀr
, . - 
	gSVC_H™dÀr


245 .
wók
 
	gPídSV_H™dÀr


246 .
ty≥
 
	gPídSV_H™dÀr
, %
fun˘i⁄


247 
	gPídSV_H™dÀr
:

248 
b
 .

249 .
size
 
PídSV_H™dÀr
, . - 
	gPídSV_H™dÀr


252 .
wók
 
	gSysTick_H™dÀr


253 .
ty≥
 
	gSysTick_H™dÀr
, %
fun˘i⁄


254 
	gSysTick_H™dÀr
:

255 
b
 .

256 .
size
 
SysTick_H™dÀr
, . - 
	gSysTick_H™dÀr


261 .
globl
 
	gDeÁu…_H™dÀr


262 .
ty≥
 
	gDeÁu…_H™dÀr
, %
fun˘i⁄


263 
	gDeÁu…_H™dÀr
:

264 
b
 .

265 .
size
 
DeÁu…_H™dÀr
, . - 
	gDeÁu…_H™dÀr


267 .
ma¸o
 
IRQ
 
	gh™dÀr


268 .
	gwók
 \
	gh™dÀr


269 .
	g£t
 \
	gh™dÀr
, 
	gDeÁu…_H™dÀr


270 .
ídm


272 
IRQ
 
POWER_CLOCK_IRQH™dÀr


273 
IRQ
 
RADIO_IRQH™dÀr


274 
IRQ
 
UART0_IRQH™dÀr


275 
IRQ
 
SPI0_TWI0_IRQH™dÀr


276 
IRQ
 
SPI1_TWI1_IRQH™dÀr


277 
IRQ
 
GPIOTE_IRQH™dÀr


278 
IRQ
 
ADC_IRQH™dÀr


279 
IRQ
 
TIMER0_IRQH™dÀr


280 
IRQ
 
TIMER1_IRQH™dÀr


281 
IRQ
 
TIMER2_IRQH™dÀr


282 
IRQ
 
RTC0_IRQH™dÀr


283 
IRQ
 
TEMP_IRQH™dÀr


284 
IRQ
 
RNG_IRQH™dÀr


285 
IRQ
 
ECB_IRQH™dÀr


286 
IRQ
 
CCM_AAR_IRQH™dÀr


287 
IRQ
 
WDT_IRQH™dÀr


288 
IRQ
 
RTC1_IRQH™dÀr


289 
IRQ
 
QDEC_IRQH™dÀr


290 
IRQ
 
LPCOMP_IRQH™dÀr


291 
IRQ
 
SWI0_IRQH™dÀr


292 
IRQ
 
SWI1_IRQH™dÀr


293 
IRQ
 
SWI2_IRQH™dÀr


294 
IRQ
 
SWI3_IRQH™dÀr


295 
IRQ
 
SWI4_IRQH™dÀr


296 
IRQ
 
	gSWI5_IRQH™dÀr


298 .
	gíd


	@D:\Private\Programing\MCU\Nordic\ble_app_template\nRF5_SDK_12.3.0_d7731ad\components\toolchain\system_nrf51.c

34 
	~<°döt.h
>

35 
	~<°dboﬁ.h
>

36 
	~"ƒf.h
"

37 
	~"sy°em_ƒf51.h
"

42 
	#__SYSTEM_CLOCK
 (16000000ULË

	)

44 
boﬁ
 
is_m™uÆ_≥rùhîÆ_£tup_√eded
();

45 
boﬁ
 
is_dißbÀd_ö_debug_√eded
();

46 
boﬁ
 
is_≥rùhîÆ_domaö_£tup_√eded
();

49 #i‡
deföed
 ( 
__CC_ARM
 )

50 
uöt32_t
 
Sy°emC‹eClock
 
__©åibuã__
((
u£d
)Ë
__SYSTEM_CLOCK
;

51 #ñi‡
deföed
 ( 
__ICCARM__
 )

52 
__roŸ
 
uöt32_t
 
	gSy°emC‹eClock
 = 
__SYSTEM_CLOCK
;

53 #ñi‡
deföed
 ( 
__GNUC__
 )

54 
uöt32_t
 
Sy°emC‹eClock
 
__©åibuã__
((
u£d
)Ë
__SYSTEM_CLOCK
;

57 
	$Sy°emC‹eClockUpd©e
()

59 
Sy°emC‹eClock
 = 
__SYSTEM_CLOCK
;

60 
	}
}

62 
	$Sy°emInô
()

72 i‡(
	`is_m™uÆ_≥rùhîÆ_£tup_√eded
())

74 *(
uöt32_t
 volatile *)0x40000504 = 0xC007FFDF;

75 *(
uöt32_t
 volatile *)0x40006C18 = 0x00008000;

81 i‡(
	`is_dißbÀd_ö_debug_√eded
())

83 
NRF_MPU
->
DISABLEINDEBUG
 = 
MPU_DISABLEINDEBUG_DISABLEINDEBUG_DißbÀd
 << 
MPU_DISABLEINDEBUG_DISABLEINDEBUG_Pos
;

89 i‡(
	`is_≥rùhîÆ_domaö_£tup_√eded
()){

90 i‡(*(
uöt32_t
 volatile *)0x4006EC00 != 1){

91 *(
uöt32_t
 volatile *)0x4006EC00 = 0x9375;

92 *(
uöt32_t
 volatile *)0x4006EC00 != 1){

95 *(
uöt32_t
 volatile *)0x4006EC14 = 0xC0;

97 
	}
}

100 
boﬁ
 
	$is_m™uÆ_≥rùhîÆ_£tup_√eded
()

102 i‡((((*(
uöt32_t
 *)0xF0000FE0) & 0x000000FF) == 0x1) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0))

104 i‡((((*(
uöt32_t
 *)0xF0000FE8) & 0x000000F0) == 0x00) && (((*(uint32_t *)0xF0000FEC) & 0x000000F0) == 0x0))

106  
åue
;

108 i‡((((*(
uöt32_t
 *)0xF0000FE8) & 0x000000F0) == 0x10) && (((*(uint32_t *)0xF0000FEC) & 0x000000F0) == 0x0))

110  
åue
;

112 i‡((((*(
uöt32_t
 *)0xF0000FE8) & 0x000000F0) == 0x30) && (((*(uint32_t *)0xF0000FEC) & 0x000000F0) == 0x0))

114  
åue
;

118  
Ál£
;

119 
	}
}

121 
boﬁ
 
	$is_dißbÀd_ö_debug_√eded
()

123 i‡((((*(
uöt32_t
 *)0xF0000FE0) & 0x000000FF) == 0x1) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0))

125 i‡((((*(
uöt32_t
 *)0xF0000FE8) & 0x000000F0) == 0x40) && (((*(uint32_t *)0xF0000FEC) & 0x000000F0) == 0x0))

127  
åue
;

131  
Ál£
;

132 
	}
}

134 
boﬁ
 
	$is_≥rùhîÆ_domaö_£tup_√eded
()

136 i‡((((*(
uöt32_t
 *)0xF0000FE0) & 0x000000FF) == 0x1) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0))

138 i‡((((*(
uöt32_t
 *)0xF0000FE8) & 0x000000F0) == 0xA0) && (((*(uint32_t *)0xF0000FEC) & 0x000000F0) == 0x0))

140  
åue
;

142 i‡((((*(
uöt32_t
 *)0xF0000FE8) & 0x000000F0) == 0xD0) && (((*(uint32_t *)0xF0000FEC) & 0x000000F0) == 0x0))

144  
åue
;

148  
Ál£
;

149 
	}
}

	@D:\Private\Programing\MCU\Nordic\ble_app_template\nRF5_SDK_12.3.0_d7731ad\external\segger_rtt\RTT_Syscalls_GCC.c

47 #i‡
deföed
(
NRF_LOG_USES_RTT
) && NRF_LOG_USES_RTT == 1

48 
	~<°dlib.h
>

49 
	~"SEGGER_RTT.h
"

57 
_wrôe
(
fûe
, *
±r
, 
Àn
);

58 
_wrôe_r
(
_ªít
 *
r
, 
fûe
, *
±r
, 
Àn
);

77 
	$_wrôe
(
fûe
, *
±r
, 
Àn
) {

78 (Ë
fûe
;

79 
	`SEGGER_RTT_Wrôe
(0, 
±r
, 
Àn
);

80  
Àn
;

81 
	}
}

93 
	$_wrôe_r
(
_ªít
 *
r
, 
fûe
, *
±r
, 
Àn
) {

94 (Ë
fûe
;

95 (Ë
r
;

96 
	`SEGGER_RTT_Wrôe
(0, 
±r
, 
Àn
);

97  
Àn
;

98 
	}
}

	@D:\Private\Programing\MCU\Nordic\ble_app_template\nRF5_SDK_12.3.0_d7731ad\external\segger_rtt\SEGGER_RTT.c

56 
	~"SEGGER_RTT.h
"

58 
	~<°rög.h
>

67 #i‚de‡ 
BUFFER_SIZE_UP


68 
	#BUFFER_SIZE_UP
 1024

70 

	)

71 #i‚de‡ 
BUFFER_SIZE_DOWN


72 
	#BUFFER_SIZE_DOWN
 16

74 

	)

75 #i‚de‡ 
SEGGER_RTT_MAX_NUM_UP_BUFFERS


76 
	#SEGGER_RTT_MAX_NUM_UP_BUFFERS
 2

78 

	)

79 #i‚de‡ 
SEGGER_RTT_MAX_NUM_DOWN_BUFFERS


80 
	#SEGGER_RTT_MAX_NUM_DOWN_BUFFERS
 2

82 

	)

83 #i‚de‡ 
SEGGER_RTT_MODE_DEFAULT


84 
	#SEGGER_RTT_MODE_DEFAULT
 
SEGGER_RTT_MODE_NO_BLOCK_SKIP


	)

87 #i‚de‡ 
SEGGER_RTT_LOCK


88 
	#SEGGER_RTT_LOCK
(
SavedSèã
)

	)

91 #i‚de‡ 
SEGGER_RTT_UNLOCK


92 
	#SEGGER_RTT_UNLOCK
(
SavedSèã
)

	)

95 #i‚de‡ 
STRLEN


96 
	#STRLEN
(
a
Ë
	`°æí
(◊))

	)

99 #i‚de‡ 
MEMCPY


100 
	#MEMCPY
(
pDe°
, 
pSrc
, 
NumByãs
Ë
	`mem˝y
(’De°), (pSrc), (NumByãs))

	)

103 #i‚de‡ 
MIN


104 
	#MIN
(
a
, 
b
Ë((◊Ë< (b)Ë? (aË: (b))

	)

107 #i‚de‡ 
MAX


108 
	#MAX
(
a
, 
b
Ë((◊Ë> (b)Ë? (aË: (b))

	)

113 #i‚de‡
NULL


114 
	#NULL
 0

	)

124 
	g_aTîmöÆId
[16] = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };

135 
	g_acUpBuf„r
 [
BUFFER_SIZE_UP
];

136 
	g_acDownBuf„r
[
BUFFER_SIZE_DOWN
];

140 
SEGGER_RTT_CB
 
	g_SEGGER_RTT
;

142 
	g_A˘iveTîmöÆ
;

160 
	#INIT
() do { \

161 i‡(
_SEGGER_RTT
.
acID
[0] ='\0'Ë{ 
	`_DoInô
(); } \

162 } 0)

	)

163 
	$_DoInô
() {

164 
SEGGER_RTT_CB
* 
p
;

168 
p
 = &
_SEGGER_RTT
;

169 
p
->
MaxNumUpBuf„rs
 = 
SEGGER_RTT_MAX_NUM_UP_BUFFERS
;

170 
p
->
MaxNumDownBuf„rs
 = 
SEGGER_RTT_MAX_NUM_DOWN_BUFFERS
;

174 
p
->
aUp
[0].
sName
 = "Terminal";

175 
p
->
aUp
[0].
pBuf„r
 = 
_acUpBuf„r
;

176 
p
->
aUp
[0].
SizeOfBuf„r
 = (
_acUpBuf„r
);

177 
p
->
aUp
[0].
RdOff
 = 0u;

178 
p
->
aUp
[0].
WrOff
 = 0u;

179 
p
->
aUp
[0].
Fœgs
 = 
SEGGER_RTT_MODE_DEFAULT
;

183 
p
->
aDown
[0].
sName
 = "Terminal";

184 
p
->
aDown
[0].
pBuf„r
 = 
_acDownBuf„r
;

185 
p
->
aDown
[0].
SizeOfBuf„r
 = (
_acDownBuf„r
);

186 
p
->
aDown
[0].
RdOff
 = 0u;

187 
p
->
aDown
[0].
WrOff
 = 0u;

188 
p
->
aDown
[0].
Fœgs
 = 
SEGGER_RTT_MODE_DEFAULT
;

194 
	`°r˝y
(&
p
->
acID
[7], "RTT");

195 
	`°r˝y
(&
p
->
acID
[0], "SEGGER");

196 
p
->
acID
[6] = ' ';

197 
	}
}

218 
	$_WrôeBlockög
(
SEGGER_RTT_RING_BUFFER
 *
pRög
, c⁄° * 
pBuf„r
, 
NumByãs
) {

219 
NumByãsToWrôe
;

220 
NumByãsWrôãn
;

221 
RdOff
;

222 
WrOff
;

226 
NumByãsWrôãn
 = 0u;

227 
WrOff
 = 
pRög
->WrOff;

229 
RdOff
 = 
pRög
->RdOff;

230 i‡(
RdOff
 > 
WrOff
) {

231 
NumByãsToWrôe
 = 
RdOff
 - 
WrOff
 - 1u;

233 
NumByãsToWrôe
 = 
pRög
->
SizeOfBuf„r
 - (
WrOff
 - 
RdOff
 + 1u);

235 
NumByãsToWrôe
 = 
	`MIN
(NumByãsToWrôe, (
pRög
->
SizeOfBuf„r
 - 
WrOff
));

236 
NumByãsToWrôe
 = 
	`MIN
(NumByãsToWrôe, 
NumByãs
);

237 
	`mem˝y
(
pRög
->
pBuf„r
 + 
WrOff
,ÖBuf„r, 
NumByãsToWrôe
);

238 
NumByãsWrôãn
 +
NumByãsToWrôe
;

239 
pBuf„r
 +
NumByãsToWrôe
;

240 
NumByãs
 -
NumByãsToWrôe
;

241 
WrOff
 +
NumByãsToWrôe
;

242 i‡(
WrOff
 =
pRög
->
SizeOfBuf„r
) {

243 
WrOff
 = 0u;

245 
pRög
->
WrOff
 = WrOff;

246 } 
NumByãs
);

248  
NumByãsWrôãn
;

249 
	}
}

269 
	$_WrôeNoCheck
(
SEGGER_RTT_RING_BUFFER
 *
pRög
, c⁄° * 
pD©a
, 
NumByãs
) {

270 
NumByãsAtOn˚
;

271 
WrOff
;

272 
Rem
;

274 
WrOff
 = 
pRög
->WrOff;

275 
Rem
 = 
pRög
->
SizeOfBuf„r
 - 
WrOff
;

276 i‡(
Rem
 > 
NumByãs
) {

280 
	`mem˝y
(
pRög
->
pBuf„r
 + 
WrOff
, 
pD©a
, 
NumByãs
);

281 
pRög
->
WrOff
 = WrOf‡+ 
NumByãs
;

286 
NumByãsAtOn˚
 = 
Rem
;

287 
	`mem˝y
(
pRög
->
pBuf„r
 + 
WrOff
, 
pD©a
, 
NumByãsAtOn˚
);

288 
NumByãsAtOn˚
 = 
NumByãs
 - 
Rem
;

289 
	`mem˝y
(
pRög
->
pBuf„r
, 
pD©a
 + 
Rem
, 
NumByãsAtOn˚
);

290 
pRög
->
WrOff
 = 
NumByãsAtOn˚
;

292 
	}
}

307 
	$_Po°TîmöÆSwôch
(
SEGGER_RTT_RING_BUFFER
 *
pRög
, 
TîmöÆId
) {

308 
ac
[2];

310 
ac
[0] = 0xFFu;

311 
ac
[1] = 
_aTîmöÆId
[()
TîmöÆId
];

312 
	`_WrôeBlockög
(
pRög
, 
ac
, 2u);

313 
	}
}

329 
	$_GëAvaûWrôeS∑˚
(
SEGGER_RTT_RING_BUFFER
 *
pRög
) {

330 
RdOff
;

331 
WrOff
;

332 
r
;

337 
RdOff
 = 
pRög
->RdOff;

338 
WrOff
 = 
pRög
->WrOff;

339 i‡(
RdOff
 <
WrOff
) {

340 
r
 = 
pRög
->
SizeOfBuf„r
 - 1u - 
WrOff
 + 
RdOff
;

342 
r
 = 
RdOff
 - 
WrOff
 - 1u;

344  
r
;

345 
	}
}

370 
	$SEGGER_RTT_RódNoLock
(
Buf„rIndex
, * 
pD©a
, 
Buf„rSize
) {

371 
NumByãsRem
;

372 
NumByãsRód
;

373 
RdOff
;

374 
WrOff
;

375 * 
pBuf„r
;

376 
SEGGER_RTT_RING_BUFFER
* 
pRög
;

378 
	`INIT
();

379 
pRög
 = &
_SEGGER_RTT
.
aDown
[
Buf„rIndex
];

380 
pBuf„r
 = (*)
pD©a
;

381 
RdOff
 = 
pRög
->RdOff;

382 
WrOff
 = 
pRög
->WrOff;

383 
NumByãsRód
 = 0u;

387 i‡(
RdOff
 > 
WrOff
) {

388 
NumByãsRem
 = 
pRög
->
SizeOfBuf„r
 - 
RdOff
;

389 
NumByãsRem
 = 
	`MIN
(NumByãsRem, 
Buf„rSize
);

390 
	`mem˝y
(
pBuf„r
, 
pRög
->pBuf„∏+ 
RdOff
, 
NumByãsRem
);

391 
NumByãsRód
 +
NumByãsRem
;

392 
pBuf„r
 +
NumByãsRem
;

393 
Buf„rSize
 -
NumByãsRem
;

394 
RdOff
 +
NumByãsRem
;

398 i‡(
RdOff
 =
pRög
->
SizeOfBuf„r
) {

399 
RdOff
 = 0u;

405 
NumByãsRem
 = 
WrOff
 - 
RdOff
;

406 
NumByãsRem
 = 
	`MIN
(NumByãsRem, 
Buf„rSize
);

407 i‡(
NumByãsRem
 > 0u) {

408 
	`mem˝y
(
pBuf„r
, 
pRög
->pBuf„∏+ 
RdOff
, 
NumByãsRem
);

409 
NumByãsRód
 +
NumByãsRem
;

410 
pBuf„r
 +
NumByãsRem
;

411 
Buf„rSize
 -
NumByãsRem
;

412 
RdOff
 +
NumByãsRem
;

414 i‡(
NumByãsRód
) {

415 
pRög
->
RdOff
 = RdOff;

418  
NumByãsRód
;

419 
	}
}

437 
	$SEGGER_RTT_Ród
(
Buf„rIndex
, * 
pBuf„r
, 
Buf„rSize
) {

438 
NumByãsRód
;

439 vﬁ©ûê
SavedSèã
;

441 
	`SEGGER_RTT_LOCK
(
SavedSèã
);

445 
NumByãsRód
 = 
	`SEGGER_RTT_RódNoLock
(
Buf„rIndex
, 
pBuf„r
, 
Buf„rSize
);

449 
	`SEGGER_RTT_UNLOCK
(
SavedSèã
);

451  
NumByãsRód
;

452 
	}
}

478 
	$SEGGER_RTT_WrôeSkùNoLock
(
Buf„rIndex
, c⁄° * 
pBuf„r
, 
NumByãs
) {

479 c⁄° * 
pD©a
;

480 
SEGGER_RTT_RING_BUFFER
* 
pRög
;

481 
Avaû
;

482 
RdOff
;

483 
WrOff
;

484 
Rem
;

486 
pD©a
 = (c⁄° *)
pBuf„r
;

490 
pRög
 = &
_SEGGER_RTT
.
aUp
[
Buf„rIndex
];

491 
RdOff
 = 
pRög
->RdOff;

492 
WrOff
 = 
pRög
->WrOff;

506 i‡(
RdOff
 <
WrOff
) {

510 
Avaû
 = 
pRög
->
SizeOfBuf„r
 - 1u - 
WrOff
 ;

511 i‡(
Avaû
 >
NumByãs
) {

512 
	`mem˝y
(
pRög
->
pBuf„r
 + 
WrOff
, 
pD©a
, 
NumByãs
);

513 
pRög
->
WrOff
 = WrOf‡+ 
NumByãs
;

519 
Avaû
 +
RdOff
;

523 i‡(
Avaû
 >
NumByãs
) {

527 
Rem
 = 
pRög
->
SizeOfBuf„r
 - 
WrOff
;

528 i‡(
Rem
 > 
NumByãs
) {

529 
	`mem˝y
(
pRög
->
pBuf„r
 + 
WrOff
, 
pD©a
, 
NumByãs
);

530 
pRög
->
WrOff
 = WrOf‡+ 
NumByãs
;

535 
	`mem˝y
(
pRög
->
pBuf„r
 + 
WrOff
, 
pD©a
, 
Rem
);

536 
	`mem˝y
(
pRög
->
pBuf„r
, 
pD©a
 + 
Rem
, 
NumByãs
 - Rem);

537 
pRög
->
WrOff
 = 
NumByãs
 - 
Rem
;

542 
Avaû
 = 
RdOff
 - 
WrOff
 - 1u;

543 i‡(
Avaû
 >
NumByãs
) {

544 
	`mem˝y
(
pRög
->
pBuf„r
 + 
WrOff
, 
pD©a
, 
NumByãs
);

545 
pRög
->
WrOff
 = WrOf‡+ 
NumByãs
;

553 
	}
}

578 
	$SEGGER_RTT_WrôeNoLock
(
Buf„rIndex
, c⁄° * 
pBuf„r
, 
NumByãs
) {

579 
Sètus
;

580 
Avaû
;

581 c⁄° * 
pD©a
;

582 
SEGGER_RTT_RING_BUFFER
 *
pRög
;

584 
pD©a
 = (c⁄° *)
pBuf„r
;

588 
pRög
 = &
_SEGGER_RTT
.
aUp
[
Buf„rIndex
];

592 
pRög
->
Fœgs
) {

593 
SEGGER_RTT_MODE_NO_BLOCK_SKIP
:

598 
Avaû
 = 
	`_GëAvaûWrôeS∑˚
(
pRög
);

599 i‡(
Avaû
 < 
NumByãs
) {

600 
Sètus
 = 0u;

602 
Sètus
 = 
NumByãs
;

603 
	`_WrôeNoCheck
(
pRög
, 
pD©a
, 
NumByãs
);

606 
SEGGER_RTT_MODE_NO_BLOCK_TRIM
:

610 
Avaû
 = 
	`_GëAvaûWrôeS∑˚
(
pRög
);

611 
Sètus
 = 
Avaû
 < 
NumByãs
 ? Avail : NumBytes;

612 
	`_WrôeNoCheck
(
pRög
, 
pD©a
, 
Sètus
);

614 
SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL
:

618 
Sètus
 = 
	`_WrôeBlockög
(
pRög
, 
pD©a
, 
NumByãs
);

621 
Sètus
 = 0u;

627  
Sètus
;

628 
	}
}

649 
	$SEGGER_RTT_Wrôe
(
Buf„rIndex
, c⁄° * 
pBuf„r
, 
NumByãs
) {

650 
Sètus
;

651 vﬁ©ûê
SavedSèã
;

653 
	`INIT
();

654 
	`SEGGER_RTT_LOCK
(
SavedSèã
);

658 
Sètus
 = 
	`SEGGER_RTT_WrôeNoLock
(
Buf„rIndex
, 
pBuf„r
, 
NumByãs
);

662 
	`SEGGER_RTT_UNLOCK
(
SavedSèã
);

664  
Sètus
;

665 
	}
}

688 
	$SEGGER_RTT_WrôeSåög
(
Buf„rIndex
, c⁄° * 
s
) {

689 
Lí
;

691 
Lí
 = 
	`STRLEN
(
s
);

692  
	`SEGGER_RTT_Wrôe
(
Buf„rIndex
, 
s
, 
Lí
);

693 
	}
}

710 
	$SEGGER_RTT_GëKey
() {

711 
c
;

712 
r
;

714 
r
 = ()
	`SEGGER_RTT_Ród
(0u, &
c
, 1u);

715 i‡(
r
 == 1) {

716 
r
 = ()()
c
;

718 
r
 = -1;

720  
r
;

721 
	}
}

738 
	$SEGGER_RTT_WaôKey
() {

739 
r
;

742 
r
 = 
	`SEGGER_RTT_GëKey
();

743 } 
r
 < 0);

744  
r
;

745 
	}
}

761 
	$SEGGER_RTT_HasKey
() {

762 
RdOff
;

763 
r
;

765 
	`INIT
();

766 
RdOff
 = 
_SEGGER_RTT
.
aDown
[0].RdOff;

767 i‡(
RdOff
 !
_SEGGER_RTT
.
aDown
[0].
WrOff
) {

768 
r
 = 1;

770 
r
 = 0;

772  
r
;

773 
	}
}

787 
	$SEGGER_RTT_HasD©a
(
Buf„rIndex
) {

788 
SEGGER_RTT_RING_BUFFER
 *
pRög
;

789 
v
;

791 
pRög
 = &
_SEGGER_RTT
.
aDown
[
Buf„rIndex
];

792 
v
 = 
pRög
->
WrOff
;

793  
v
 - 
pRög
->
RdOff
;

794 
	}
}

817 
	$SEGGER_RTT_C⁄figUpBuf„r
(
Buf„rIndex
, c⁄° * 
sName
, * 
pBuf„r
, 
Buf„rSize
, 
Fœgs
) {

818 
r
;

819 vﬁ©ûê
SavedSèã
;

821 
	`INIT
();

822 i‡(
Buf„rIndex
 < ()
_SEGGER_RTT
.
MaxNumUpBuf„rs
) {

823 
	`SEGGER_RTT_LOCK
(
SavedSèã
);

824 i‡(
Buf„rIndex
 > 0u) {

825 
_SEGGER_RTT
.
aUp
[
Buf„rIndex
].
sName
 = sName;

826 
_SEGGER_RTT
.
aUp
[
Buf„rIndex
].
pBuf„r
 =ÖBuffer;

827 
_SEGGER_RTT
.
aUp
[
Buf„rIndex
].
SizeOfBuf„r
 = 
Buf„rSize
;

828 
_SEGGER_RTT
.
aUp
[
Buf„rIndex
].
RdOff
 = 0u;

829 
_SEGGER_RTT
.
aUp
[
Buf„rIndex
].
WrOff
 = 0u;

831 
_SEGGER_RTT
.
aUp
[
Buf„rIndex
].
Fœgs
 = Flags;

832 
	`SEGGER_RTT_UNLOCK
(
SavedSèã
);

833 
r
 = 0;

835 
r
 = -1;

837  
r
;

838 
	}
}

860 
	$SEGGER_RTT_C⁄figDownBuf„r
(
Buf„rIndex
, c⁄° * 
sName
, * 
pBuf„r
, 
Buf„rSize
, 
Fœgs
) {

861 
r
;

862 vﬁ©ûê
SavedSèã
;

864 
	`INIT
();

865 i‡(
Buf„rIndex
 < ()
_SEGGER_RTT
.
MaxNumDownBuf„rs
) {

866 
	`SEGGER_RTT_LOCK
(
SavedSèã
);

867 i‡(
Buf„rIndex
 > 0u) {

868 
_SEGGER_RTT
.
aDown
[
Buf„rIndex
].
sName
 = sName;

869 
_SEGGER_RTT
.
aDown
[
Buf„rIndex
].
pBuf„r
 =ÖBuffer;

870 
_SEGGER_RTT
.
aDown
[
Buf„rIndex
].
SizeOfBuf„r
 = 
Buf„rSize
;

871 
_SEGGER_RTT
.
aDown
[
Buf„rIndex
].
RdOff
 = 0u;

872 
_SEGGER_RTT
.
aDown
[
Buf„rIndex
].
WrOff
 = 0u;

874 
_SEGGER_RTT
.
aDown
[
Buf„rIndex
].
Fœgs
 = Flags;

875 
	`SEGGER_RTT_UNLOCK
(
SavedSèã
);

876 
r
 = 0;

878 
r
 = -1;

880  
r
;

881 
	}
}

899 
	$SEGGER_RTT_SëNameUpBuf„r
(
Buf„rIndex
, c⁄° * 
sName
) {

900 
r
;

901 vﬁ©ûê
SavedSèã
;

903 
	`INIT
();

904 i‡(
Buf„rIndex
 < ()
_SEGGER_RTT
.
MaxNumUpBuf„rs
) {

905 
	`SEGGER_RTT_LOCK
(
SavedSèã
);

906 
_SEGGER_RTT
.
aUp
[
Buf„rIndex
].
sName
 = sName;

907 
	`SEGGER_RTT_UNLOCK
(
SavedSèã
);

908 
r
 = 0;

910 
r
 = -1;

912  
r
;

913 
	}
}

931 
	$SEGGER_RTT_SëNameDownBuf„r
(
Buf„rIndex
, c⁄° * 
sName
) {

932 
r
;

933 vﬁ©ûê
SavedSèã
;

935 
	`INIT
();

936 i‡(
Buf„rIndex
 < ()
_SEGGER_RTT
.
MaxNumDownBuf„rs
) {

937 
	`SEGGER_RTT_LOCK
(
SavedSèã
);

938 
_SEGGER_RTT
.
aDown
[
Buf„rIndex
].
sName
 = sName;

939 
	`SEGGER_RTT_UNLOCK
(
SavedSèã
);

940 
r
 = 0;

942 
r
 = -1;

944  
r
;

945 
	}
}

956 
	$SEGGER_RTT_Inô
 () {

957 
	`INIT
();

958 
	}
}

974 
	$SEGGER_RTT_SëTîmöÆ
 (
TîmöÆId
) {

975 
ac
[2];

976 
SEGGER_RTT_RING_BUFFER
 *
pRög
;

977 vﬁ©ûê
SavedSèã
;

978 
Avaû
;

979 
r
;

981 
	`INIT
();

983 
r
 = 0;

984 
ac
[0] = 0xFFU;

985 i‡(
TîmöÆId
 < ()(
_aTîmöÆId
)) {

986 
ac
[1] = 
_aTîmöÆId
[()
TîmöÆId
];

987 
pRög
 = &
_SEGGER_RTT
.
aUp
[0];

988 
	`SEGGER_RTT_LOCK
(
SavedSèã
);

989 i‡((
pRög
->
Fœgs
 & 
SEGGER_RTT_MODE_MASK
Ë=
SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL
) {

990 
_A˘iveTîmöÆ
 = 
TîmöÆId
;

991 
	`_WrôeBlockög
(
pRög
, 
ac
, 2u);

993 
Avaû
 = 
	`_GëAvaûWrôeS∑˚
(
pRög
);

994 i‡(
Avaû
 >= 2) {

995 
_A˘iveTîmöÆ
 = 
TîmöÆId
;

996 
	`_WrôeNoCheck
(
pRög
, 
ac
, 2u);

998 
r
 = -1;

1001 
	`SEGGER_RTT_UNLOCK
(
SavedSèã
);

1003 
r
 = -1;

1005  
r
;

1006 
	}
}

1025 
	$SEGGER_RTT_TîmöÆOut
 (
TîmöÆId
, c⁄° * 
s
) {

1026 
Sètus
;

1027 
FøgLí
;

1028 
Avaû
;

1029 
SEGGER_RTT_RING_BUFFER
 *
pRög
;

1030 vﬁ©ûê
SavedSèã
;

1032 
	`INIT
();

1036 i‡(
TîmöÆId
 < ()(
_aTîmöÆId
)) {

1040 
pRög
 = &
_SEGGER_RTT
.
aUp
[0];

1045 
FøgLí
 = 
	`°æí
(
s
);

1049 
	`SEGGER_RTT_LOCK
(
SavedSèã
);

1050 
Avaû
 = 
	`_GëAvaûWrôeS∑˚
(
pRög
);

1051 
pRög
->
Fœgs
 & 
SEGGER_RTT_MODE_MASK
) {

1052 
SEGGER_RTT_MODE_NO_BLOCK_SKIP
:

1057 i‡(
Avaû
 < (
FøgLí
 + 4u)) {

1058 
Sètus
 = 0;

1060 
	`_Po°TîmöÆSwôch
(
pRög
, 
TîmöÆId
);

1061 
Sètus
 = ()
	`_WrôeBlockög
(
pRög
, 
s
, 
FøgLí
);

1062 
	`_Po°TîmöÆSwôch
(
pRög
, 
_A˘iveTîmöÆ
);

1065 
SEGGER_RTT_MODE_NO_BLOCK_TRIM
:

1071 i‡(
Avaû
 < 4u) {

1072 
Sètus
 = -1;

1074 
	`_Po°TîmöÆSwôch
(
pRög
, 
TîmöÆId
);

1075 
Sètus
 = ()
	`_WrôeBlockög
(
pRög
, 
s
, (
FøgLí
 < (
Avaû
 - 4u)) ? FragLen : (Avail - 4u));

1076 
	`_Po°TîmöÆSwôch
(
pRög
, 
_A˘iveTîmöÆ
);

1079 
SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL
:

1083 
	`_Po°TîmöÆSwôch
(
pRög
, 
TîmöÆId
);

1084 
Sètus
 = ()
	`_WrôeBlockög
(
pRög
, 
s
, 
FøgLí
);

1085 
	`_Po°TîmöÆSwôch
(
pRög
, 
_A˘iveTîmöÆ
);

1088 
Sètus
 = -1;

1094 
	`SEGGER_RTT_UNLOCK
(
SavedSèã
);

1096 
Sètus
 = -1;

1098  
Sètus
;

1099 
	}
}

	@D:\Private\Programing\MCU\Nordic\ble_app_template\nRF5_SDK_12.3.0_d7731ad\external\segger_rtt\SEGGER_RTT_printf.c

45 #i‡
deföed
(
NRF_LOG_USES_RTT
) && NRF_LOG_USES_RTT == 1

47 
	~"SEGGER_RTT.h
"

48 
	~"SEGGER_RTT_C⁄f.h
"

57 #i‚de‡
SEGGER_RTT_PRINTF_BUFFER_SIZE


58 
	#SEGGER_RTT_PRINTF_BUFFER_SIZE
 (64)

	)

61 
	~<°dlib.h
>

62 
	~<°d¨g.h
>

65 
	#FORMAT_FLAG_LEFT_JUSTIFY
 (1u << 0)

	)

66 
	#FORMAT_FLAG_PAD_ZERO
 (1u << 1)

	)

67 
	#FORMAT_FLAG_PRINT_SIGN
 (1u << 2)

	)

68 
	#FORMAT_FLAG_ALTERNATE
 (1u << 3)

	)

78 * 
	mpBuf„r
;

79 
	mBuf„rSize
;

80 
	mC¡
;

82 
	mRëu∫VÆue
;

84 
	mRTTBuf„rIndex
;

85 } 
	tSEGGER_RTT_PRINTF_DESC
;

93 
SEGGER_RTT_v¥ötf
(
Buf„rIndex
, c⁄° * 
sF‹m©
, 
va_li°
 * 
pP¨amLi°
);

105 
	$_St‹eCh¨
(
SEGGER_RTT_PRINTF_DESC
 * 
p
, 
c
) {

106 
C¡
;

108 
C¡
 = 
p
->Cnt;

109 i‡((
C¡
 + 1uË<
p
->
Buf„rSize
) {

110 *(
p
->
pBuf„r
 + 
C¡
Ë
c
;

111 
p
->
C¡
 = Cnt + 1u;

112 
p
->
Rëu∫VÆue
++;

117 i‡(
p
->
C¡
 =p->
Buf„rSize
) {

118 i‡(
	`SEGGER_RTT_Wrôe
(
p
->
RTTBuf„rIndex
,Ö->
pBuf„r
,Ö->
C¡
) !=Ö->Cnt) {

119 
p
->
Rëu∫VÆue
 = -1;

121 
p
->
C¡
 = 0u;

124 
	}
}

130 
	$_PrötUnsig√d
(
SEGGER_RTT_PRINTF_DESC
 * 
pBuf„rDesc
, 
v
, 
Ba£
, 
NumDigôs
, 
FõldWidth
, 
F‹m©Fœgs
) {

131 c⁄° 
_aV2C
[16] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };

132 
Div
;

133 
Digô
;

134 
Numbî
;

135 
Width
;

136 
c
;

138 
Numbî
 = 
v
;

139 
Digô
 = 1u;

143 
Width
 = 1u;

144 
Numbî
 >
Ba£
) {

145 
Numbî
 = (Numbî / 
Ba£
);

146 
Width
++;

148 i‡(
NumDigôs
 > 
Width
) {

149 
Width
 = 
NumDigôs
;

154 i‡((
F‹m©Fœgs
 & 
FORMAT_FLAG_LEFT_JUSTIFY
) == 0u) {

155 i‡(
FõldWidth
 != 0u) {

156 i‡(((
F‹m©Fœgs
 & 
FORMAT_FLAG_PAD_ZERO
Ë=FORMAT_FLAG_PAD_ZEROË&& (
NumDigôs
 == 0u)) {

157 
c
 = '0';

159 
c
 = ' ';

161 (
FõldWidth
 !0uË&& (
Width
 < FieldWidth)) {

162 
FõldWidth
--;

163 
	`_St‹eCh¨
(
pBuf„rDesc
, 
c
);

164 i‡(
pBuf„rDesc
->
Rëu∫VÆue
 < 0) {

170 i‡(
pBuf„rDesc
->
Rëu∫VÆue
 >= 0) {

177 i‡(
NumDigôs
 > 1u) {

178 
NumDigôs
--;

180 
Div
 = 
v
 / 
Digô
;

181 i‡(
Div
 < 
Ba£
) {

185 
Digô
 *
Ba£
;

191 
Div
 = 
v
 / 
Digô
;

192 
v
 -
Div
 * 
Digô
;

193 
	`_St‹eCh¨
(
pBuf„rDesc
, 
_aV2C
[
Div
]);

194 i‡(
pBuf„rDesc
->
Rëu∫VÆue
 < 0) {

197 
Digô
 /
Ba£
;

198 } 
Digô
);

202 i‡((
F‹m©Fœgs
 & 
FORMAT_FLAG_LEFT_JUSTIFY
) == FORMAT_FLAG_LEFT_JUSTIFY) {

203 i‡(
FõldWidth
 != 0u) {

204 (
FõldWidth
 !0uË&& (
Width
 < FieldWidth)) {

205 
FõldWidth
--;

206 
	`_St‹eCh¨
(
pBuf„rDesc
, ' ');

207 i‡(
pBuf„rDesc
->
Rëu∫VÆue
 < 0) {

214 
	}
}

220 
	$_PrötI¡
(
SEGGER_RTT_PRINTF_DESC
 * 
pBuf„rDesc
, 
v
, 
Ba£
, 
NumDigôs
, 
FõldWidth
, 
F‹m©Fœgs
) {

221 
Width
;

222 
Numbî
;

224 
Numbî
 = (
v
 < 0) ? -v : v;

229 
Width
 = 1u;

230 
Numbî
 >()
Ba£
) {

231 
Numbî
 = (Numbî / ()
Ba£
);

232 
Width
++;

234 i‡(
NumDigôs
 > 
Width
) {

235 
Width
 = 
NumDigôs
;

237 i‡((
FõldWidth
 > 0uË&& ((
v
 < 0Ë|| ((
F‹m©Fœgs
 & 
FORMAT_FLAG_PRINT_SIGN
) == FORMAT_FLAG_PRINT_SIGN))) {

238 
FõldWidth
--;

244 i‡((((
F‹m©Fœgs
 & 
FORMAT_FLAG_PAD_ZERO
Ë=0uË|| (
NumDigôs
 !0u)Ë&& ((F‹m©Fœg†& 
FORMAT_FLAG_LEFT_JUSTIFY
) == 0u)) {

245 i‡(
FõldWidth
 != 0u) {

246 (
FõldWidth
 !0uË&& (
Width
 < FieldWidth)) {

247 
FõldWidth
--;

248 
	`_St‹eCh¨
(
pBuf„rDesc
, ' ');

249 i‡(
pBuf„rDesc
->
Rëu∫VÆue
 < 0) {

258 i‡(
pBuf„rDesc
->
Rëu∫VÆue
 >= 0) {

259 i‡(
v
 < 0) {

260 
v
 = -v;

261 
	`_St‹eCh¨
(
pBuf„rDesc
, '-');

262 } i‡((
F‹m©Fœgs
 & 
FORMAT_FLAG_PRINT_SIGN
) == FORMAT_FLAG_PRINT_SIGN) {

263 
	`_St‹eCh¨
(
pBuf„rDesc
, '+');

267 i‡(
pBuf„rDesc
->
Rëu∫VÆue
 >= 0) {

271 i‡(((
F‹m©Fœgs
 & 
FORMAT_FLAG_PAD_ZERO
Ë=FORMAT_FLAG_PAD_ZEROË&& ((F‹m©Fœg†& 
FORMAT_FLAG_LEFT_JUSTIFY
Ë=0uË&& (
NumDigôs
 == 0u)) {

272 i‡(
FõldWidth
 != 0u) {

273 (
FõldWidth
 !0uË&& (
Width
 < FieldWidth)) {

274 
FõldWidth
--;

275 
	`_St‹eCh¨
(
pBuf„rDesc
, '0');

276 i‡(
pBuf„rDesc
->
Rëu∫VÆue
 < 0) {

282 i‡(
pBuf„rDesc
->
Rëu∫VÆue
 >= 0) {

286 
	`_PrötUnsig√d
(
pBuf„rDesc
, ()
v
, 
Ba£
, 
NumDigôs
, 
FõldWidth
, 
F‹m©Fœgs
);

290 
	}
}

315 
	$SEGGER_RTT_v¥ötf
(
Buf„rIndex
, c⁄° * 
sF‹m©
, 
va_li°
 * 
pP¨amLi°
) {

316 
c
;

317 
SEGGER_RTT_PRINTF_DESC
 
Buf„rDesc
;

318 
v
;

319 
NumDigôs
;

320 
F‹m©Fœgs
;

321 
FõldWidth
;

322 
acBuf„r
[
SEGGER_RTT_PRINTF_BUFFER_SIZE
];

324 
Buf„rDesc
.
pBuf„r
 = 
acBuf„r
;

325 
Buf„rDesc
.
Buf„rSize
 = 
SEGGER_RTT_PRINTF_BUFFER_SIZE
;

326 
Buf„rDesc
.
C¡
 = 0u;

327 
Buf„rDesc
.
RTTBuf„rIndex
 = 
Buf„rIndex
;

328 
Buf„rDesc
.
Rëu∫VÆue
 = 0;

331 
c
 = *
sF‹m©
;

332 
sF‹m©
++;

333 i‡(
c
 == 0u) {

336 i‡(
c
 == '%') {

340 
F‹m©Fœgs
 = 0u;

341 
v
 = 1;

343 
c
 = *
sF‹m©
;

344 
c
) {

345 '-': 
F‹m©Fœgs
 |
FORMAT_FLAG_LEFT_JUSTIFY
; 
sF‹m©
++; ;

346 '0': 
F‹m©Fœgs
 |
FORMAT_FLAG_PAD_ZERO
; 
sF‹m©
++; ;

347 '+': 
F‹m©Fœgs
 |
FORMAT_FLAG_PRINT_SIGN
; 
sF‹m©
++; ;

348 '#': 
F‹m©Fœgs
 |
FORMAT_FLAG_ALTERNATE
; 
sF‹m©
++; ;

349 : 
v
 = 0; ;

351 } 
v
);

355 
FõldWidth
 = 0u;

357 
c
 = *
sF‹m©
;

358 i‡((
c
 < '0') || (c > '9')) {

361 
sF‹m©
++;

362 
FõldWidth
 = (FõldWidth * 10uË+ (()
c
 - '0');

368 
NumDigôs
 = 0u;

369 
c
 = *
sF‹m©
;

370 i‡(
c
 == '.') {

371 
sF‹m©
++;

373 
c
 = *
sF‹m©
;

374 i‡((
c
 < '0') || (c > '9')) {

377 
sF‹m©
++;

378 
NumDigôs
 = NumDigô†* 10u + (()
c
 - '0');

384 
c
 = *
sF‹m©
;

386 i‡((
c
 == 'l') || (c == 'h')) {

387 
c
 = *
sF‹m©
;

388 
sF‹m©
++;

396 
c
) {

398 
c0
;

399 
v
 = 
	`va_¨g
(*
pP¨amLi°
, );

400 
c0
 = ()
v
;

401 
	`_St‹eCh¨
(&
Buf„rDesc
, 
c0
);

405 
v
 = 
	`va_¨g
(*
pP¨amLi°
, );

406 
	`_PrötI¡
(&
Buf„rDesc
, 
v
, 10u, 
NumDigôs
, 
FõldWidth
, 
F‹m©Fœgs
);

409 
v
 = 
	`va_¨g
(*
pP¨amLi°
, );

410 
	`_PrötUnsig√d
(&
Buf„rDesc
, ()
v
, 10u, 
NumDigôs
, 
FõldWidth
, 
F‹m©Fœgs
);

414 
v
 = 
	`va_¨g
(*
pP¨amLi°
, );

415 
	`_PrötUnsig√d
(&
Buf„rDesc
, ()
v
, 16u, 
NumDigôs
, 
FõldWidth
, 
F‹m©Fœgs
);

419 c⁄° * 
s
 = 
	`va_¨g
(*
pP¨amLi°
, const *);

421 
c
 = *
s
;

422 
s
++;

423 i‡(
c
 == '\0') {

426 
	`_St‹eCh¨
(&
Buf„rDesc
, 
c
);

427 } 
Buf„rDesc
.
Rëu∫VÆue
 >= 0);

431 
v
 = 
	`va_¨g
(*
pP¨amLi°
, );

432 
	`_PrötUnsig√d
(&
Buf„rDesc
, ()
v
, 16u, 8u, 8u, 0u);

435 
	`_St‹eCh¨
(&
Buf„rDesc
, '%');

440 
sF‹m©
++;

442 
	`_St‹eCh¨
(&
Buf„rDesc
, 
c
);

444 } 
Buf„rDesc
.
Rëu∫VÆue
 >= 0);

446 i‡(
Buf„rDesc
.
Rëu∫VÆue
 > 0) {

450 i‡(
Buf„rDesc
.
C¡
 != 0u) {

451 
	`SEGGER_RTT_Wrôe
(
Buf„rIndex
, 
acBuf„r
, 
Buf„rDesc
.
C¡
);

453 
Buf„rDesc
.
Rëu∫VÆue
 +()Buf„rDesc.
C¡
;

455  
Buf„rDesc
.
Rëu∫VÆue
;

456 
	}
}

489 
	$SEGGER_RTT_¥ötf
(
Buf„rIndex
, c⁄° * 
sF‹m©
, ...) {

490 
va_li°
 
P¨amLi°
;

492 
	`va_°¨t
(
P¨amLi°
, 
sF‹m©
);

493  
	`SEGGER_RTT_v¥ötf
(
Buf„rIndex
, 
sF‹m©
, &
P¨amLi°
);

494 
	}
}

	@D:\Private\Programing\MCU\Nordic\ble_app_template\pca10028\s130\armgcc\ble_app_template_gcc_nrf51.ld

3 
	$SEARCH_DIR
(.)

4 
	`GROUP
(-
lgcc
 -
lc
 -
 osys
)

6 
MEMORY


8 
	`FLASH
 (
rx
Ë: 
ORIGIN
 = 0x1b000, 
LENGTH
 = 0x25000

9 
	`RAM
 (
rwx
Ë: 
ORIGIN
 = 0x20001„8, 
LENGTH
 = 0x1fe8

10 
	}
}

12 
	gSECTIONS


14 .
	gfs_d©a
 :

16 
PROVIDE
(
__°¨t_fs_d©a
 = .);

17 
KEEP
(*(.
fs_d©a
))

18 
PROVIDE
(
__°›_fs_d©a
 = .);

19 } > 
	gRAM


20 .
	gpwr_mgmt_d©a
 :

22 
PROVIDE
(
__°¨t_pwr_mgmt_d©a
 = .);

23 
KEEP
(*(.
pwr_mgmt_d©a
))

24 
PROVIDE
(
__°›_pwr_mgmt_d©a
 = .);

25 } > 
	gRAM


26 } 
INSERT
 
	gAFTER
 .
	gd©a
;

28 
	gINCLUDE
 "nrf5x_common.ld"

	@
1
.
0
58
6421
D:\Private\Programing\MCU\Nordic\ble_app_template\BME280_HAL\BME280_source.c
D:\Private\Programing\MCU\Nordic\ble_app_template\BME280_HAL\BME280_source.h
D:\Private\Programing\MCU\Nordic\ble_app_template\BME280_HAL\BME280_user_interface.h
D:\Private\Programing\MCU\Nordic\ble_app_template\bme280Interface.c
D:\Private\Programing\MCU\Nordic\ble_app_template\bme280Interface.h
D:\Private\Programing\MCU\Nordic\ble_app_template\i2cHAL.h
D:\Private\Programing\MCU\Nordic\ble_app_template\main.c
D:\Private\Programing\MCU\Nordic\ble_app_template\nRF5_SDK_12.3.0_d7731ad\components\ble\ble_advertising\ble_advertising.c
D:\Private\Programing\MCU\Nordic\ble_app_template\nRF5_SDK_12.3.0_d7731ad\components\ble\common\ble_advdata.c
D:\Private\Programing\MCU\Nordic\ble_app_template\nRF5_SDK_12.3.0_d7731ad\components\ble\common\ble_conn_params.c
D:\Private\Programing\MCU\Nordic\ble_app_template\nRF5_SDK_12.3.0_d7731ad\components\ble\common\ble_conn_state.c
D:\Private\Programing\MCU\Nordic\ble_app_template\nRF5_SDK_12.3.0_d7731ad\components\ble\common\ble_srv_common.c
D:\Private\Programing\MCU\Nordic\ble_app_template\nRF5_SDK_12.3.0_d7731ad\components\ble\peer_manager\gatt_cache_manager.c
D:\Private\Programing\MCU\Nordic\ble_app_template\nRF5_SDK_12.3.0_d7731ad\components\ble\peer_manager\gatts_cache_manager.c
D:\Private\Programing\MCU\Nordic\ble_app_template\nRF5_SDK_12.3.0_d7731ad\components\ble\peer_manager\id_manager.c
D:\Private\Programing\MCU\Nordic\ble_app_template\nRF5_SDK_12.3.0_d7731ad\components\ble\peer_manager\peer_data.c
D:\Private\Programing\MCU\Nordic\ble_app_template\nRF5_SDK_12.3.0_d7731ad\components\ble\peer_manager\peer_data_storage.c
D:\Private\Programing\MCU\Nordic\ble_app_template\nRF5_SDK_12.3.0_d7731ad\components\ble\peer_manager\peer_database.c
D:\Private\Programing\MCU\Nordic\ble_app_template\nRF5_SDK_12.3.0_d7731ad\components\ble\peer_manager\peer_id.c
D:\Private\Programing\MCU\Nordic\ble_app_template\nRF5_SDK_12.3.0_d7731ad\components\ble\peer_manager\peer_manager.c
D:\Private\Programing\MCU\Nordic\ble_app_template\nRF5_SDK_12.3.0_d7731ad\components\ble\peer_manager\pm_buffer.c
D:\Private\Programing\MCU\Nordic\ble_app_template\nRF5_SDK_12.3.0_d7731ad\components\ble\peer_manager\pm_mutex.c
D:\Private\Programing\MCU\Nordic\ble_app_template\nRF5_SDK_12.3.0_d7731ad\components\ble\peer_manager\security_dispatcher.c
D:\Private\Programing\MCU\Nordic\ble_app_template\nRF5_SDK_12.3.0_d7731ad\components\ble\peer_manager\security_manager.c
D:\Private\Programing\MCU\Nordic\ble_app_template\nRF5_SDK_12.3.0_d7731ad\components\boards\boards.c
D:\Private\Programing\MCU\Nordic\ble_app_template\nRF5_SDK_12.3.0_d7731ad\components\drivers_nrf\clock\nrf_drv_clock.c
D:\Private\Programing\MCU\Nordic\ble_app_template\nRF5_SDK_12.3.0_d7731ad\components\drivers_nrf\common\nrf_drv_common.c
D:\Private\Programing\MCU\Nordic\ble_app_template\nRF5_SDK_12.3.0_d7731ad\components\drivers_nrf\gpiote\nrf_drv_gpiote.c
D:\Private\Programing\MCU\Nordic\ble_app_template\nRF5_SDK_12.3.0_d7731ad\components\drivers_nrf\hal\nrf_nvmc.c
D:\Private\Programing\MCU\Nordic\ble_app_template\nRF5_SDK_12.3.0_d7731ad\components\drivers_nrf\twi_master\nrf_drv_twi.c
D:\Private\Programing\MCU\Nordic\ble_app_template\nRF5_SDK_12.3.0_d7731ad\components\drivers_nrf\twi_master\nrf_drv_twi.h
D:\Private\Programing\MCU\Nordic\ble_app_template\nRF5_SDK_12.3.0_d7731ad\components\drivers_nrf\uart\nrf_drv_uart.c
D:\Private\Programing\MCU\Nordic\ble_app_template\nRF5_SDK_12.3.0_d7731ad\components\libraries\bsp\bsp.c
D:\Private\Programing\MCU\Nordic\ble_app_template\nRF5_SDK_12.3.0_d7731ad\components\libraries\bsp\bsp_btn_ble.c
D:\Private\Programing\MCU\Nordic\ble_app_template\nRF5_SDK_12.3.0_d7731ad\components\libraries\bsp\bsp_nfc.c
D:\Private\Programing\MCU\Nordic\ble_app_template\nRF5_SDK_12.3.0_d7731ad\components\libraries\button\app_button.c
D:\Private\Programing\MCU\Nordic\ble_app_template\nRF5_SDK_12.3.0_d7731ad\components\libraries\crc16\crc16.c
D:\Private\Programing\MCU\Nordic\ble_app_template\nRF5_SDK_12.3.0_d7731ad\components\libraries\fds\fds.c
D:\Private\Programing\MCU\Nordic\ble_app_template\nRF5_SDK_12.3.0_d7731ad\components\libraries\fstorage\fstorage.c
D:\Private\Programing\MCU\Nordic\ble_app_template\nRF5_SDK_12.3.0_d7731ad\components\libraries\hardfault\hardfault_implementation.c
D:\Private\Programing\MCU\Nordic\ble_app_template\nRF5_SDK_12.3.0_d7731ad\components\libraries\log\src\nrf_log_backend_serial.c
D:\Private\Programing\MCU\Nordic\ble_app_template\nRF5_SDK_12.3.0_d7731ad\components\libraries\log\src\nrf_log_frontend.c
D:\Private\Programing\MCU\Nordic\ble_app_template\nRF5_SDK_12.3.0_d7731ad\components\libraries\scheduler\app_scheduler.c
D:\Private\Programing\MCU\Nordic\ble_app_template\nRF5_SDK_12.3.0_d7731ad\components\libraries\sensorsim\sensorsim.c
D:\Private\Programing\MCU\Nordic\ble_app_template\nRF5_SDK_12.3.0_d7731ad\components\libraries\timer\app_timer.c
D:\Private\Programing\MCU\Nordic\ble_app_template\nRF5_SDK_12.3.0_d7731ad\components\libraries\util\app_error.c
D:\Private\Programing\MCU\Nordic\ble_app_template\nRF5_SDK_12.3.0_d7731ad\components\libraries\util\app_error_weak.c
D:\Private\Programing\MCU\Nordic\ble_app_template\nRF5_SDK_12.3.0_d7731ad\components\libraries\util\app_util_platform.c
D:\Private\Programing\MCU\Nordic\ble_app_template\nRF5_SDK_12.3.0_d7731ad\components\libraries\util\nrf_assert.c
D:\Private\Programing\MCU\Nordic\ble_app_template\nRF5_SDK_12.3.0_d7731ad\components\libraries\util\sdk_errors.c
D:\Private\Programing\MCU\Nordic\ble_app_template\nRF5_SDK_12.3.0_d7731ad\components\libraries\util\sdk_mapped_flags.c
D:\Private\Programing\MCU\Nordic\ble_app_template\nRF5_SDK_12.3.0_d7731ad\components\softdevice\common\softdevice_handler\softdevice_handler.c
D:\Private\Programing\MCU\Nordic\ble_app_template\nRF5_SDK_12.3.0_d7731ad\components\toolchain\gcc\gcc_startup_nrf51.S
D:\Private\Programing\MCU\Nordic\ble_app_template\nRF5_SDK_12.3.0_d7731ad\components\toolchain\system_nrf51.c
D:\Private\Programing\MCU\Nordic\ble_app_template\nRF5_SDK_12.3.0_d7731ad\external\segger_rtt\RTT_Syscalls_GCC.c
D:\Private\Programing\MCU\Nordic\ble_app_template\nRF5_SDK_12.3.0_d7731ad\external\segger_rtt\SEGGER_RTT.c
D:\Private\Programing\MCU\Nordic\ble_app_template\nRF5_SDK_12.3.0_d7731ad\external\segger_rtt\SEGGER_RTT_printf.c
D:\Private\Programing\MCU\Nordic\ble_app_template\pca10028\s130\armgcc\ble_app_template_gcc_nrf51.ld
